
IR Communication.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d9c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000470  08008f30  08008f30  00009f30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080093a0  080093a0  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  080093a0  080093a0  0000a3a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080093a8  080093a8  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080093a8  080093a8  0000a3a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080093ac  080093ac  0000a3ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080093b0  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000278  200001d8  08009584  0000b1d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08009584  0000b450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000bea2  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d72  00000000  00000000  000170a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00018e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000074e  00000000  00000000  000197b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ca42  00000000  00000000  00019efe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d68d  00000000  00000000  00036940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a5ad2  00000000  00000000  00043fcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e9a9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b30  00000000  00000000  000e9ae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000ed614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f14 	.word	0x08008f14

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	08008f14 	.word	0x08008f14

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_d2lz>:
 8000c88:	b538      	push	{r3, r4, r5, lr}
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	4604      	mov	r4, r0
 8000c90:	460d      	mov	r5, r1
 8000c92:	f7ff ff23 	bl	8000adc <__aeabi_dcmplt>
 8000c96:	b928      	cbnz	r0, 8000ca4 <__aeabi_d2lz+0x1c>
 8000c98:	4620      	mov	r0, r4
 8000c9a:	4629      	mov	r1, r5
 8000c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ca0:	f000 b80a 	b.w	8000cb8 <__aeabi_d2ulz>
 8000ca4:	4620      	mov	r0, r4
 8000ca6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000caa:	f000 f805 	bl	8000cb8 <__aeabi_d2ulz>
 8000cae:	4240      	negs	r0, r0
 8000cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cb4:	bd38      	pop	{r3, r4, r5, pc}
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_d2ulz>:
 8000cb8:	b5d0      	push	{r4, r6, r7, lr}
 8000cba:	4b0c      	ldr	r3, [pc, #48]	@ (8000cec <__aeabi_d2ulz+0x34>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	4606      	mov	r6, r0
 8000cc0:	460f      	mov	r7, r1
 8000cc2:	f7ff fc99 	bl	80005f8 <__aeabi_dmul>
 8000cc6:	f7ff ff6f 	bl	8000ba8 <__aeabi_d2uiz>
 8000cca:	4604      	mov	r4, r0
 8000ccc:	f7ff fc1a 	bl	8000504 <__aeabi_ui2d>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	@ (8000cf0 <__aeabi_d2ulz+0x38>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f7ff fc90 	bl	80005f8 <__aeabi_dmul>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	460b      	mov	r3, r1
 8000cdc:	4630      	mov	r0, r6
 8000cde:	4639      	mov	r1, r7
 8000ce0:	f7ff fad2 	bl	8000288 <__aeabi_dsub>
 8000ce4:	f7ff ff60 	bl	8000ba8 <__aeabi_d2uiz>
 8000ce8:	4621      	mov	r1, r4
 8000cea:	bdd0      	pop	{r4, r6, r7, pc}
 8000cec:	3df00000 	.word	0x3df00000
 8000cf0:	41f00000 	.word	0x41f00000
 8000cf4:	00000000 	.word	0x00000000

08000cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cfc:	f000 fbcc 	bl	8001498 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d00:	f000 f88c 	bl	8000e1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d04:	f000 f998 	bl	8001038 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d08:	f000 f966 	bl	8000fd8 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000d0c:	f000 f8de 	bl	8000ecc <MX_ADC1_Init>
  MX_DAC_Init();
 8000d10:	f000 f938 	bl	8000f84 <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Init(&hdac);
 8000d14:	4838      	ldr	r0, [pc, #224]	@ (8000df8 <main+0x100>)
 8000d16:	f001 fb46 	bl	80023a6 <HAL_DAC_Init>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000d1a:	2100      	movs	r1, #0
 8000d1c:	4836      	ldr	r0, [pc, #216]	@ (8000df8 <main+0x100>)
 8000d1e:	f001 fb83 	bl	8002428 <HAL_DAC_Start>
//		  HAL_UART_Transmit(&huart2, (uint8_t*) message, 20, 100);
//		  i -= 4;
//	  }


	  HAL_ADC_Start(&hadc1);
 8000d22:	4836      	ldr	r0, [pc, #216]	@ (8000dfc <main+0x104>)
 8000d24:	f000 fda4 	bl	8001870 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 100);
 8000d28:	2164      	movs	r1, #100	@ 0x64
 8000d2a:	4834      	ldr	r0, [pc, #208]	@ (8000dfc <main+0x104>)
 8000d2c:	f000 fe0e 	bl	800194c <HAL_ADC_PollForConversion>
	  raw = (double) HAL_ADC_GetValue(&hadc1);
 8000d30:	4832      	ldr	r0, [pc, #200]	@ (8000dfc <main+0x104>)
 8000d32:	f000 fec9 	bl	8001ac8 <HAL_ADC_GetValue>
 8000d36:	4603      	mov	r3, r0
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fbe3 	bl	8000504 <__aeabi_ui2d>
 8000d3e:	4602      	mov	r2, r0
 8000d40:	460b      	mov	r3, r1
 8000d42:	492f      	ldr	r1, [pc, #188]	@ (8000e00 <main+0x108>)
 8000d44:	e9c1 2300 	strd	r2, r3, [r1]

	  if (raw < 40) {
 8000d48:	4b2d      	ldr	r3, [pc, #180]	@ (8000e00 <main+0x108>)
 8000d4a:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d4e:	f04f 0200 	mov.w	r2, #0
 8000d52:	4b2c      	ldr	r3, [pc, #176]	@ (8000e04 <main+0x10c>)
 8000d54:	f7ff fec2 	bl	8000adc <__aeabi_dcmplt>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d007      	beq.n	8000d6e <main+0x76>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 3000);
 8000d5e:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8000d62:	2200      	movs	r2, #0
 8000d64:	2100      	movs	r1, #0
 8000d66:	4824      	ldr	r0, [pc, #144]	@ (8000df8 <main+0x100>)
 8000d68:	f001 fb3f 	bl	80023ea <HAL_DAC_SetValue>
 8000d6c:	e02f      	b.n	8000dce <main+0xd6>
	  } else if (raw > 200) {
 8000d6e:	4b24      	ldr	r3, [pc, #144]	@ (8000e00 <main+0x108>)
 8000d70:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d74:	f04f 0200 	mov.w	r2, #0
 8000d78:	4b23      	ldr	r3, [pc, #140]	@ (8000e08 <main+0x110>)
 8000d7a:	f7ff fecd 	bl	8000b18 <__aeabi_dcmpgt>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d007      	beq.n	8000d94 <main+0x9c>
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4000);
 8000d84:	f44f 637a 	mov.w	r3, #4000	@ 0xfa0
 8000d88:	2200      	movs	r2, #0
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	481a      	ldr	r0, [pc, #104]	@ (8000df8 <main+0x100>)
 8000d8e:	f001 fb2c 	bl	80023ea <HAL_DAC_SetValue>
 8000d92:	e01c      	b.n	8000dce <main+0xd6>
	  } else {
		  HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, (int) ((6.25 * raw) + 2750));
 8000d94:	4b1a      	ldr	r3, [pc, #104]	@ (8000e00 <main+0x108>)
 8000d96:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000d9a:	f04f 0200 	mov.w	r2, #0
 8000d9e:	4b1b      	ldr	r3, [pc, #108]	@ (8000e0c <main+0x114>)
 8000da0:	f7ff fc2a 	bl	80005f8 <__aeabi_dmul>
 8000da4:	4602      	mov	r2, r0
 8000da6:	460b      	mov	r3, r1
 8000da8:	4610      	mov	r0, r2
 8000daa:	4619      	mov	r1, r3
 8000dac:	a310      	add	r3, pc, #64	@ (adr r3, 8000df0 <main+0xf8>)
 8000dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000db2:	f7ff fa6b 	bl	800028c <__adddf3>
 8000db6:	4602      	mov	r2, r0
 8000db8:	460b      	mov	r3, r1
 8000dba:	4610      	mov	r0, r2
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	f7ff fecb 	bl	8000b58 <__aeabi_d2iz>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	480b      	ldr	r0, [pc, #44]	@ (8000df8 <main+0x100>)
 8000dca:	f001 fb0e 	bl	80023ea <HAL_DAC_SetValue>
	  }

	  sprintf(message, "%f\r\n", raw);
 8000dce:	4b0c      	ldr	r3, [pc, #48]	@ (8000e00 <main+0x108>)
 8000dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd4:	490e      	ldr	r1, [pc, #56]	@ (8000e10 <main+0x118>)
 8000dd6:	480f      	ldr	r0, [pc, #60]	@ (8000e14 <main+0x11c>)
 8000dd8:	f004 fc62 	bl	80056a0 <siprintf>
	  HAL_UART_Transmit(&huart2, (uint8_t*) message, 20, 100);
 8000ddc:	2364      	movs	r3, #100	@ 0x64
 8000dde:	2214      	movs	r2, #20
 8000de0:	490c      	ldr	r1, [pc, #48]	@ (8000e14 <main+0x11c>)
 8000de2:	480d      	ldr	r0, [pc, #52]	@ (8000e18 <main+0x120>)
 8000de4:	f003 f954 	bl	8004090 <HAL_UART_Transmit>
	  HAL_ADC_Start(&hadc1);
 8000de8:	e79b      	b.n	8000d22 <main+0x2a>
 8000dea:	bf00      	nop
 8000dec:	f3af 8000 	nop.w
 8000df0:	00000000 	.word	0x00000000
 8000df4:	40a57c00 	.word	0x40a57c00
 8000df8:	20000244 	.word	0x20000244
 8000dfc:	200001f4 	.word	0x200001f4
 8000e00:	200002e0 	.word	0x200002e0
 8000e04:	40440000 	.word	0x40440000
 8000e08:	40690000 	.word	0x40690000
 8000e0c:	40190000 	.word	0x40190000
 8000e10:	08008f30 	.word	0x08008f30
 8000e14:	200002e8 	.word	0x200002e8
 8000e18:	20000258 	.word	0x20000258

08000e1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b09c      	sub	sp, #112	@ 0x70
 8000e20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e22:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e26:	2228      	movs	r2, #40	@ 0x28
 8000e28:	2100      	movs	r1, #0
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f004 fc9b 	bl	8005766 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e30:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]
 8000e38:	605a      	str	r2, [r3, #4]
 8000e3a:	609a      	str	r2, [r3, #8]
 8000e3c:	60da      	str	r2, [r3, #12]
 8000e3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e40:	463b      	mov	r3, r7
 8000e42:	2234      	movs	r2, #52	@ 0x34
 8000e44:	2100      	movs	r1, #0
 8000e46:	4618      	mov	r0, r3
 8000e48:	f004 fc8d 	bl	8005766 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e50:	2301      	movs	r3, #1
 8000e52:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e54:	2310      	movs	r3, #16
 8000e56:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e58:	2302      	movs	r3, #2
 8000e5a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e60:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e64:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e66:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f001 fcd2 	bl	8002814 <HAL_RCC_OscConfig>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8000e76:	f000 f8f7 	bl	8001068 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e7a:	230f      	movs	r3, #15
 8000e7c:	637b      	str	r3, [r7, #52]	@ 0x34
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e82:	2300      	movs	r3, #0
 8000e84:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e8a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e90:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f002 fcfa 	bl	8003890 <HAL_RCC_ClockConfig>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000ea2:	f000 f8e1 	bl	8001068 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC1;
 8000ea6:	2380      	movs	r3, #128	@ 0x80
 8000ea8:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Adc1ClockSelection = RCC_ADC1PLLCLK_DIV1;
 8000eaa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000eae:	61bb      	str	r3, [r7, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f002 ff0c 	bl	8003cd0 <HAL_RCCEx_PeriphCLKConfig>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000ebe:	f000 f8d3 	bl	8001068 <Error_Handler>
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3770      	adds	r7, #112	@ 0x70
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
	...

08000ecc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ed2:	463b      	mov	r3, r7
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
 8000ee0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ee2:	4b27      	ldr	r3, [pc, #156]	@ (8000f80 <MX_ADC1_Init+0xb4>)
 8000ee4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000ee8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000eea:	4b25      	ldr	r3, [pc, #148]	@ (8000f80 <MX_ADC1_Init+0xb4>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ef0:	4b23      	ldr	r3, [pc, #140]	@ (8000f80 <MX_ADC1_Init+0xb4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ef6:	4b22      	ldr	r3, [pc, #136]	@ (8000f80 <MX_ADC1_Init+0xb4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000efc:	4b20      	ldr	r3, [pc, #128]	@ (8000f80 <MX_ADC1_Init+0xb4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f02:	4b1f      	ldr	r3, [pc, #124]	@ (8000f80 <MX_ADC1_Init+0xb4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f0a:	4b1d      	ldr	r3, [pc, #116]	@ (8000f80 <MX_ADC1_Init+0xb4>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f10:	4b1b      	ldr	r3, [pc, #108]	@ (8000f80 <MX_ADC1_Init+0xb4>)
 8000f12:	2201      	movs	r2, #1
 8000f14:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f16:	4b1a      	ldr	r3, [pc, #104]	@ (8000f80 <MX_ADC1_Init+0xb4>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000f1c:	4b18      	ldr	r3, [pc, #96]	@ (8000f80 <MX_ADC1_Init+0xb4>)
 8000f1e:	2201      	movs	r2, #1
 8000f20:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f22:	4b17      	ldr	r3, [pc, #92]	@ (8000f80 <MX_ADC1_Init+0xb4>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f2a:	4b15      	ldr	r3, [pc, #84]	@ (8000f80 <MX_ADC1_Init+0xb4>)
 8000f2c:	2204      	movs	r2, #4
 8000f2e:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f30:	4b13      	ldr	r3, [pc, #76]	@ (8000f80 <MX_ADC1_Init+0xb4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f36:	4b12      	ldr	r3, [pc, #72]	@ (8000f80 <MX_ADC1_Init+0xb4>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f3c:	4810      	ldr	r0, [pc, #64]	@ (8000f80 <MX_ADC1_Init+0xb4>)
 8000f3e:	f000 fb11 	bl	8001564 <HAL_ADC_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0x80>
  {
    Error_Handler();
 8000f48:	f000 f88e 	bl	8001068 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f54:	2300      	movs	r3, #0
 8000f56:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f64:	463b      	mov	r3, r7
 8000f66:	4619      	mov	r1, r3
 8000f68:	4805      	ldr	r0, [pc, #20]	@ (8000f80 <MX_ADC1_Init+0xb4>)
 8000f6a:	f000 fdbb 	bl	8001ae4 <HAL_ADC_ConfigChannel>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f74:	f000 f878 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f78:	bf00      	nop
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	200001f4 	.word	0x200001f4

08000f84 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000f94:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd0 <MX_DAC_Init+0x4c>)
 8000f96:	4a0f      	ldr	r2, [pc, #60]	@ (8000fd4 <MX_DAC_Init+0x50>)
 8000f98:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000f9a:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <MX_DAC_Init+0x4c>)
 8000f9c:	f001 fa03 	bl	80023a6 <HAL_DAC_Init>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_DAC_Init+0x26>
  {
    Error_Handler();
 8000fa6:	f000 f85f 	bl	8001068 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000faa:	2300      	movs	r3, #0
 8000fac:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000fb2:	1d3b      	adds	r3, r7, #4
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4619      	mov	r1, r3
 8000fb8:	4805      	ldr	r0, [pc, #20]	@ (8000fd0 <MX_DAC_Init+0x4c>)
 8000fba:	f001 fa6c 	bl	8002496 <HAL_DAC_ConfigChannel>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d001      	beq.n	8000fc8 <MX_DAC_Init+0x44>
  {
    Error_Handler();
 8000fc4:	f000 f850 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000fc8:	bf00      	nop
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000244 	.word	0x20000244
 8000fd4:	40007400 	.word	0x40007400

08000fd8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fdc:	4b14      	ldr	r3, [pc, #80]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 8000fde:	4a15      	ldr	r2, [pc, #84]	@ (8001034 <MX_USART2_UART_Init+0x5c>)
 8000fe0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000fe2:	4b13      	ldr	r3, [pc, #76]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 8000fe4:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000fe8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fea:	4b11      	ldr	r3, [pc, #68]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 8000ffe:	220c      	movs	r2, #12
 8001000:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001002:	4b0b      	ldr	r3, [pc, #44]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001008:	4b09      	ldr	r3, [pc, #36]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 800100a:	2200      	movs	r2, #0
 800100c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800100e:	4b08      	ldr	r3, [pc, #32]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001014:	4b06      	ldr	r3, [pc, #24]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800101a:	4805      	ldr	r0, [pc, #20]	@ (8001030 <MX_USART2_UART_Init+0x58>)
 800101c:	f002 ffea 	bl	8003ff4 <HAL_UART_Init>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001026:	f000 f81f 	bl	8001068 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20000258 	.word	0x20000258
 8001034:	40004400 	.word	0x40004400

08001038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <MX_GPIO_Init+0x2c>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <MX_GPIO_Init+0x2c>)
 8001044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001048:	6153      	str	r3, [r2, #20]
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <MX_GPIO_Init+0x2c>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000

08001068 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800106c:	b672      	cpsid	i
}
 800106e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <Error_Handler+0x8>

08001074 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107a:	4b0f      	ldr	r3, [pc, #60]	@ (80010b8 <HAL_MspInit+0x44>)
 800107c:	699b      	ldr	r3, [r3, #24]
 800107e:	4a0e      	ldr	r2, [pc, #56]	@ (80010b8 <HAL_MspInit+0x44>)
 8001080:	f043 0301 	orr.w	r3, r3, #1
 8001084:	6193      	str	r3, [r2, #24]
 8001086:	4b0c      	ldr	r3, [pc, #48]	@ (80010b8 <HAL_MspInit+0x44>)
 8001088:	699b      	ldr	r3, [r3, #24]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001092:	4b09      	ldr	r3, [pc, #36]	@ (80010b8 <HAL_MspInit+0x44>)
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	4a08      	ldr	r2, [pc, #32]	@ (80010b8 <HAL_MspInit+0x44>)
 8001098:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109c:	61d3      	str	r3, [r2, #28]
 800109e:	4b06      	ldr	r3, [pc, #24]	@ (80010b8 <HAL_MspInit+0x44>)
 80010a0:	69db      	ldr	r3, [r3, #28]
 80010a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a6:	603b      	str	r3, [r7, #0]
 80010a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010aa:	bf00      	nop
 80010ac:	370c      	adds	r7, #12
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40021000 	.word	0x40021000

080010bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80010dc:	d124      	bne.n	8001128 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010de:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <HAL_ADC_MspInit+0x74>)
 80010e0:	695b      	ldr	r3, [r3, #20]
 80010e2:	4a13      	ldr	r2, [pc, #76]	@ (8001130 <HAL_ADC_MspInit+0x74>)
 80010e4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010e8:	6153      	str	r3, [r2, #20]
 80010ea:	4b11      	ldr	r3, [pc, #68]	@ (8001130 <HAL_ADC_MspInit+0x74>)
 80010ec:	695b      	ldr	r3, [r3, #20]
 80010ee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	613b      	str	r3, [r7, #16]
 80010f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001130 <HAL_ADC_MspInit+0x74>)
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <HAL_ADC_MspInit+0x74>)
 80010fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001100:	6153      	str	r3, [r2, #20]
 8001102:	4b0b      	ldr	r3, [pc, #44]	@ (8001130 <HAL_ADC_MspInit+0x74>)
 8001104:	695b      	ldr	r3, [r3, #20]
 8001106:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800110e:	2301      	movs	r3, #1
 8001110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001112:	2303      	movs	r3, #3
 8001114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800111a:	f107 0314 	add.w	r3, r7, #20
 800111e:	4619      	mov	r1, r3
 8001120:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001124:	f001 fa04 	bl	8002530 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001128:	bf00      	nop
 800112a:	3728      	adds	r7, #40	@ 0x28
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	40021000 	.word	0x40021000

08001134 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	b08a      	sub	sp, #40	@ 0x28
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
 8001146:	609a      	str	r2, [r3, #8]
 8001148:	60da      	str	r2, [r3, #12]
 800114a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a15      	ldr	r2, [pc, #84]	@ (80011a8 <HAL_DAC_MspInit+0x74>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d124      	bne.n	80011a0 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001156:	4b15      	ldr	r3, [pc, #84]	@ (80011ac <HAL_DAC_MspInit+0x78>)
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	4a14      	ldr	r2, [pc, #80]	@ (80011ac <HAL_DAC_MspInit+0x78>)
 800115c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001160:	61d3      	str	r3, [r2, #28]
 8001162:	4b12      	ldr	r3, [pc, #72]	@ (80011ac <HAL_DAC_MspInit+0x78>)
 8001164:	69db      	ldr	r3, [r3, #28]
 8001166:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	4b0f      	ldr	r3, [pc, #60]	@ (80011ac <HAL_DAC_MspInit+0x78>)
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	4a0e      	ldr	r2, [pc, #56]	@ (80011ac <HAL_DAC_MspInit+0x78>)
 8001174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001178:	6153      	str	r3, [r2, #20]
 800117a:	4b0c      	ldr	r3, [pc, #48]	@ (80011ac <HAL_DAC_MspInit+0x78>)
 800117c:	695b      	ldr	r3, [r3, #20]
 800117e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001182:	60fb      	str	r3, [r7, #12]
 8001184:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001186:	2310      	movs	r3, #16
 8001188:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800118a:	2303      	movs	r3, #3
 800118c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800118e:	2300      	movs	r3, #0
 8001190:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001192:	f107 0314 	add.w	r3, r7, #20
 8001196:	4619      	mov	r1, r3
 8001198:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800119c:	f001 f9c8 	bl	8002530 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	@ 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40007400 	.word	0x40007400
 80011ac:	40021000 	.word	0x40021000

080011b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b08a      	sub	sp, #40	@ 0x28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b8:	f107 0314 	add.w	r3, r7, #20
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
 80011c2:	609a      	str	r2, [r3, #8]
 80011c4:	60da      	str	r2, [r3, #12]
 80011c6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a17      	ldr	r2, [pc, #92]	@ (800122c <HAL_UART_MspInit+0x7c>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d128      	bne.n	8001224 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011d2:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <HAL_UART_MspInit+0x80>)
 80011d4:	69db      	ldr	r3, [r3, #28]
 80011d6:	4a16      	ldr	r2, [pc, #88]	@ (8001230 <HAL_UART_MspInit+0x80>)
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011dc:	61d3      	str	r3, [r2, #28]
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <HAL_UART_MspInit+0x80>)
 80011e0:	69db      	ldr	r3, [r3, #28]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011e6:	613b      	str	r3, [r7, #16]
 80011e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <HAL_UART_MspInit+0x80>)
 80011ec:	695b      	ldr	r3, [r3, #20]
 80011ee:	4a10      	ldr	r2, [pc, #64]	@ (8001230 <HAL_UART_MspInit+0x80>)
 80011f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011f4:	6153      	str	r3, [r2, #20]
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <HAL_UART_MspInit+0x80>)
 80011f8:	695b      	ldr	r3, [r3, #20]
 80011fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011fe:	60fb      	str	r3, [r7, #12]
 8001200:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001202:	230c      	movs	r3, #12
 8001204:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001206:	2302      	movs	r3, #2
 8001208:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800120a:	2300      	movs	r3, #0
 800120c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800120e:	2303      	movs	r3, #3
 8001210:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001212:	2307      	movs	r3, #7
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	4619      	mov	r1, r3
 800121c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001220:	f001 f986 	bl	8002530 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001224:	bf00      	nop
 8001226:	3728      	adds	r7, #40	@ 0x28
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	40004400 	.word	0x40004400
 8001230:	40021000 	.word	0x40021000

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <NMI_Handler+0x4>

0800123c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <HardFault_Handler+0x4>

08001244 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <MemManage_Handler+0x4>

0800124c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001250:	bf00      	nop
 8001252:	e7fd      	b.n	8001250 <BusFault_Handler+0x4>

08001254 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001258:	bf00      	nop
 800125a:	e7fd      	b.n	8001258 <UsageFault_Handler+0x4>

0800125c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800125c:	b480      	push	{r7}
 800125e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800126a:	b480      	push	{r7}
 800126c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800127c:	bf00      	nop
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800128a:	f000 f94b 	bl	8001524 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}

08001292 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001292:	b480      	push	{r7}
 8001294:	af00      	add	r7, sp, #0
  return 1;
 8001296:	2301      	movs	r3, #1
}
 8001298:	4618      	mov	r0, r3
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <_kill>:

int _kill(int pid, int sig)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b082      	sub	sp, #8
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
 80012aa:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80012ac:	f004 faae 	bl	800580c <__errno>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2216      	movs	r2, #22
 80012b4:	601a      	str	r2, [r3, #0]
  return -1;
 80012b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <_exit>:

void _exit (int status)
{
 80012c2:	b580      	push	{r7, lr}
 80012c4:	b082      	sub	sp, #8
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012ca:	f04f 31ff 	mov.w	r1, #4294967295
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f7ff ffe7 	bl	80012a2 <_kill>
  while (1) {}    /* Make sure we hang here */
 80012d4:	bf00      	nop
 80012d6:	e7fd      	b.n	80012d4 <_exit+0x12>

080012d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0
 80012de:	60f8      	str	r0, [r7, #12]
 80012e0:	60b9      	str	r1, [r7, #8]
 80012e2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012e4:	2300      	movs	r3, #0
 80012e6:	617b      	str	r3, [r7, #20]
 80012e8:	e00a      	b.n	8001300 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012ea:	f3af 8000 	nop.w
 80012ee:	4601      	mov	r1, r0
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	1c5a      	adds	r2, r3, #1
 80012f4:	60ba      	str	r2, [r7, #8]
 80012f6:	b2ca      	uxtb	r2, r1
 80012f8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	3301      	adds	r3, #1
 80012fe:	617b      	str	r3, [r7, #20]
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	429a      	cmp	r2, r3
 8001306:	dbf0      	blt.n	80012ea <_read+0x12>
  }

  return len;
 8001308:	687b      	ldr	r3, [r7, #4]
}
 800130a:	4618      	mov	r0, r3
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b086      	sub	sp, #24
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800131e:	2300      	movs	r3, #0
 8001320:	617b      	str	r3, [r7, #20]
 8001322:	e009      	b.n	8001338 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	1c5a      	adds	r2, r3, #1
 8001328:	60ba      	str	r2, [r7, #8]
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	4618      	mov	r0, r3
 800132e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	3301      	adds	r3, #1
 8001336:	617b      	str	r3, [r7, #20]
 8001338:	697a      	ldr	r2, [r7, #20]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	429a      	cmp	r2, r3
 800133e:	dbf1      	blt.n	8001324 <_write+0x12>
  }
  return len;
 8001340:	687b      	ldr	r3, [r7, #4]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <_close>:

int _close(int file)
{
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001356:	4618      	mov	r0, r3
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr

08001362 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001362:	b480      	push	{r7}
 8001364:	b083      	sub	sp, #12
 8001366:	af00      	add	r7, sp, #0
 8001368:	6078      	str	r0, [r7, #4]
 800136a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001372:	605a      	str	r2, [r3, #4]
  return 0;
 8001374:	2300      	movs	r3, #0
}
 8001376:	4618      	mov	r0, r3
 8001378:	370c      	adds	r7, #12
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr

08001382 <_isatty>:

int _isatty(int file)
{
 8001382:	b480      	push	{r7}
 8001384:	b083      	sub	sp, #12
 8001386:	af00      	add	r7, sp, #0
 8001388:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800138a:	2301      	movs	r3, #1
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	60f8      	str	r0, [r7, #12]
 80013a0:	60b9      	str	r1, [r7, #8]
 80013a2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013a4:	2300      	movs	r3, #0
}
 80013a6:	4618      	mov	r0, r3
 80013a8:	3714      	adds	r7, #20
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013bc:	4a14      	ldr	r2, [pc, #80]	@ (8001410 <_sbrk+0x5c>)
 80013be:	4b15      	ldr	r3, [pc, #84]	@ (8001414 <_sbrk+0x60>)
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013c8:	4b13      	ldr	r3, [pc, #76]	@ (8001418 <_sbrk+0x64>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d102      	bne.n	80013d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013d0:	4b11      	ldr	r3, [pc, #68]	@ (8001418 <_sbrk+0x64>)
 80013d2:	4a12      	ldr	r2, [pc, #72]	@ (800141c <_sbrk+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013d6:	4b10      	ldr	r3, [pc, #64]	@ (8001418 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d207      	bcs.n	80013f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013e4:	f004 fa12 	bl	800580c <__errno>
 80013e8:	4603      	mov	r3, r0
 80013ea:	220c      	movs	r2, #12
 80013ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ee:	f04f 33ff 	mov.w	r3, #4294967295
 80013f2:	e009      	b.n	8001408 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013f4:	4b08      	ldr	r3, [pc, #32]	@ (8001418 <_sbrk+0x64>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013fa:	4b07      	ldr	r3, [pc, #28]	@ (8001418 <_sbrk+0x64>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4413      	add	r3, r2
 8001402:	4a05      	ldr	r2, [pc, #20]	@ (8001418 <_sbrk+0x64>)
 8001404:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001406:	68fb      	ldr	r3, [r7, #12]
}
 8001408:	4618      	mov	r0, r3
 800140a:	3718      	adds	r7, #24
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20004000 	.word	0x20004000
 8001414:	00000400 	.word	0x00000400
 8001418:	200002fc 	.word	0x200002fc
 800141c:	20000450 	.word	0x20000450

08001420 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001424:	4b06      	ldr	r3, [pc, #24]	@ (8001440 <SystemInit+0x20>)
 8001426:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800142a:	4a05      	ldr	r2, [pc, #20]	@ (8001440 <SystemInit+0x20>)
 800142c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001430:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001444:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800147c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001448:	f7ff ffea 	bl	8001420 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800144c:	480c      	ldr	r0, [pc, #48]	@ (8001480 <LoopForever+0x6>)
  ldr r1, =_edata
 800144e:	490d      	ldr	r1, [pc, #52]	@ (8001484 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001450:	4a0d      	ldr	r2, [pc, #52]	@ (8001488 <LoopForever+0xe>)
  movs r3, #0
 8001452:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001454:	e002      	b.n	800145c <LoopCopyDataInit>

08001456 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001456:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001458:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800145a:	3304      	adds	r3, #4

0800145c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800145c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800145e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001460:	d3f9      	bcc.n	8001456 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001462:	4a0a      	ldr	r2, [pc, #40]	@ (800148c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001464:	4c0a      	ldr	r4, [pc, #40]	@ (8001490 <LoopForever+0x16>)
  movs r3, #0
 8001466:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001468:	e001      	b.n	800146e <LoopFillZerobss>

0800146a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800146a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800146c:	3204      	adds	r2, #4

0800146e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800146e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001470:	d3fb      	bcc.n	800146a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001472:	f004 f9d1 	bl	8005818 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001476:	f7ff fc3f 	bl	8000cf8 <main>

0800147a <LoopForever>:

LoopForever:
    b LoopForever
 800147a:	e7fe      	b.n	800147a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800147c:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8001480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001484:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001488:	080093b0 	.word	0x080093b0
  ldr r2, =_sbss
 800148c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001490:	20000450 	.word	0x20000450

08001494 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001494:	e7fe      	b.n	8001494 <ADC1_IRQHandler>
	...

08001498 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800149c:	4b08      	ldr	r3, [pc, #32]	@ (80014c0 <HAL_Init+0x28>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a07      	ldr	r2, [pc, #28]	@ (80014c0 <HAL_Init+0x28>)
 80014a2:	f043 0310 	orr.w	r3, r3, #16
 80014a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014a8:	2003      	movs	r0, #3
 80014aa:	f000 ff49 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80014ae:	200f      	movs	r0, #15
 80014b0:	f000 f808 	bl	80014c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80014b4:	f7ff fdde 	bl	8001074 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	40022000 	.word	0x40022000

080014c4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80014cc:	4b12      	ldr	r3, [pc, #72]	@ (8001518 <HAL_InitTick+0x54>)
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	4b12      	ldr	r3, [pc, #72]	@ (800151c <HAL_InitTick+0x58>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	4619      	mov	r1, r3
 80014d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014da:	fbb3 f3f1 	udiv	r3, r3, r1
 80014de:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 ff53 	bl	800238e <HAL_SYSTICK_Config>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e00e      	b.n	8001510 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	2b0f      	cmp	r3, #15
 80014f6:	d80a      	bhi.n	800150e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014f8:	2200      	movs	r2, #0
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001500:	f000 ff29 	bl	8002356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001504:	4a06      	ldr	r2, [pc, #24]	@ (8001520 <HAL_InitTick+0x5c>)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
 800150c:	e000      	b.n	8001510 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}
 8001518:	20000000 	.word	0x20000000
 800151c:	20000008 	.word	0x20000008
 8001520:	20000004 	.word	0x20000004

08001524 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001528:	4b06      	ldr	r3, [pc, #24]	@ (8001544 <HAL_IncTick+0x20>)
 800152a:	781b      	ldrb	r3, [r3, #0]
 800152c:	461a      	mov	r2, r3
 800152e:	4b06      	ldr	r3, [pc, #24]	@ (8001548 <HAL_IncTick+0x24>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4413      	add	r3, r2
 8001534:	4a04      	ldr	r2, [pc, #16]	@ (8001548 <HAL_IncTick+0x24>)
 8001536:	6013      	str	r3, [r2, #0]
}
 8001538:	bf00      	nop
 800153a:	46bd      	mov	sp, r7
 800153c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001540:	4770      	bx	lr
 8001542:	bf00      	nop
 8001544:	20000008 	.word	0x20000008
 8001548:	20000300 	.word	0x20000300

0800154c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800154c:	b480      	push	{r7}
 800154e:	af00      	add	r7, sp, #0
  return uwTick;  
 8001550:	4b03      	ldr	r3, [pc, #12]	@ (8001560 <HAL_GetTick+0x14>)
 8001552:	681b      	ldr	r3, [r3, #0]
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	20000300 	.word	0x20000300

08001564 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b09a      	sub	sp, #104	@ 0x68
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800156c:	2300      	movs	r3, #0
 800156e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8001572:	2300      	movs	r3, #0
 8001574:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d101      	bne.n	8001584 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001580:	2301      	movs	r3, #1
 8001582:	e169      	b.n	8001858 <HAL_ADC_Init+0x2f4>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	691b      	ldr	r3, [r3, #16]
 8001588:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158e:	f003 0310 	and.w	r3, r3, #16
 8001592:	2b00      	cmp	r3, #0
 8001594:	d176      	bne.n	8001684 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	2b00      	cmp	r3, #0
 800159c:	d152      	bne.n	8001644 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2200      	movs	r2, #0
 80015a2:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2200      	movs	r2, #0
 80015a8:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80015b8:	6878      	ldr	r0, [r7, #4]
 80015ba:	f7ff fd7f 	bl	80010bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d13b      	bne.n	8001644 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80015cc:	6878      	ldr	r0, [r7, #4]
 80015ce:	f000 fd9f 	bl	8002110 <ADC_Disable>
 80015d2:	4603      	mov	r3, r0
 80015d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	f003 0310 	and.w	r3, r3, #16
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d12f      	bne.n	8001644 <HAL_ADC_Init+0xe0>
 80015e4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d12b      	bne.n	8001644 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015f0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80015f4:	f023 0302 	bic.w	r3, r3, #2
 80015f8:	f043 0202 	orr.w	r2, r3, #2
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689a      	ldr	r2, [r3, #8]
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800160e:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689a      	ldr	r2, [r3, #8]
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800161e:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001620:	4b8f      	ldr	r3, [pc, #572]	@ (8001860 <HAL_ADC_Init+0x2fc>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a8f      	ldr	r2, [pc, #572]	@ (8001864 <HAL_ADC_Init+0x300>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	0c9a      	lsrs	r2, r3, #18
 800162c:	4613      	mov	r3, r2
 800162e:	009b      	lsls	r3, r3, #2
 8001630:	4413      	add	r3, r2
 8001632:	005b      	lsls	r3, r3, #1
 8001634:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001636:	e002      	b.n	800163e <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	3b01      	subs	r3, #1
 800163c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800163e:	68bb      	ldr	r3, [r7, #8]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1f9      	bne.n	8001638 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	689b      	ldr	r3, [r3, #8]
 8001658:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800165c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001660:	d110      	bne.n	8001684 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	f023 0312 	bic.w	r3, r3, #18
 800166a:	f043 0210 	orr.w	r2, r3, #16
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001676:	f043 0201 	orr.w	r2, r3, #1
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001688:	f003 0310 	and.w	r3, r3, #16
 800168c:	2b00      	cmp	r3, #0
 800168e:	f040 80d6 	bne.w	800183e <HAL_ADC_Init+0x2da>
 8001692:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001696:	2b00      	cmp	r3, #0
 8001698:	f040 80d1 	bne.w	800183e <HAL_ADC_Init+0x2da>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	689b      	ldr	r3, [r3, #8]
 80016a2:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	f040 80c9 	bne.w	800183e <HAL_ADC_Init+0x2da>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80016b4:	f043 0202 	orr.w	r2, r3, #2
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016bc:	4b6a      	ldr	r3, [pc, #424]	@ (8001868 <HAL_ADC_Init+0x304>)
 80016be:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80016c0:	2300      	movs	r3, #0
 80016c2:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	689b      	ldr	r3, [r3, #8]
 80016ca:	f003 0303 	and.w	r3, r3, #3
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d108      	bne.n	80016e4 <HAL_ADC_Init+0x180>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d101      	bne.n	80016e4 <HAL_ADC_Init+0x180>
 80016e0:	2301      	movs	r3, #1
 80016e2:	e000      	b.n	80016e6 <HAL_ADC_Init+0x182>
 80016e4:	2300      	movs	r3, #0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d11c      	bne.n	8001724 <HAL_ADC_Init+0x1c0>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80016ea:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d010      	beq.n	8001712 <HAL_ADC_Init+0x1ae>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	689b      	ldr	r3, [r3, #8]
 80016f4:	f003 0303 	and.w	r3, r3, #3
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d107      	bne.n	800170c <HAL_ADC_Init+0x1a8>
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0301 	and.w	r3, r3, #1
 8001704:	2b01      	cmp	r3, #1
 8001706:	d101      	bne.n	800170c <HAL_ADC_Init+0x1a8>
 8001708:	2301      	movs	r3, #1
 800170a:	e000      	b.n	800170e <HAL_ADC_Init+0x1aa>
 800170c:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800170e:	2b00      	cmp	r3, #0
 8001710:	d108      	bne.n	8001724 <HAL_ADC_Init+0x1c0>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001712:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	431a      	orrs	r2, r3
 8001720:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001722:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	7e5b      	ldrb	r3, [r3, #25]
 8001728:	035b      	lsls	r3, r3, #13
 800172a:	687a      	ldr	r2, [r7, #4]
 800172c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800172e:	2a01      	cmp	r2, #1
 8001730:	d002      	beq.n	8001738 <HAL_ADC_Init+0x1d4>
 8001732:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001736:	e000      	b.n	800173a <HAL_ADC_Init+0x1d6>
 8001738:	2200      	movs	r2, #0
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	431a      	orrs	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	4313      	orrs	r3, r2
 8001748:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800174a:	4313      	orrs	r3, r2
 800174c:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d11b      	bne.n	8001790 <HAL_ADC_Init+0x22c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	7e5b      	ldrb	r3, [r3, #25]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d109      	bne.n	8001774 <HAL_ADC_Init+0x210>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001764:	3b01      	subs	r3, #1
 8001766:	045a      	lsls	r2, r3, #17
 8001768:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800176a:	4313      	orrs	r3, r2
 800176c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001770:	663b      	str	r3, [r7, #96]	@ 0x60
 8001772:	e00d      	b.n	8001790 <HAL_ADC_Init+0x22c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001778:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 800177c:	f043 0220 	orr.w	r2, r3, #32
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001788:	f043 0201 	orr.w	r2, r3, #1
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001794:	2b01      	cmp	r3, #1
 8001796:	d007      	beq.n	80017a8 <HAL_ADC_Init+0x244>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017a0:	4313      	orrs	r3, r2
 80017a2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017a4:	4313      	orrs	r3, r2
 80017a6:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d114      	bne.n	80017e0 <HAL_ADC_Init+0x27c>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	6812      	ldr	r2, [r2, #0]
 80017c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80017c4:	f023 0302 	bic.w	r3, r3, #2
 80017c8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	7e1b      	ldrb	r3, [r3, #24]
 80017ce:	039a      	lsls	r2, r3, #14
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017d6:	005b      	lsls	r3, r3, #1
 80017d8:	4313      	orrs	r3, r2
 80017da:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017dc:	4313      	orrs	r3, r2
 80017de:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	68da      	ldr	r2, [r3, #12]
 80017e6:	4b21      	ldr	r3, [pc, #132]	@ (800186c <HAL_ADC_Init+0x308>)
 80017e8:	4013      	ands	r3, r2
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	6812      	ldr	r2, [r2, #0]
 80017ee:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80017f0:	430b      	orrs	r3, r1
 80017f2:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d10c      	bne.n	8001816 <HAL_ADC_Init+0x2b2>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f023 010f 	bic.w	r1, r3, #15
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	69db      	ldr	r3, [r3, #28]
 800180a:	1e5a      	subs	r2, r3, #1
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	430a      	orrs	r2, r1
 8001812:	631a      	str	r2, [r3, #48]	@ 0x30
 8001814:	e007      	b.n	8001826 <HAL_ADC_Init+0x2c2>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f022 020f 	bic.w	r2, r2, #15
 8001824:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001830:	f023 0303 	bic.w	r3, r3, #3
 8001834:	f043 0201 	orr.w	r2, r3, #1
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	641a      	str	r2, [r3, #64]	@ 0x40
 800183c:	e00a      	b.n	8001854 <HAL_ADC_Init+0x2f0>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001842:	f023 0312 	bic.w	r3, r3, #18
 8001846:	f043 0210 	orr.w	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800184e:	2301      	movs	r3, #1
 8001850:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001854:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001858:	4618      	mov	r0, r3
 800185a:	3768      	adds	r7, #104	@ 0x68
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000000 	.word	0x20000000
 8001864:	431bde83 	.word	0x431bde83
 8001868:	50000300 	.word	0x50000300
 800186c:	fff0c007 	.word	0xfff0c007

08001870 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	689b      	ldr	r3, [r3, #8]
 8001882:	f003 0304 	and.w	r3, r3, #4
 8001886:	2b00      	cmp	r3, #0
 8001888:	d158      	bne.n	800193c <HAL_ADC_Start+0xcc>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_ADC_Start+0x28>
 8001894:	2302      	movs	r3, #2
 8001896:	e054      	b.n	8001942 <HAL_ADC_Start+0xd2>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018a0:	6878      	ldr	r0, [r7, #4]
 80018a2:	f000 fbd1 	bl	8002048 <ADC_Enable>
 80018a6:	4603      	mov	r3, r0
 80018a8:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d140      	bne.n	8001932 <HAL_ADC_Start+0xc2>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018b8:	f023 0301 	bic.w	r3, r3, #1
 80018bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	641a      	str	r2, [r3, #64]	@ 0x40
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	68db      	ldr	r3, [r3, #12]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d007      	beq.n	80018ee <HAL_ADC_Start+0x7e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e2:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80018e6:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	641a      	str	r2, [r3, #64]	@ 0x40
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80018fa:	d106      	bne.n	800190a <HAL_ADC_Start+0x9a>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001900:	f023 0206 	bic.w	r2, r3, #6
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	645a      	str	r2, [r3, #68]	@ 0x44
 8001908:	e002      	b.n	8001910 <HAL_ADC_Start+0xa0>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2200      	movs	r2, #0
 800190e:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2200      	movs	r2, #0
 8001914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	221c      	movs	r2, #28
 800191e:	601a      	str	r2, [r3, #0]
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	689a      	ldr	r2, [r3, #8]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0204 	orr.w	r2, r2, #4
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	e006      	b.n	8001940 <HAL_ADC_Start+0xd0>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2200      	movs	r2, #0
 8001936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800193a:	e001      	b.n	8001940 <HAL_ADC_Start+0xd0>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800193c:	2302      	movs	r3, #2
 800193e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001940:	7bfb      	ldrb	r3, [r7, #15]
}
 8001942:	4618      	mov	r0, r3
 8001944:	3710      	adds	r7, #16
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
	...

0800194c <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b086      	sub	sp, #24
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
 8001954:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001956:	2300      	movs	r3, #0
 8001958:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	695b      	ldr	r3, [r3, #20]
 800195e:	2b08      	cmp	r3, #8
 8001960:	d102      	bne.n	8001968 <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001962:	2308      	movs	r3, #8
 8001964:	617b      	str	r3, [r7, #20]
 8001966:	e02e      	b.n	80019c6 <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001968:	4b56      	ldr	r3, [pc, #344]	@ (8001ac4 <HAL_ADC_PollForConversion+0x178>)
 800196a:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	689b      	ldr	r3, [r3, #8]
 8001970:	f003 031f 	and.w	r3, r3, #31
 8001974:	2b00      	cmp	r3, #0
 8001976:	d112      	bne.n	800199e <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68db      	ldr	r3, [r3, #12]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	2b01      	cmp	r3, #1
 8001984:	d11d      	bne.n	80019c2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	f043 0220 	orr.w	r2, r3, #32
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e08d      	b.n	8001aba <HAL_ADC_PollForConversion+0x16e>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d00b      	beq.n	80019c2 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f043 0220 	orr.w	r2, r3, #32
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2200      	movs	r2, #0
 80019ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        
        return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e07b      	b.n	8001aba <HAL_ADC_PollForConversion+0x16e>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80019c2:	230c      	movs	r3, #12
 80019c4:	617b      	str	r3, [r7, #20]
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	613b      	str	r3, [r7, #16]
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80019ce:	f7ff fdbd 	bl	800154c <HAL_GetTick>
 80019d2:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80019d4:	e021      	b.n	8001a1a <HAL_ADC_PollForConversion+0xce>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80019d6:	683b      	ldr	r3, [r7, #0]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d01d      	beq.n	8001a1a <HAL_ADC_PollForConversion+0xce>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d007      	beq.n	80019f4 <HAL_ADC_PollForConversion+0xa8>
 80019e4:	f7ff fdb2 	bl	800154c <HAL_GetTick>
 80019e8:	4602      	mov	r2, r0
 80019ea:	68bb      	ldr	r3, [r7, #8]
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d212      	bcs.n	8001a1a <HAL_ADC_PollForConversion+0xce>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	697b      	ldr	r3, [r7, #20]
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d10b      	bne.n	8001a1a <HAL_ADC_PollForConversion+0xce>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	f043 0204 	orr.w	r2, r3, #4
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e04f      	b.n	8001aba <HAL_ADC_PollForConversion+0x16e>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	681a      	ldr	r2, [r3, #0]
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	4013      	ands	r3, r2
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0d6      	beq.n	80019d6 <HAL_ADC_PollForConversion+0x8a>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	641a      	str	r2, [r3, #64]	@ 0x40
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	68db      	ldr	r3, [r3, #12]
 8001a3a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d131      	bne.n	8001aa6 <HAL_ADC_PollForConversion+0x15a>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d12c      	bne.n	8001aa6 <HAL_ADC_PollForConversion+0x15a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0308 	and.w	r3, r3, #8
 8001a56:	2b08      	cmp	r3, #8
 8001a58:	d125      	bne.n	8001aa6 <HAL_ADC_PollForConversion+0x15a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 0304 	and.w	r3, r3, #4
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d112      	bne.n	8001a8e <HAL_ADC_PollForConversion+0x142>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	641a      	str	r2, [r3, #64]	@ 0x40
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d112      	bne.n	8001aa6 <HAL_ADC_PollForConversion+0x15a>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a84:	f043 0201 	orr.w	r2, r3, #1
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a8c:	e00b      	b.n	8001aa6 <HAL_ADC_PollForConversion+0x15a>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	f043 0220 	orr.w	r2, r3, #32
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	f043 0201 	orr.w	r2, r3, #1
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d103      	bne.n	8001ab8 <HAL_ADC_PollForConversion+0x16c>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001ab8:	2300      	movs	r3, #0
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	3718      	adds	r7, #24
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	50000300 	.word	0x50000300

08001ac8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	370c      	adds	r7, #12
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr
	...

08001ae4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b09b      	sub	sp, #108	@ 0x6c
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001aee:	2300      	movs	r3, #0
 8001af0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001af4:	2300      	movs	r3, #0
 8001af6:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_ADC_ConfigChannel+0x22>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e295      	b.n	8002032 <HAL_ADC_ConfigChannel+0x54e>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f040 8279 	bne.w	8002010 <HAL_ADC_ConfigChannel+0x52c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	d81c      	bhi.n	8001b60 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	4413      	add	r3, r2
 8001b36:	005b      	lsls	r3, r3, #1
 8001b38:	461a      	mov	r2, r3
 8001b3a:	231f      	movs	r3, #31
 8001b3c:	4093      	lsls	r3, r2
 8001b3e:	43db      	mvns	r3, r3
 8001b40:	4019      	ands	r1, r3
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	6818      	ldr	r0, [r3, #0]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	4613      	mov	r3, r2
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4413      	add	r3, r2
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fa00 f203 	lsl.w	r2, r0, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	430a      	orrs	r2, r1
 8001b5c:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b5e:	e063      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	2b09      	cmp	r3, #9
 8001b66:	d81e      	bhi.n	8001ba6 <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	4613      	mov	r3, r2
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	4413      	add	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	3b1e      	subs	r3, #30
 8001b7c:	221f      	movs	r2, #31
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43db      	mvns	r3, r3
 8001b84:	4019      	ands	r1, r3
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	6818      	ldr	r0, [r3, #0]
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	4613      	mov	r3, r2
 8001b90:	005b      	lsls	r3, r3, #1
 8001b92:	4413      	add	r3, r2
 8001b94:	005b      	lsls	r3, r3, #1
 8001b96:	3b1e      	subs	r3, #30
 8001b98:	fa00 f203 	lsl.w	r2, r0, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	430a      	orrs	r2, r1
 8001ba2:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ba4:	e040      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b0e      	cmp	r3, #14
 8001bac:	d81e      	bhi.n	8001bec <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	005b      	lsls	r3, r3, #1
 8001bbc:	4413      	add	r3, r2
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	3b3c      	subs	r3, #60	@ 0x3c
 8001bc2:	221f      	movs	r2, #31
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	4019      	ands	r1, r3
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	6818      	ldr	r0, [r3, #0]
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685a      	ldr	r2, [r3, #4]
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	005b      	lsls	r3, r3, #1
 8001bd8:	4413      	add	r3, r2
 8001bda:	005b      	lsls	r3, r3, #1
 8001bdc:	3b3c      	subs	r3, #60	@ 0x3c
 8001bde:	fa00 f203 	lsl.w	r2, r0, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	639a      	str	r2, [r3, #56]	@ 0x38
 8001bea:	e01d      	b.n	8001c28 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685a      	ldr	r2, [r3, #4]
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	005b      	lsls	r3, r3, #1
 8001bfa:	4413      	add	r3, r2
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	3b5a      	subs	r3, #90	@ 0x5a
 8001c00:	221f      	movs	r2, #31
 8001c02:	fa02 f303 	lsl.w	r3, r2, r3
 8001c06:	43db      	mvns	r3, r3
 8001c08:	4019      	ands	r1, r3
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	6818      	ldr	r0, [r3, #0]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685a      	ldr	r2, [r3, #4]
 8001c12:	4613      	mov	r3, r2
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	4413      	add	r3, r2
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	3b5a      	subs	r3, #90	@ 0x5a
 8001c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	f003 030c 	and.w	r3, r3, #12
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f040 80e5 	bne.w	8001e02 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2b09      	cmp	r3, #9
 8001c3e:	d91c      	bls.n	8001c7a <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	6999      	ldr	r1, [r3, #24]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	3b1e      	subs	r3, #30
 8001c52:	2207      	movs	r2, #7
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	4019      	ands	r1, r3
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	6898      	ldr	r0, [r3, #8]
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681a      	ldr	r2, [r3, #0]
 8001c64:	4613      	mov	r3, r2
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	3b1e      	subs	r3, #30
 8001c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	430a      	orrs	r2, r1
 8001c76:	619a      	str	r2, [r3, #24]
 8001c78:	e019      	b.n	8001cae <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6959      	ldr	r1, [r3, #20]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4613      	mov	r3, r2
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	4413      	add	r3, r2
 8001c8a:	2207      	movs	r2, #7
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	4019      	ands	r1, r3
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	6898      	ldr	r0, [r3, #8]
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4613      	mov	r3, r2
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	4413      	add	r3, r2
 8001ca2:	fa00 f203 	lsl.w	r2, r0, r3
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	430a      	orrs	r2, r1
 8001cac:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	695a      	ldr	r2, [r3, #20]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	08db      	lsrs	r3, r3, #3
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	691b      	ldr	r3, [r3, #16]
 8001cca:	3b01      	subs	r3, #1
 8001ccc:	2b03      	cmp	r3, #3
 8001cce:	d84f      	bhi.n	8001d70 <HAL_ADC_ConfigChannel+0x28c>
 8001cd0:	a201      	add	r2, pc, #4	@ (adr r2, 8001cd8 <HAL_ADC_ConfigChannel+0x1f4>)
 8001cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cd6:	bf00      	nop
 8001cd8:	08001ce9 	.word	0x08001ce9
 8001cdc:	08001d0b 	.word	0x08001d0b
 8001ce0:	08001d2d 	.word	0x08001d2d
 8001ce4:	08001d4f 	.word	0x08001d4f
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001cee:	4b97      	ldr	r3, [pc, #604]	@ (8001f4c <HAL_ADC_ConfigChannel+0x468>)
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	6812      	ldr	r2, [r2, #0]
 8001cf6:	0691      	lsls	r1, r2, #26
 8001cf8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001cfa:	430a      	orrs	r2, r1
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001d06:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d08:	e07b      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001d10:	4b8e      	ldr	r3, [pc, #568]	@ (8001f4c <HAL_ADC_ConfigChannel+0x468>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	683a      	ldr	r2, [r7, #0]
 8001d16:	6812      	ldr	r2, [r2, #0]
 8001d18:	0691      	lsls	r1, r2, #26
 8001d1a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	431a      	orrs	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001d28:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d2a:	e06a      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001d32:	4b86      	ldr	r3, [pc, #536]	@ (8001f4c <HAL_ADC_ConfigChannel+0x468>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	683a      	ldr	r2, [r7, #0]
 8001d38:	6812      	ldr	r2, [r2, #0]
 8001d3a:	0691      	lsls	r1, r2, #26
 8001d3c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d3e:	430a      	orrs	r2, r1
 8001d40:	431a      	orrs	r2, r3
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001d4a:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d4c:	e059      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001d54:	4b7d      	ldr	r3, [pc, #500]	@ (8001f4c <HAL_ADC_ConfigChannel+0x468>)
 8001d56:	4013      	ands	r3, r2
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	6812      	ldr	r2, [r2, #0]
 8001d5c:	0691      	lsls	r1, r2, #26
 8001d5e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001d60:	430a      	orrs	r2, r1
 8001d62:	431a      	orrs	r2, r3
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8001d6c:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001d6e:	e048      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001d76:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	069b      	lsls	r3, r3, #26
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d107      	bne.n	8001d94 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001d92:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d9a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	069b      	lsls	r3, r3, #26
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d107      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001db6:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dbe:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	069b      	lsls	r3, r3, #26
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d107      	bne.n	8001ddc <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001dda:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8001de2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8001de6:	683b      	ldr	r3, [r7, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	069b      	lsls	r3, r3, #26
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d107      	bne.n	8001e00 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8001dfe:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8001e00:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689b      	ldr	r3, [r3, #8]
 8001e08:	f003 0303 	and.w	r3, r3, #3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d108      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x33e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d101      	bne.n	8001e22 <HAL_ADC_ConfigChannel+0x33e>
 8001e1e:	2301      	movs	r3, #1
 8001e20:	e000      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x340>
 8001e22:	2300      	movs	r3, #0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f040 80fe 	bne.w	8002026 <HAL_ADC_ConfigChannel+0x542>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	68db      	ldr	r3, [r3, #12]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d00f      	beq.n	8001e52 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2201      	movs	r2, #1
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	43da      	mvns	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	400a      	ands	r2, r1
 8001e4c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8001e50:	e049      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	409a      	lsls	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2b09      	cmp	r3, #9
 8001e72:	d91c      	bls.n	8001eae <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	6999      	ldr	r1, [r3, #24]
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	681a      	ldr	r2, [r3, #0]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	005b      	lsls	r3, r3, #1
 8001e82:	4413      	add	r3, r2
 8001e84:	3b1b      	subs	r3, #27
 8001e86:	2207      	movs	r2, #7
 8001e88:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	4019      	ands	r1, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	6898      	ldr	r0, [r3, #8]
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	681a      	ldr	r2, [r3, #0]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	005b      	lsls	r3, r3, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3b1b      	subs	r3, #27
 8001ea0:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	619a      	str	r2, [r3, #24]
 8001eac:	e01b      	b.n	8001ee6 <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	6959      	ldr	r1, [r3, #20]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	1c5a      	adds	r2, r3, #1
 8001eba:	4613      	mov	r3, r2
 8001ebc:	005b      	lsls	r3, r3, #1
 8001ebe:	4413      	add	r3, r2
 8001ec0:	2207      	movs	r2, #7
 8001ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec6:	43db      	mvns	r3, r3
 8001ec8:	4019      	ands	r1, r3
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	6898      	ldr	r0, [r3, #8]
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	1c5a      	adds	r2, r3, #1
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	005b      	lsls	r3, r3, #1
 8001ed8:	4413      	add	r3, r2
 8001eda:	fa00 f203 	lsl.w	r2, r0, r3
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ee6:	4b1a      	ldr	r3, [pc, #104]	@ (8001f50 <HAL_ADC_ConfigChannel+0x46c>)
 8001ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	2b10      	cmp	r3, #16
 8001ef0:	d105      	bne.n	8001efe <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001ef2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d014      	beq.n	8001f28 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8001f02:	2b11      	cmp	r3, #17
 8001f04:	d105      	bne.n	8001f12 <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f06:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00a      	beq.n	8001f28 <HAL_ADC_ConfigChannel+0x444>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001f16:	2b12      	cmp	r3, #18
 8001f18:	f040 8085 	bne.w	8002026 <HAL_ADC_ConfigChannel+0x542>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001f1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d17e      	bne.n	8002026 <HAL_ADC_ConfigChannel+0x542>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 0303 	and.w	r3, r3, #3
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d10c      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x470>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f003 0301 	and.w	r3, r3, #1
 8001f44:	2b01      	cmp	r3, #1
 8001f46:	d105      	bne.n	8001f54 <HAL_ADC_ConfigChannel+0x470>
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e004      	b.n	8001f56 <HAL_ADC_ConfigChannel+0x472>
 8001f4c:	83fff000 	.word	0x83fff000
 8001f50:	50000300 	.word	0x50000300
 8001f54:	2300      	movs	r3, #0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d150      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x518>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f5a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d010      	beq.n	8001f82 <HAL_ADC_ConfigChannel+0x49e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 0303 	and.w	r3, r3, #3
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d107      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x498>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f003 0301 	and.w	r3, r3, #1
 8001f74:	2b01      	cmp	r3, #1
 8001f76:	d101      	bne.n	8001f7c <HAL_ADC_ConfigChannel+0x498>
 8001f78:	2301      	movs	r3, #1
 8001f7a:	e000      	b.n	8001f7e <HAL_ADC_ConfigChannel+0x49a>
 8001f7c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d13c      	bne.n	8001ffc <HAL_ADC_ConfigChannel+0x518>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b10      	cmp	r3, #16
 8001f88:	d11d      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x4e2>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f92:	d118      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x4e2>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001f94:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f9c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f9e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001fa0:	4b27      	ldr	r3, [pc, #156]	@ (8002040 <HAL_ADC_ConfigChannel+0x55c>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a27      	ldr	r2, [pc, #156]	@ (8002044 <HAL_ADC_ConfigChannel+0x560>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	0c9a      	lsrs	r2, r3, #18
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	005b      	lsls	r3, r3, #1
 8001fb4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fb6:	e002      	b.n	8001fbe <HAL_ADC_ConfigChannel+0x4da>
          {
            wait_loop_index--;
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	3b01      	subs	r3, #1
 8001fbc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d1f9      	bne.n	8001fb8 <HAL_ADC_ConfigChannel+0x4d4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fc4:	e02e      	b.n	8002024 <HAL_ADC_ConfigChannel+0x540>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2b11      	cmp	r3, #17
 8001fcc:	d10b      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x502>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fd6:	d106      	bne.n	8001fe6 <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001fd8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8001fe0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fe2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001fe4:	e01e      	b.n	8002024 <HAL_ADC_ConfigChannel+0x540>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2b12      	cmp	r3, #18
 8001fec:	d11a      	bne.n	8002024 <HAL_ADC_ConfigChannel+0x540>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001fee:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ff6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ff8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001ffa:	e013      	b.n	8002024 <HAL_ADC_ConfigChannel+0x540>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002000:	f043 0220 	orr.w	r2, r3, #32
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002008:	2301      	movs	r3, #1
 800200a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800200e:	e00a      	b.n	8002026 <HAL_ADC_ConfigChannel+0x542>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002014:	f043 0220 	orr.w	r2, r3, #32
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002022:	e000      	b.n	8002026 <HAL_ADC_ConfigChannel+0x542>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002024:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800202e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8002032:	4618      	mov	r0, r3
 8002034:	376c      	adds	r7, #108	@ 0x6c
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	20000000 	.word	0x20000000
 8002044:	431bde83 	.word	0x431bde83

08002048 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f003 0303 	and.w	r3, r3, #3
 800205e:	2b01      	cmp	r3, #1
 8002060:	d108      	bne.n	8002074 <ADC_Enable+0x2c>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0301 	and.w	r3, r3, #1
 800206c:	2b01      	cmp	r3, #1
 800206e:	d101      	bne.n	8002074 <ADC_Enable+0x2c>
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <ADC_Enable+0x2e>
 8002074:	2300      	movs	r3, #0
 8002076:	2b00      	cmp	r3, #0
 8002078:	d143      	bne.n	8002102 <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	4b22      	ldr	r3, [pc, #136]	@ (800210c <ADC_Enable+0xc4>)
 8002082:	4013      	ands	r3, r2
 8002084:	2b00      	cmp	r3, #0
 8002086:	d00d      	beq.n	80020a4 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800208c:	f043 0210 	orr.w	r2, r3, #16
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002098:	f043 0201 	orr.w	r2, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e02f      	b.n	8002104 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f042 0201 	orr.w	r2, r2, #1
 80020b2:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 80020b4:	f7ff fa4a 	bl	800154c <HAL_GetTick>
 80020b8:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020ba:	e01b      	b.n	80020f4 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80020bc:	f7ff fa46 	bl	800154c <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d914      	bls.n	80020f4 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0301 	and.w	r3, r3, #1
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d00d      	beq.n	80020f4 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	f043 0210 	orr.w	r2, r3, #16
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e8:	f043 0201 	orr.w	r2, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	e007      	b.n	8002104 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d1dc      	bne.n	80020bc <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	8000003f 	.word	0x8000003f

08002110 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b084      	sub	sp, #16
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002118:	2300      	movs	r3, #0
 800211a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	f003 0303 	and.w	r3, r3, #3
 8002126:	2b01      	cmp	r3, #1
 8002128:	d108      	bne.n	800213c <ADC_Disable+0x2c>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b01      	cmp	r3, #1
 8002136:	d101      	bne.n	800213c <ADC_Disable+0x2c>
 8002138:	2301      	movs	r3, #1
 800213a:	e000      	b.n	800213e <ADC_Disable+0x2e>
 800213c:	2300      	movs	r3, #0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d047      	beq.n	80021d2 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	f003 030d 	and.w	r3, r3, #13
 800214c:	2b01      	cmp	r3, #1
 800214e:	d10f      	bne.n	8002170 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	689a      	ldr	r2, [r3, #8]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0202 	orr.w	r2, r2, #2
 800215e:	609a      	str	r2, [r3, #8]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2203      	movs	r2, #3
 8002166:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002168:	f7ff f9f0 	bl	800154c <HAL_GetTick>
 800216c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800216e:	e029      	b.n	80021c4 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002174:	f043 0210 	orr.w	r2, r3, #16
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002180:	f043 0201 	orr.w	r2, r3, #1
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e023      	b.n	80021d4 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800218c:	f7ff f9de 	bl	800154c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d914      	bls.n	80021c4 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	f003 0301 	and.w	r3, r3, #1
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	d10d      	bne.n	80021c4 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ac:	f043 0210 	orr.w	r2, r3, #16
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021b8:	f043 0201 	orr.w	r2, r3, #1
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e007      	b.n	80021d4 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d0dc      	beq.n	800218c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}

080021dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021dc:	b480      	push	{r7}
 80021de:	b085      	sub	sp, #20
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f003 0307 	and.w	r3, r3, #7
 80021ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002220 <__NVIC_SetPriorityGrouping+0x44>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021f8:	4013      	ands	r3, r2
 80021fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002204:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002208:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800220c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800220e:	4a04      	ldr	r2, [pc, #16]	@ (8002220 <__NVIC_SetPriorityGrouping+0x44>)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	60d3      	str	r3, [r2, #12]
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221e:	4770      	bx	lr
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002228:	4b04      	ldr	r3, [pc, #16]	@ (800223c <__NVIC_GetPriorityGrouping+0x18>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	0a1b      	lsrs	r3, r3, #8
 800222e:	f003 0307 	and.w	r3, r3, #7
}
 8002232:	4618      	mov	r0, r3
 8002234:	46bd      	mov	sp, r7
 8002236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223a:	4770      	bx	lr
 800223c:	e000ed00 	.word	0xe000ed00

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	@ (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	@ (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	@ 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	@ 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800230c:	d301      	bcc.n	8002312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002312:	4a0a      	ldr	r2, [pc, #40]	@ (800233c <SysTick_Config+0x40>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231a:	210f      	movs	r1, #15
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f7ff ff8e 	bl	8002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	@ (800233c <SysTick_Config+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	@ (800233c <SysTick_Config+0x40>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff47 	bl	80021dc <__NVIC_SetPriorityGrouping>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002368:	f7ff ff5c 	bl	8002224 <__NVIC_GetPriorityGrouping>
 800236c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7ff ff8e 	bl	8002294 <NVIC_EncodePriority>
 8002378:	4602      	mov	r2, r0
 800237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff5d 	bl	8002240 <__NVIC_SetPriority>
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ffb0 	bl	80022fc <SysTick_Config>
 800239c:	4603      	mov	r3, r0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3708      	adds	r7, #8
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e014      	b.n	80023e2 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if(hdac->State == HAL_DAC_STATE_RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	791b      	ldrb	r3, [r3, #4]
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d105      	bne.n	80023ce <HAL_DAC_Init+0x28>
    hdac->MspDeInitCallback             = HAL_DAC_MspDeInit;
  }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	f7fe feb3 	bl	8001134 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2202      	movs	r2, #2
 80023d2:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2201      	movs	r2, #1
 80023de:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80023e0:	2300      	movs	r3, #0
}
 80023e2:	4618      	mov	r0, r3
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}

080023ea <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80023ea:	b480      	push	{r7}
 80023ec:	b087      	sub	sp, #28
 80023ee:	af00      	add	r7, sp, #0
 80023f0:	60f8      	str	r0, [r7, #12]
 80023f2:	60b9      	str	r1, [r7, #8]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d104      	bne.n	8002412 <HAL_DAC_SetValue+0x28>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	3308      	adds	r3, #8
 8002410:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002412:	697b      	ldr	r3, [r7, #20]
 8002414:	461a      	mov	r2, r3
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	371c      	adds	r7, #28
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 selected
  * @retval HAL status 
  */

HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	795b      	ldrb	r3, [r3, #5]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d101      	bne.n	800243e <HAL_DAC_Start+0x16>
 800243a:	2302      	movs	r3, #2
 800243c:	e025      	b.n	800248a <HAL_DAC_Start+0x62>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2201      	movs	r2, #1
 8002442:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2202      	movs	r2, #2
 8002448:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	6819      	ldr	r1, [r3, #0]
 8002450:	2201      	movs	r2, #1
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	409a      	lsls	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	601a      	str	r2, [r3, #0]
  
  /* Check if software trigger enabled */
  if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8002468:	2b3c      	cmp	r3, #60	@ 0x3c
 800246a:	d107      	bne.n	800247c <HAL_DAC_Start+0x54>
  {
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	605a      	str	r2, [r3, #4]
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2201      	movs	r2, #1
 8002480:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8002488:	2300      	movs	r3, #0
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr

08002496 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8002496:	b480      	push	{r7}
 8002498:	b087      	sub	sp, #28
 800249a:	af00      	add	r7, sp, #0
 800249c:	60f8      	str	r0, [r7, #12]
 800249e:	60b9      	str	r1, [r7, #8]
 80024a0:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	2300      	movs	r3, #0
 80024a8:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	795b      	ldrb	r3, [r3, #5]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_DAC_ConfigChannel+0x20>
 80024b2:	2302      	movs	r3, #2
 80024b4:	e036      	b.n	8002524 <HAL_DAC_ConfigChannel+0x8e>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2201      	movs	r2, #1
 80024ba:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	2202      	movs	r2, #2
 80024c0:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	617b      	str	r3, [r7, #20]
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
  }    
#else
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80024ca:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	697a      	ldr	r2, [r7, #20]
 80024d8:	4013      	ands	r3, r2
 80024da:	617b      	str	r3, [r7, #20]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	613b      	str	r3, [r7, #16]
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80024e8:	693a      	ldr	r2, [r7, #16]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	fa02 f303 	lsl.w	r3, r2, r3
 80024f0:	697a      	ldr	r2, [r7, #20]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	697a      	ldr	r2, [r7, #20]
 80024fc:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6819      	ldr	r1, [r3, #0]
 8002504:	22c0      	movs	r2, #192	@ 0xc0
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	43da      	mvns	r2, r3
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	400a      	ands	r2, r1
 8002514:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	2200      	movs	r2, #0
 8002520:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8002522:	2300      	movs	r3, #0
}
 8002524:	4618      	mov	r0, r3
 8002526:	371c      	adds	r7, #28
 8002528:	46bd      	mov	sp, r7
 800252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252e:	4770      	bx	lr

08002530 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002530:	b480      	push	{r7}
 8002532:	b087      	sub	sp, #28
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800253a:	2300      	movs	r3, #0
 800253c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800253e:	e14e      	b.n	80027de <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	2101      	movs	r1, #1
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	fa01 f303 	lsl.w	r3, r1, r3
 800254c:	4013      	ands	r3, r2
 800254e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	2b00      	cmp	r3, #0
 8002554:	f000 8140 	beq.w	80027d8 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f003 0303 	and.w	r3, r3, #3
 8002560:	2b01      	cmp	r3, #1
 8002562:	d005      	beq.n	8002570 <HAL_GPIO_Init+0x40>
 8002564:	683b      	ldr	r3, [r7, #0]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 0303 	and.w	r3, r3, #3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d130      	bne.n	80025d2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002576:	697b      	ldr	r3, [r7, #20]
 8002578:	005b      	lsls	r3, r3, #1
 800257a:	2203      	movs	r2, #3
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	43db      	mvns	r3, r3
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	4013      	ands	r3, r2
 8002586:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	68da      	ldr	r2, [r3, #12]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	005b      	lsls	r3, r3, #1
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	693a      	ldr	r2, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	693a      	ldr	r2, [r7, #16]
 800259e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a6:	2201      	movs	r2, #1
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	fa02 f303 	lsl.w	r3, r2, r3
 80025ae:	43db      	mvns	r3, r3
 80025b0:	693a      	ldr	r2, [r7, #16]
 80025b2:	4013      	ands	r3, r2
 80025b4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	f003 0201 	and.w	r2, r3, #1
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	fa02 f303 	lsl.w	r3, r2, r3
 80025c6:	693a      	ldr	r2, [r7, #16]
 80025c8:	4313      	orrs	r3, r2
 80025ca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	693a      	ldr	r2, [r7, #16]
 80025d0:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	f003 0303 	and.w	r3, r3, #3
 80025da:	2b03      	cmp	r3, #3
 80025dc:	d017      	beq.n	800260e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	005b      	lsls	r3, r3, #1
 80025e8:	2203      	movs	r2, #3
 80025ea:	fa02 f303 	lsl.w	r3, r2, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	693a      	ldr	r2, [r7, #16]
 80025f2:	4013      	ands	r3, r2
 80025f4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	689a      	ldr	r2, [r3, #8]
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	005b      	lsls	r3, r3, #1
 80025fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002602:	693a      	ldr	r2, [r7, #16]
 8002604:	4313      	orrs	r3, r2
 8002606:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	693a      	ldr	r2, [r7, #16]
 800260c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d123      	bne.n	8002662 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	08da      	lsrs	r2, r3, #3
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	3208      	adds	r2, #8
 8002622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002626:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	f003 0307 	and.w	r3, r3, #7
 800262e:	009b      	lsls	r3, r3, #2
 8002630:	220f      	movs	r2, #15
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	43db      	mvns	r3, r3
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	4013      	ands	r3, r2
 800263c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	691a      	ldr	r2, [r3, #16]
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	fa02 f303 	lsl.w	r3, r2, r3
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	4313      	orrs	r3, r2
 8002652:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	08da      	lsrs	r2, r3, #3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	3208      	adds	r2, #8
 800265c:	6939      	ldr	r1, [r7, #16]
 800265e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002668:	697b      	ldr	r3, [r7, #20]
 800266a:	005b      	lsls	r3, r3, #1
 800266c:	2203      	movs	r2, #3
 800266e:	fa02 f303 	lsl.w	r3, r2, r3
 8002672:	43db      	mvns	r3, r3
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	4013      	ands	r3, r2
 8002678:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f003 0203 	and.w	r2, r3, #3
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	fa02 f303 	lsl.w	r3, r2, r3
 800268a:	693a      	ldr	r2, [r7, #16]
 800268c:	4313      	orrs	r3, r2
 800268e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	693a      	ldr	r2, [r7, #16]
 8002694:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 809a 	beq.w	80027d8 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026a4:	4b55      	ldr	r3, [pc, #340]	@ (80027fc <HAL_GPIO_Init+0x2cc>)
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	4a54      	ldr	r2, [pc, #336]	@ (80027fc <HAL_GPIO_Init+0x2cc>)
 80026aa:	f043 0301 	orr.w	r3, r3, #1
 80026ae:	6193      	str	r3, [r2, #24]
 80026b0:	4b52      	ldr	r3, [pc, #328]	@ (80027fc <HAL_GPIO_Init+0x2cc>)
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	60bb      	str	r3, [r7, #8]
 80026ba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80026bc:	4a50      	ldr	r2, [pc, #320]	@ (8002800 <HAL_GPIO_Init+0x2d0>)
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	089b      	lsrs	r3, r3, #2
 80026c2:	3302      	adds	r3, #2
 80026c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	220f      	movs	r2, #15
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	693a      	ldr	r2, [r7, #16]
 80026dc:	4013      	ands	r3, r2
 80026de:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80026e6:	d013      	beq.n	8002710 <HAL_GPIO_Init+0x1e0>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	4a46      	ldr	r2, [pc, #280]	@ (8002804 <HAL_GPIO_Init+0x2d4>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d00d      	beq.n	800270c <HAL_GPIO_Init+0x1dc>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a45      	ldr	r2, [pc, #276]	@ (8002808 <HAL_GPIO_Init+0x2d8>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d007      	beq.n	8002708 <HAL_GPIO_Init+0x1d8>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	4a44      	ldr	r2, [pc, #272]	@ (800280c <HAL_GPIO_Init+0x2dc>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d101      	bne.n	8002704 <HAL_GPIO_Init+0x1d4>
 8002700:	2303      	movs	r3, #3
 8002702:	e006      	b.n	8002712 <HAL_GPIO_Init+0x1e2>
 8002704:	2305      	movs	r3, #5
 8002706:	e004      	b.n	8002712 <HAL_GPIO_Init+0x1e2>
 8002708:	2302      	movs	r3, #2
 800270a:	e002      	b.n	8002712 <HAL_GPIO_Init+0x1e2>
 800270c:	2301      	movs	r3, #1
 800270e:	e000      	b.n	8002712 <HAL_GPIO_Init+0x1e2>
 8002710:	2300      	movs	r3, #0
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	f002 0203 	and.w	r2, r2, #3
 8002718:	0092      	lsls	r2, r2, #2
 800271a:	4093      	lsls	r3, r2
 800271c:	693a      	ldr	r2, [r7, #16]
 800271e:	4313      	orrs	r3, r2
 8002720:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002722:	4937      	ldr	r1, [pc, #220]	@ (8002800 <HAL_GPIO_Init+0x2d0>)
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	089b      	lsrs	r3, r3, #2
 8002728:	3302      	adds	r3, #2
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002730:	4b37      	ldr	r3, [pc, #220]	@ (8002810 <HAL_GPIO_Init+0x2e0>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	43db      	mvns	r3, r3
 800273a:	693a      	ldr	r2, [r7, #16]
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d003      	beq.n	8002754 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800274c:	693a      	ldr	r2, [r7, #16]
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002754:	4a2e      	ldr	r2, [pc, #184]	@ (8002810 <HAL_GPIO_Init+0x2e0>)
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800275a:	4b2d      	ldr	r3, [pc, #180]	@ (8002810 <HAL_GPIO_Init+0x2e0>)
 800275c:	68db      	ldr	r3, [r3, #12]
 800275e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	43db      	mvns	r3, r3
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4013      	ands	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002772:	2b00      	cmp	r3, #0
 8002774:	d003      	beq.n	800277e <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 8002776:	693a      	ldr	r2, [r7, #16]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4313      	orrs	r3, r2
 800277c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800277e:	4a24      	ldr	r2, [pc, #144]	@ (8002810 <HAL_GPIO_Init+0x2e0>)
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002784:	4b22      	ldr	r3, [pc, #136]	@ (8002810 <HAL_GPIO_Init+0x2e0>)
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	43db      	mvns	r3, r3
 800278e:	693a      	ldr	r2, [r7, #16]
 8002790:	4013      	ands	r3, r2
 8002792:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800279c:	2b00      	cmp	r3, #0
 800279e:	d003      	beq.n	80027a8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80027a0:	693a      	ldr	r2, [r7, #16]
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80027a8:	4a19      	ldr	r2, [pc, #100]	@ (8002810 <HAL_GPIO_Init+0x2e0>)
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027ae:	4b18      	ldr	r3, [pc, #96]	@ (8002810 <HAL_GPIO_Init+0x2e0>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	43db      	mvns	r3, r3
 80027b8:	693a      	ldr	r2, [r7, #16]
 80027ba:	4013      	ands	r3, r2
 80027bc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d003      	beq.n	80027d2 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 80027ca:	693a      	ldr	r2, [r7, #16]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4313      	orrs	r3, r2
 80027d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80027d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002810 <HAL_GPIO_Init+0x2e0>)
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	3301      	adds	r3, #1
 80027dc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	fa22 f303 	lsr.w	r3, r2, r3
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f47f aea9 	bne.w	8002540 <HAL_GPIO_Init+0x10>
  }
}
 80027ee:	bf00      	nop
 80027f0:	bf00      	nop
 80027f2:	371c      	adds	r7, #28
 80027f4:	46bd      	mov	sp, r7
 80027f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fa:	4770      	bx	lr
 80027fc:	40021000 	.word	0x40021000
 8002800:	40010000 	.word	0x40010000
 8002804:	48000400 	.word	0x48000400
 8002808:	48000800 	.word	0x48000800
 800280c:	48000c00 	.word	0x48000c00
 8002810:	40010400 	.word	0x40010400

08002814 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	f5ad 7d00 	sub.w	sp, sp, #512	@ 0x200
 800281a:	af00      	add	r7, sp, #0
 800281c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002820:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002824:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002826:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800282a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d102      	bne.n	800283a <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002834:	2301      	movs	r3, #1
 8002836:	f001 b823 	b.w	8003880 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800283a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800283e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	f000 817d 	beq.w	8002b4a <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002850:	4bbc      	ldr	r3, [pc, #752]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	f003 030c 	and.w	r3, r3, #12
 8002858:	2b04      	cmp	r3, #4
 800285a:	d00c      	beq.n	8002876 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800285c:	4bb9      	ldr	r3, [pc, #740]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f003 030c 	and.w	r3, r3, #12
 8002864:	2b08      	cmp	r3, #8
 8002866:	d15c      	bne.n	8002922 <HAL_RCC_OscConfig+0x10e>
 8002868:	4bb6      	ldr	r3, [pc, #728]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002874:	d155      	bne.n	8002922 <HAL_RCC_OscConfig+0x10e>
 8002876:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800287a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800287e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
 8002882:	fa93 f3a3 	rbit	r3, r3
 8002886:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800288a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288e:	fab3 f383 	clz	r3, r3
 8002892:	b2db      	uxtb	r3, r3
 8002894:	095b      	lsrs	r3, r3, #5
 8002896:	b2db      	uxtb	r3, r3
 8002898:	f043 0301 	orr.w	r3, r3, #1
 800289c:	b2db      	uxtb	r3, r3
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d102      	bne.n	80028a8 <HAL_RCC_OscConfig+0x94>
 80028a2:	4ba8      	ldr	r3, [pc, #672]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	e015      	b.n	80028d4 <HAL_RCC_OscConfig+0xc0>
 80028a8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028ac:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	@ 0x1e8
 80028b4:	fa93 f3a3 	rbit	r3, r3
 80028b8:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 80028bc:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80028c0:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 80028c4:	f8d7 31e0 	ldr.w	r3, [r7, #480]	@ 0x1e0
 80028c8:	fa93 f3a3 	rbit	r3, r3
 80028cc:	f8c7 31dc 	str.w	r3, [r7, #476]	@ 0x1dc
 80028d0:	4b9c      	ldr	r3, [pc, #624]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 80028d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028d4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80028d8:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
 80028dc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 80028e0:	fa92 f2a2 	rbit	r2, r2
 80028e4:	f8c7 21d4 	str.w	r2, [r7, #468]	@ 0x1d4
  return result;
 80028e8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	@ 0x1d4
 80028ec:	fab2 f282 	clz	r2, r2
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	f042 0220 	orr.w	r2, r2, #32
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	f002 021f 	and.w	r2, r2, #31
 80028fc:	2101      	movs	r1, #1
 80028fe:	fa01 f202 	lsl.w	r2, r1, r2
 8002902:	4013      	ands	r3, r2
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 811f 	beq.w	8002b48 <HAL_RCC_OscConfig+0x334>
 800290a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800290e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	f040 8116 	bne.w	8002b48 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	f000 bfaf 	b.w	8003880 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002922:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002926:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002932:	d106      	bne.n	8002942 <HAL_RCC_OscConfig+0x12e>
 8002934:	4b83      	ldr	r3, [pc, #524]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a82      	ldr	r2, [pc, #520]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 800293a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800293e:	6013      	str	r3, [r2, #0]
 8002940:	e036      	b.n	80029b0 <HAL_RCC_OscConfig+0x19c>
 8002942:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002946:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d10c      	bne.n	800296c <HAL_RCC_OscConfig+0x158>
 8002952:	4b7c      	ldr	r3, [pc, #496]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a7b      	ldr	r2, [pc, #492]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 8002958:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800295c:	6013      	str	r3, [r2, #0]
 800295e:	4b79      	ldr	r3, [pc, #484]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	4a78      	ldr	r2, [pc, #480]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 8002964:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002968:	6013      	str	r3, [r2, #0]
 800296a:	e021      	b.n	80029b0 <HAL_RCC_OscConfig+0x19c>
 800296c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002970:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800297c:	d10c      	bne.n	8002998 <HAL_RCC_OscConfig+0x184>
 800297e:	4b71      	ldr	r3, [pc, #452]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a70      	ldr	r2, [pc, #448]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 8002984:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002988:	6013      	str	r3, [r2, #0]
 800298a:	4b6e      	ldr	r3, [pc, #440]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a6d      	ldr	r2, [pc, #436]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 8002990:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002994:	6013      	str	r3, [r2, #0]
 8002996:	e00b      	b.n	80029b0 <HAL_RCC_OscConfig+0x19c>
 8002998:	4b6a      	ldr	r3, [pc, #424]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a69      	ldr	r2, [pc, #420]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 800299e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029a2:	6013      	str	r3, [r2, #0]
 80029a4:	4b67      	ldr	r3, [pc, #412]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4a66      	ldr	r2, [pc, #408]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 80029aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80029ae:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80029b0:	4b64      	ldr	r3, [pc, #400]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 80029b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b4:	f023 020f 	bic.w	r2, r3, #15
 80029b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029bc:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	495f      	ldr	r1, [pc, #380]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 80029c6:	4313      	orrs	r3, r2
 80029c8:	62cb      	str	r3, [r1, #44]	@ 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80029ca:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80029ce:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d059      	beq.n	8002a8e <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029da:	f7fe fdb7 	bl	800154c <HAL_GetTick>
 80029de:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80029e4:	f7fe fdb2 	bl	800154c <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80029ee:	1ad3      	subs	r3, r2, r3
 80029f0:	2b64      	cmp	r3, #100	@ 0x64
 80029f2:	d902      	bls.n	80029fa <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 80029f4:	2303      	movs	r3, #3
 80029f6:	f000 bf43 	b.w	8003880 <HAL_RCC_OscConfig+0x106c>
 80029fa:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80029fe:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a02:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
  return result;
 8002a0e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a12:	fab3 f383 	clz	r3, r3
 8002a16:	b2db      	uxtb	r3, r3
 8002a18:	095b      	lsrs	r3, r3, #5
 8002a1a:	b2db      	uxtb	r3, r3
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b01      	cmp	r3, #1
 8002a24:	d102      	bne.n	8002a2c <HAL_RCC_OscConfig+0x218>
 8002a26:	4b47      	ldr	r3, [pc, #284]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	e015      	b.n	8002a58 <HAL_RCC_OscConfig+0x244>
 8002a2c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a30:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a34:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8002a38:	fa93 f3a3 	rbit	r3, r3
 8002a3c:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8002a40:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002a44:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8002a48:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8002a4c:	fa93 f3a3 	rbit	r3, r3
 8002a50:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8002a54:	4b3b      	ldr	r3, [pc, #236]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 8002a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a58:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a5c:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
 8002a60:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 8002a64:	fa92 f2a2 	rbit	r2, r2
 8002a68:	f8c7 21b4 	str.w	r2, [r7, #436]	@ 0x1b4
  return result;
 8002a6c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	@ 0x1b4
 8002a70:	fab2 f282 	clz	r2, r2
 8002a74:	b2d2      	uxtb	r2, r2
 8002a76:	f042 0220 	orr.w	r2, r2, #32
 8002a7a:	b2d2      	uxtb	r2, r2
 8002a7c:	f002 021f 	and.w	r2, r2, #31
 8002a80:	2101      	movs	r1, #1
 8002a82:	fa01 f202 	lsl.w	r2, r1, r2
 8002a86:	4013      	ands	r3, r2
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d0ab      	beq.n	80029e4 <HAL_RCC_OscConfig+0x1d0>
 8002a8c:	e05d      	b.n	8002b4a <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a8e:	f7fe fd5d 	bl	800154c <HAL_GetTick>
 8002a92:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a96:	e00a      	b.n	8002aae <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a98:	f7fe fd58 	bl	800154c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b64      	cmp	r3, #100	@ 0x64
 8002aa6:	d902      	bls.n	8002aae <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	f000 bee9 	b.w	8003880 <HAL_RCC_OscConfig+0x106c>
 8002aae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ab2:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ab6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8002aba:	fa93 f3a3 	rbit	r3, r3
 8002abe:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
  return result;
 8002ac2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac6:	fab3 f383 	clz	r3, r3
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	095b      	lsrs	r3, r3, #5
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d102      	bne.n	8002ae0 <HAL_RCC_OscConfig+0x2cc>
 8002ada:	4b1a      	ldr	r3, [pc, #104]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	e015      	b.n	8002b0c <HAL_RCC_OscConfig+0x2f8>
 8002ae0:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ae4:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ae8:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8002aec:	fa93 f3a3 	rbit	r3, r3
 8002af0:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002af4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002af8:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8002afc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	@ 0x1a0
 8002b00:	fa93 f3a3 	rbit	r3, r3
 8002b04:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
 8002b08:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <HAL_RCC_OscConfig+0x330>)
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b0c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002b10:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
 8002b14:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8002b18:	fa92 f2a2 	rbit	r2, r2
 8002b1c:	f8c7 2194 	str.w	r2, [r7, #404]	@ 0x194
  return result;
 8002b20:	f8d7 2194 	ldr.w	r2, [r7, #404]	@ 0x194
 8002b24:	fab2 f282 	clz	r2, r2
 8002b28:	b2d2      	uxtb	r2, r2
 8002b2a:	f042 0220 	orr.w	r2, r2, #32
 8002b2e:	b2d2      	uxtb	r2, r2
 8002b30:	f002 021f 	and.w	r2, r2, #31
 8002b34:	2101      	movs	r1, #1
 8002b36:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d1ab      	bne.n	8002a98 <HAL_RCC_OscConfig+0x284>
 8002b40:	e003      	b.n	8002b4a <HAL_RCC_OscConfig+0x336>
 8002b42:	bf00      	nop
 8002b44:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b4a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002b4e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	f000 817d 	beq.w	8002e5a <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002b60:	4ba6      	ldr	r3, [pc, #664]	@ (8002dfc <HAL_RCC_OscConfig+0x5e8>)
 8002b62:	685b      	ldr	r3, [r3, #4]
 8002b64:	f003 030c 	and.w	r3, r3, #12
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d00b      	beq.n	8002b84 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002b6c:	4ba3      	ldr	r3, [pc, #652]	@ (8002dfc <HAL_RCC_OscConfig+0x5e8>)
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	f003 030c 	and.w	r3, r3, #12
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d172      	bne.n	8002c5e <HAL_RCC_OscConfig+0x44a>
 8002b78:	4ba0      	ldr	r3, [pc, #640]	@ (8002dfc <HAL_RCC_OscConfig+0x5e8>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d16c      	bne.n	8002c5e <HAL_RCC_OscConfig+0x44a>
 8002b84:	2302      	movs	r3, #2
 8002b86:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b8a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8002b8e:	fa93 f3a3 	rbit	r3, r3
 8002b92:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
  return result;
 8002b96:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b9a:	fab3 f383 	clz	r3, r3
 8002b9e:	b2db      	uxtb	r3, r3
 8002ba0:	095b      	lsrs	r3, r3, #5
 8002ba2:	b2db      	uxtb	r3, r3
 8002ba4:	f043 0301 	orr.w	r3, r3, #1
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	d102      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x3a0>
 8002bae:	4b93      	ldr	r3, [pc, #588]	@ (8002dfc <HAL_RCC_OscConfig+0x5e8>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	e013      	b.n	8002bdc <HAL_RCC_OscConfig+0x3c8>
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bba:	f8d7 3188 	ldr.w	r3, [r7, #392]	@ 0x188
 8002bbe:	fa93 f3a3 	rbit	r3, r3
 8002bc2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002bcc:	f8d7 3180 	ldr.w	r3, [r7, #384]	@ 0x180
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	f8c7 317c 	str.w	r3, [r7, #380]	@ 0x17c
 8002bd8:	4b88      	ldr	r3, [pc, #544]	@ (8002dfc <HAL_RCC_OscConfig+0x5e8>)
 8002bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bdc:	2202      	movs	r2, #2
 8002bde:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
 8002be2:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8002be6:	fa92 f2a2 	rbit	r2, r2
 8002bea:	f8c7 2174 	str.w	r2, [r7, #372]	@ 0x174
  return result;
 8002bee:	f8d7 2174 	ldr.w	r2, [r7, #372]	@ 0x174
 8002bf2:	fab2 f282 	clz	r2, r2
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	f042 0220 	orr.w	r2, r2, #32
 8002bfc:	b2d2      	uxtb	r2, r2
 8002bfe:	f002 021f 	and.w	r2, r2, #31
 8002c02:	2101      	movs	r1, #1
 8002c04:	fa01 f202 	lsl.w	r2, r1, r2
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d00a      	beq.n	8002c24 <HAL_RCC_OscConfig+0x410>
 8002c0e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c12:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b01      	cmp	r3, #1
 8002c1c:	d002      	beq.n	8002c24 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	f000 be2e 	b.w	8003880 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c24:	4b75      	ldr	r3, [pc, #468]	@ (8002dfc <HAL_RCC_OscConfig+0x5e8>)
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c2c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c30:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	21f8      	movs	r1, #248	@ 0xf8
 8002c3a:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c3e:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8002c42:	fa91 f1a1 	rbit	r1, r1
 8002c46:	f8c7 116c 	str.w	r1, [r7, #364]	@ 0x16c
  return result;
 8002c4a:	f8d7 116c 	ldr.w	r1, [r7, #364]	@ 0x16c
 8002c4e:	fab1 f181 	clz	r1, r1
 8002c52:	b2c9      	uxtb	r1, r1
 8002c54:	408b      	lsls	r3, r1
 8002c56:	4969      	ldr	r1, [pc, #420]	@ (8002dfc <HAL_RCC_OscConfig+0x5e8>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c5c:	e0fd      	b.n	8002e5a <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002c5e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002c62:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 8088 	beq.w	8002d80 <HAL_RCC_OscConfig+0x56c>
 8002c70:	2301      	movs	r3, #1
 8002c72:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c76:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
 8002c7a:	fa93 f3a3 	rbit	r3, r3
 8002c7e:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
  return result;
 8002c82:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c86:	fab3 f383 	clz	r3, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002c90:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	461a      	mov	r2, r3
 8002c98:	2301      	movs	r3, #1
 8002c9a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c9c:	f7fe fc56 	bl	800154c <HAL_GetTick>
 8002ca0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca4:	e00a      	b.n	8002cbc <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ca6:	f7fe fc51 	bl	800154c <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d902      	bls.n	8002cbc <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	f000 bde2 	b.w	8003880 <HAL_RCC_OscConfig+0x106c>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cc2:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
 8002cc6:	fa93 f3a3 	rbit	r3, r3
 8002cca:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
  return result;
 8002cce:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd2:	fab3 f383 	clz	r3, r3
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	095b      	lsrs	r3, r3, #5
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	f043 0301 	orr.w	r3, r3, #1
 8002ce0:	b2db      	uxtb	r3, r3
 8002ce2:	2b01      	cmp	r3, #1
 8002ce4:	d102      	bne.n	8002cec <HAL_RCC_OscConfig+0x4d8>
 8002ce6:	4b45      	ldr	r3, [pc, #276]	@ (8002dfc <HAL_RCC_OscConfig+0x5e8>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	e013      	b.n	8002d14 <HAL_RCC_OscConfig+0x500>
 8002cec:	2302      	movs	r3, #2
 8002cee:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cf2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8002cf6:	fa93 f3a3 	rbit	r3, r3
 8002cfa:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8002cfe:	2302      	movs	r3, #2
 8002d00:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8002d04:	f8d7 3150 	ldr.w	r3, [r7, #336]	@ 0x150
 8002d08:	fa93 f3a3 	rbit	r3, r3
 8002d0c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8002d10:	4b3a      	ldr	r3, [pc, #232]	@ (8002dfc <HAL_RCC_OscConfig+0x5e8>)
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	2202      	movs	r2, #2
 8002d16:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
 8002d1a:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8002d1e:	fa92 f2a2 	rbit	r2, r2
 8002d22:	f8c7 2144 	str.w	r2, [r7, #324]	@ 0x144
  return result;
 8002d26:	f8d7 2144 	ldr.w	r2, [r7, #324]	@ 0x144
 8002d2a:	fab2 f282 	clz	r2, r2
 8002d2e:	b2d2      	uxtb	r2, r2
 8002d30:	f042 0220 	orr.w	r2, r2, #32
 8002d34:	b2d2      	uxtb	r2, r2
 8002d36:	f002 021f 	and.w	r2, r2, #31
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002d40:	4013      	ands	r3, r2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d0af      	beq.n	8002ca6 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d46:	4b2d      	ldr	r3, [pc, #180]	@ (8002dfc <HAL_RCC_OscConfig+0x5e8>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d4e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002d52:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	21f8      	movs	r1, #248	@ 0xf8
 8002d5c:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 8002d64:	fa91 f1a1 	rbit	r1, r1
 8002d68:	f8c7 113c 	str.w	r1, [r7, #316]	@ 0x13c
  return result;
 8002d6c:	f8d7 113c 	ldr.w	r1, [r7, #316]	@ 0x13c
 8002d70:	fab1 f181 	clz	r1, r1
 8002d74:	b2c9      	uxtb	r1, r1
 8002d76:	408b      	lsls	r3, r1
 8002d78:	4920      	ldr	r1, [pc, #128]	@ (8002dfc <HAL_RCC_OscConfig+0x5e8>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	600b      	str	r3, [r1, #0]
 8002d7e:	e06c      	b.n	8002e5a <HAL_RCC_OscConfig+0x646>
 8002d80:	2301      	movs	r3, #1
 8002d82:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d86:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8002d8a:	fa93 f3a3 	rbit	r3, r3
 8002d8e:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  return result;
 8002d92:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002da0:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	461a      	mov	r2, r3
 8002da8:	2300      	movs	r3, #0
 8002daa:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dac:	f7fe fbce 	bl	800154c <HAL_GetTick>
 8002db0:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002db4:	e00a      	b.n	8002dcc <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002db6:	f7fe fbc9 	bl	800154c <HAL_GetTick>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	d902      	bls.n	8002dcc <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002dc6:	2303      	movs	r3, #3
 8002dc8:	f000 bd5a 	b.w	8003880 <HAL_RCC_OscConfig+0x106c>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002dd6:	fa93 f3a3 	rbit	r3, r3
 8002dda:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
  return result;
 8002dde:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002de2:	fab3 f383 	clz	r3, r3
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d104      	bne.n	8002e00 <HAL_RCC_OscConfig+0x5ec>
 8002df6:	4b01      	ldr	r3, [pc, #4]	@ (8002dfc <HAL_RCC_OscConfig+0x5e8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	e015      	b.n	8002e28 <HAL_RCC_OscConfig+0x614>
 8002dfc:	40021000 	.word	0x40021000
 8002e00:	2302      	movs	r3, #2
 8002e02:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e06:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002e0a:	fa93 f3a3 	rbit	r3, r3
 8002e0e:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8002e12:	2302      	movs	r3, #2
 8002e14:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8002e18:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002e1c:	fa93 f3a3 	rbit	r3, r3
 8002e20:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
 8002e24:	4bc8      	ldr	r3, [pc, #800]	@ (8003148 <HAL_RCC_OscConfig+0x934>)
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	2202      	movs	r2, #2
 8002e2a:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
 8002e2e:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8002e32:	fa92 f2a2 	rbit	r2, r2
 8002e36:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
  return result;
 8002e3a:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002e3e:	fab2 f282 	clz	r2, r2
 8002e42:	b2d2      	uxtb	r2, r2
 8002e44:	f042 0220 	orr.w	r2, r2, #32
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	f002 021f 	and.w	r2, r2, #31
 8002e4e:	2101      	movs	r1, #1
 8002e50:	fa01 f202 	lsl.w	r2, r1, r2
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d1ad      	bne.n	8002db6 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e5a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e5e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 8110 	beq.w	8003090 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002e70:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002e74:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d079      	beq.n	8002f74 <HAL_RCC_OscConfig+0x760>
 8002e80:	2301      	movs	r3, #1
 8002e82:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e86:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002e8a:	fa93 f3a3 	rbit	r3, r3
 8002e8e:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  return result;
 8002e92:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e96:	fab3 f383 	clz	r3, r3
 8002e9a:	b2db      	uxtb	r3, r3
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4bab      	ldr	r3, [pc, #684]	@ (800314c <HAL_RCC_OscConfig+0x938>)
 8002ea0:	4413      	add	r3, r2
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eaa:	f7fe fb4f 	bl	800154c <HAL_GetTick>
 8002eae:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb2:	e00a      	b.n	8002eca <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb4:	f7fe fb4a 	bl	800154c <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d902      	bls.n	8002eca <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	f000 bcdb 	b.w	8003880 <HAL_RCC_OscConfig+0x106c>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ed0:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8002ed4:	fa93 f3a3 	rbit	r3, r3
 8002ed8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002edc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ee0:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	601a      	str	r2, [r3, #0]
 8002ee8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002eec:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	fa93 f2a3 	rbit	r2, r3
 8002ef6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002efa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002efe:	601a      	str	r2, [r3, #0]
 8002f00:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f04:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f08:	2202      	movs	r2, #2
 8002f0a:	601a      	str	r2, [r3, #0]
 8002f0c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f10:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	fa93 f2a3 	rbit	r2, r3
 8002f1a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f1e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8002f22:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f24:	4b88      	ldr	r3, [pc, #544]	@ (8003148 <HAL_RCC_OscConfig+0x934>)
 8002f26:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f28:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f2c:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002f30:	2102      	movs	r1, #2
 8002f32:	6019      	str	r1, [r3, #0]
 8002f34:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f38:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	fa93 f1a3 	rbit	r1, r3
 8002f42:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f46:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f4a:	6019      	str	r1, [r3, #0]
  return result;
 8002f4c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f50:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f003 031f 	and.w	r3, r3, #31
 8002f66:	2101      	movs	r1, #1
 8002f68:	fa01 f303 	lsl.w	r3, r1, r3
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0a0      	beq.n	8002eb4 <HAL_RCC_OscConfig+0x6a0>
 8002f72:	e08d      	b.n	8003090 <HAL_RCC_OscConfig+0x87c>
 8002f74:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f78:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f80:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f84:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	fa93 f2a3 	rbit	r2, r3
 8002f8e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f92:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002f96:	601a      	str	r2, [r3, #0]
  return result;
 8002f98:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002f9c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8002fa0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4b68      	ldr	r3, [pc, #416]	@ (800314c <HAL_RCC_OscConfig+0x938>)
 8002fac:	4413      	add	r3, r2
 8002fae:	009b      	lsls	r3, r3, #2
 8002fb0:	461a      	mov	r2, r3
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fb6:	f7fe fac9 	bl	800154c <HAL_GetTick>
 8002fba:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fc0:	f7fe fac4 	bl	800154c <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d902      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	f000 bc55 	b.w	8003880 <HAL_RCC_OscConfig+0x106c>
 8002fd6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fda:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002fde:	2202      	movs	r2, #2
 8002fe0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002fe6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	fa93 f2a3 	rbit	r2, r3
 8002ff0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ff4:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002ff8:	601a      	str	r2, [r3, #0]
 8002ffa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8002ffe:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003002:	2202      	movs	r2, #2
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800300a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	fa93 f2a3 	rbit	r2, r3
 8003014:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003018:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800301c:	601a      	str	r2, [r3, #0]
 800301e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003022:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003026:	2202      	movs	r2, #2
 8003028:	601a      	str	r2, [r3, #0]
 800302a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800302e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	fa93 f2a3 	rbit	r2, r3
 8003038:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800303c:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003040:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003042:	4b41      	ldr	r3, [pc, #260]	@ (8003148 <HAL_RCC_OscConfig+0x934>)
 8003044:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003046:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800304a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800304e:	2102      	movs	r1, #2
 8003050:	6019      	str	r1, [r3, #0]
 8003052:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003056:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	fa93 f1a3 	rbit	r1, r3
 8003060:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003064:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003068:	6019      	str	r1, [r3, #0]
  return result;
 800306a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800306e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	fab3 f383 	clz	r3, r3
 8003078:	b2db      	uxtb	r3, r3
 800307a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800307e:	b2db      	uxtb	r3, r3
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	2101      	movs	r1, #1
 8003086:	fa01 f303 	lsl.w	r3, r1, r3
 800308a:	4013      	ands	r3, r2
 800308c:	2b00      	cmp	r3, #0
 800308e:	d197      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003090:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003094:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 0304 	and.w	r3, r3, #4
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 81a1 	beq.w	80033e8 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80030a6:	2300      	movs	r3, #0
 80030a8:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030ac:	4b26      	ldr	r3, [pc, #152]	@ (8003148 <HAL_RCC_OscConfig+0x934>)
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d116      	bne.n	80030e6 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b8:	4b23      	ldr	r3, [pc, #140]	@ (8003148 <HAL_RCC_OscConfig+0x934>)
 80030ba:	69db      	ldr	r3, [r3, #28]
 80030bc:	4a22      	ldr	r2, [pc, #136]	@ (8003148 <HAL_RCC_OscConfig+0x934>)
 80030be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030c2:	61d3      	str	r3, [r2, #28]
 80030c4:	4b20      	ldr	r3, [pc, #128]	@ (8003148 <HAL_RCC_OscConfig+0x934>)
 80030c6:	69db      	ldr	r3, [r3, #28]
 80030c8:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 80030cc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030d0:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80030d4:	601a      	str	r2, [r3, #0]
 80030d6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80030da:	f5a3 73fc 	sub.w	r3, r3, #504	@ 0x1f8
 80030de:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80030e0:	2301      	movs	r3, #1
 80030e2:	f887 31ff 	strb.w	r3, [r7, #511]	@ 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e6:	4b1a      	ldr	r3, [pc, #104]	@ (8003150 <HAL_RCC_OscConfig+0x93c>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d11a      	bne.n	8003128 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030f2:	4b17      	ldr	r3, [pc, #92]	@ (8003150 <HAL_RCC_OscConfig+0x93c>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a16      	ldr	r2, [pc, #88]	@ (8003150 <HAL_RCC_OscConfig+0x93c>)
 80030f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030fe:	f7fe fa25 	bl	800154c <HAL_GetTick>
 8003102:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003106:	e009      	b.n	800311c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003108:	f7fe fa20 	bl	800154c <HAL_GetTick>
 800310c:	4602      	mov	r2, r0
 800310e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	2b64      	cmp	r3, #100	@ 0x64
 8003116:	d901      	bls.n	800311c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8003118:	2303      	movs	r3, #3
 800311a:	e3b1      	b.n	8003880 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800311c:	4b0c      	ldr	r3, [pc, #48]	@ (8003150 <HAL_RCC_OscConfig+0x93c>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003124:	2b00      	cmp	r3, #0
 8003126:	d0ef      	beq.n	8003108 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003128:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800312c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68db      	ldr	r3, [r3, #12]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d10d      	bne.n	8003154 <HAL_RCC_OscConfig+0x940>
 8003138:	4b03      	ldr	r3, [pc, #12]	@ (8003148 <HAL_RCC_OscConfig+0x934>)
 800313a:	6a1b      	ldr	r3, [r3, #32]
 800313c:	4a02      	ldr	r2, [pc, #8]	@ (8003148 <HAL_RCC_OscConfig+0x934>)
 800313e:	f043 0301 	orr.w	r3, r3, #1
 8003142:	6213      	str	r3, [r2, #32]
 8003144:	e03c      	b.n	80031c0 <HAL_RCC_OscConfig+0x9ac>
 8003146:	bf00      	nop
 8003148:	40021000 	.word	0x40021000
 800314c:	10908120 	.word	0x10908120
 8003150:	40007000 	.word	0x40007000
 8003154:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003158:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d10c      	bne.n	800317e <HAL_RCC_OscConfig+0x96a>
 8003164:	4bc1      	ldr	r3, [pc, #772]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 8003166:	6a1b      	ldr	r3, [r3, #32]
 8003168:	4ac0      	ldr	r2, [pc, #768]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 800316a:	f023 0301 	bic.w	r3, r3, #1
 800316e:	6213      	str	r3, [r2, #32]
 8003170:	4bbe      	ldr	r3, [pc, #760]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	4abd      	ldr	r2, [pc, #756]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 8003176:	f023 0304 	bic.w	r3, r3, #4
 800317a:	6213      	str	r3, [r2, #32]
 800317c:	e020      	b.n	80031c0 <HAL_RCC_OscConfig+0x9ac>
 800317e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003182:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	68db      	ldr	r3, [r3, #12]
 800318a:	2b05      	cmp	r3, #5
 800318c:	d10c      	bne.n	80031a8 <HAL_RCC_OscConfig+0x994>
 800318e:	4bb7      	ldr	r3, [pc, #732]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 8003190:	6a1b      	ldr	r3, [r3, #32]
 8003192:	4ab6      	ldr	r2, [pc, #728]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 8003194:	f043 0304 	orr.w	r3, r3, #4
 8003198:	6213      	str	r3, [r2, #32]
 800319a:	4bb4      	ldr	r3, [pc, #720]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	4ab3      	ldr	r2, [pc, #716]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6213      	str	r3, [r2, #32]
 80031a6:	e00b      	b.n	80031c0 <HAL_RCC_OscConfig+0x9ac>
 80031a8:	4bb0      	ldr	r3, [pc, #704]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	4aaf      	ldr	r2, [pc, #700]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 80031ae:	f023 0301 	bic.w	r3, r3, #1
 80031b2:	6213      	str	r3, [r2, #32]
 80031b4:	4bad      	ldr	r3, [pc, #692]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 80031b6:	6a1b      	ldr	r3, [r3, #32]
 80031b8:	4aac      	ldr	r2, [pc, #688]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 80031ba:	f023 0304 	bic.w	r3, r3, #4
 80031be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031c0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031c4:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	68db      	ldr	r3, [r3, #12]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 8081 	beq.w	80032d4 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031d2:	f7fe f9bb 	bl	800154c <HAL_GetTick>
 80031d6:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031da:	e00b      	b.n	80031f4 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031dc:	f7fe f9b6 	bl	800154c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d901      	bls.n	80031f4 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 80031f0:	2303      	movs	r3, #3
 80031f2:	e345      	b.n	8003880 <HAL_RCC_OscConfig+0x106c>
 80031f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80031f8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80031fc:	2202      	movs	r2, #2
 80031fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003200:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003204:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	fa93 f2a3 	rbit	r2, r3
 800320e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003212:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800321c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003220:	2202      	movs	r2, #2
 8003222:	601a      	str	r2, [r3, #0]
 8003224:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003228:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	fa93 f2a3 	rbit	r2, r3
 8003232:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003236:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800323a:	601a      	str	r2, [r3, #0]
  return result;
 800323c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003240:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003244:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003246:	fab3 f383 	clz	r3, r3
 800324a:	b2db      	uxtb	r3, r3
 800324c:	095b      	lsrs	r3, r3, #5
 800324e:	b2db      	uxtb	r3, r3
 8003250:	f043 0302 	orr.w	r3, r3, #2
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b02      	cmp	r3, #2
 8003258:	d102      	bne.n	8003260 <HAL_RCC_OscConfig+0xa4c>
 800325a:	4b84      	ldr	r3, [pc, #528]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	e013      	b.n	8003288 <HAL_RCC_OscConfig+0xa74>
 8003260:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003264:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003268:	2202      	movs	r2, #2
 800326a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003270:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	fa93 f2a3 	rbit	r2, r3
 800327a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800327e:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003282:	601a      	str	r2, [r3, #0]
 8003284:	4b79      	ldr	r3, [pc, #484]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 8003286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003288:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800328c:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 8003290:	2102      	movs	r1, #2
 8003292:	6011      	str	r1, [r2, #0]
 8003294:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003298:	f5a2 72ac 	sub.w	r2, r2, #344	@ 0x158
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	fa92 f1a2 	rbit	r1, r2
 80032a2:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032a6:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80032aa:	6011      	str	r1, [r2, #0]
  return result;
 80032ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80032b0:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 80032b4:	6812      	ldr	r2, [r2, #0]
 80032b6:	fab2 f282 	clz	r2, r2
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032c0:	b2d2      	uxtb	r2, r2
 80032c2:	f002 021f 	and.w	r2, r2, #31
 80032c6:	2101      	movs	r1, #1
 80032c8:	fa01 f202 	lsl.w	r2, r1, r2
 80032cc:	4013      	ands	r3, r2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d084      	beq.n	80031dc <HAL_RCC_OscConfig+0x9c8>
 80032d2:	e07f      	b.n	80033d4 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032d4:	f7fe f93a 	bl	800154c <HAL_GetTick>
 80032d8:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032dc:	e00b      	b.n	80032f6 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032de:	f7fe f935 	bl	800154c <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d901      	bls.n	80032f6 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e2c4      	b.n	8003880 <HAL_RCC_OscConfig+0x106c>
 80032f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80032fa:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80032fe:	2202      	movs	r2, #2
 8003300:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003302:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003306:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	fa93 f2a3 	rbit	r2, r3
 8003310:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003314:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003318:	601a      	str	r2, [r3, #0]
 800331a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800331e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003322:	2202      	movs	r2, #2
 8003324:	601a      	str	r2, [r3, #0]
 8003326:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800332a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	fa93 f2a3 	rbit	r2, r3
 8003334:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003338:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 800333c:	601a      	str	r2, [r3, #0]
  return result;
 800333e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003342:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003346:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003348:	fab3 f383 	clz	r3, r3
 800334c:	b2db      	uxtb	r3, r3
 800334e:	095b      	lsrs	r3, r3, #5
 8003350:	b2db      	uxtb	r3, r3
 8003352:	f043 0302 	orr.w	r3, r3, #2
 8003356:	b2db      	uxtb	r3, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d102      	bne.n	8003362 <HAL_RCC_OscConfig+0xb4e>
 800335c:	4b43      	ldr	r3, [pc, #268]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	e013      	b.n	800338a <HAL_RCC_OscConfig+0xb76>
 8003362:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003366:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 800336a:	2202      	movs	r2, #2
 800336c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003372:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	fa93 f2a3 	rbit	r2, r3
 800337c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003380:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003384:	601a      	str	r2, [r3, #0]
 8003386:	4b39      	ldr	r3, [pc, #228]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 8003388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800338e:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 8003392:	2102      	movs	r1, #2
 8003394:	6011      	str	r1, [r2, #0]
 8003396:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800339a:	f5a2 72bc 	sub.w	r2, r2, #376	@ 0x178
 800339e:	6812      	ldr	r2, [r2, #0]
 80033a0:	fa92 f1a2 	rbit	r1, r2
 80033a4:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033a8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80033ac:	6011      	str	r1, [r2, #0]
  return result;
 80033ae:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80033b2:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 80033b6:	6812      	ldr	r2, [r2, #0]
 80033b8:	fab2 f282 	clz	r2, r2
 80033bc:	b2d2      	uxtb	r2, r2
 80033be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80033c2:	b2d2      	uxtb	r2, r2
 80033c4:	f002 021f 	and.w	r2, r2, #31
 80033c8:	2101      	movs	r1, #1
 80033ca:	fa01 f202 	lsl.w	r2, r1, r2
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d184      	bne.n	80032de <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	@ 0x1ff
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d105      	bne.n	80033e8 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033dc:	4b23      	ldr	r3, [pc, #140]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	4a22      	ldr	r2, [pc, #136]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 80033e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033e8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80033ec:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 8242 	beq.w	800387e <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033fa:	4b1c      	ldr	r3, [pc, #112]	@ (800346c <HAL_RCC_OscConfig+0xc58>)
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	f003 030c 	and.w	r3, r3, #12
 8003402:	2b08      	cmp	r3, #8
 8003404:	f000 8213 	beq.w	800382e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003408:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800340c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	69db      	ldr	r3, [r3, #28]
 8003414:	2b02      	cmp	r3, #2
 8003416:	f040 8162 	bne.w	80036de <HAL_RCC_OscConfig+0xeca>
 800341a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800341e:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003422:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003426:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003428:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800342c:	f5a3 73c0 	sub.w	r3, r3, #384	@ 0x180
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	fa93 f2a3 	rbit	r2, r3
 8003436:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800343a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 800343e:	601a      	str	r2, [r3, #0]
  return result;
 8003440:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003444:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003448:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800344a:	fab3 f383 	clz	r3, r3
 800344e:	b2db      	uxtb	r3, r3
 8003450:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003454:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	461a      	mov	r2, r3
 800345c:	2300      	movs	r3, #0
 800345e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003460:	f7fe f874 	bl	800154c <HAL_GetTick>
 8003464:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003468:	e00c      	b.n	8003484 <HAL_RCC_OscConfig+0xc70>
 800346a:	bf00      	nop
 800346c:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003470:	f7fe f86c 	bl	800154c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e1fd      	b.n	8003880 <HAL_RCC_OscConfig+0x106c>
 8003484:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003488:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800348c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003490:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003492:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003496:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	fa93 f2a3 	rbit	r2, r3
 80034a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034a4:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80034a8:	601a      	str	r2, [r3, #0]
  return result;
 80034aa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ae:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 80034b2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034b4:	fab3 f383 	clz	r3, r3
 80034b8:	b2db      	uxtb	r3, r3
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	b2db      	uxtb	r3, r3
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d102      	bne.n	80034ce <HAL_RCC_OscConfig+0xcba>
 80034c8:	4bb0      	ldr	r3, [pc, #704]	@ (800378c <HAL_RCC_OscConfig+0xf78>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	e027      	b.n	800351e <HAL_RCC_OscConfig+0xd0a>
 80034ce:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034d2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80034d6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80034da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034dc:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034e0:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	fa93 f2a3 	rbit	r2, r3
 80034ea:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034ee:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 80034f2:	601a      	str	r2, [r3, #0]
 80034f4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80034f8:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 80034fc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003500:	601a      	str	r2, [r3, #0]
 8003502:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003506:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	fa93 f2a3 	rbit	r2, r3
 8003510:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003514:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003518:	601a      	str	r2, [r3, #0]
 800351a:	4b9c      	ldr	r3, [pc, #624]	@ (800378c <HAL_RCC_OscConfig+0xf78>)
 800351c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003522:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003526:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800352a:	6011      	str	r1, [r2, #0]
 800352c:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003530:	f5a2 72d0 	sub.w	r2, r2, #416	@ 0x1a0
 8003534:	6812      	ldr	r2, [r2, #0]
 8003536:	fa92 f1a2 	rbit	r1, r2
 800353a:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800353e:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003542:	6011      	str	r1, [r2, #0]
  return result;
 8003544:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003548:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 800354c:	6812      	ldr	r2, [r2, #0]
 800354e:	fab2 f282 	clz	r2, r2
 8003552:	b2d2      	uxtb	r2, r2
 8003554:	f042 0220 	orr.w	r2, r2, #32
 8003558:	b2d2      	uxtb	r2, r2
 800355a:	f002 021f 	and.w	r2, r2, #31
 800355e:	2101      	movs	r1, #1
 8003560:	fa01 f202 	lsl.w	r2, r1, r2
 8003564:	4013      	ands	r3, r2
 8003566:	2b00      	cmp	r3, #0
 8003568:	d182      	bne.n	8003470 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800356a:	4b88      	ldr	r3, [pc, #544]	@ (800378c <HAL_RCC_OscConfig+0xf78>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003572:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003576:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 800357e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003582:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6a1b      	ldr	r3, [r3, #32]
 800358a:	430b      	orrs	r3, r1
 800358c:	497f      	ldr	r1, [pc, #508]	@ (800378c <HAL_RCC_OscConfig+0xf78>)
 800358e:	4313      	orrs	r3, r2
 8003590:	604b      	str	r3, [r1, #4]
 8003592:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003596:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 800359a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800359e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a0:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035a4:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	fa93 f2a3 	rbit	r2, r3
 80035ae:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035b2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80035b6:	601a      	str	r2, [r3, #0]
  return result;
 80035b8:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035bc:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 80035c0:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c2:	fab3 f383 	clz	r3, r3
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035cc:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035d0:	009b      	lsls	r3, r3, #2
 80035d2:	461a      	mov	r2, r3
 80035d4:	2301      	movs	r3, #1
 80035d6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d8:	f7fd ffb8 	bl	800154c <HAL_GetTick>
 80035dc:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80035e0:	e009      	b.n	80035f6 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035e2:	f7fd ffb3 	bl	800154c <HAL_GetTick>
 80035e6:	4602      	mov	r2, r0
 80035e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b02      	cmp	r3, #2
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e144      	b.n	8003880 <HAL_RCC_OscConfig+0x106c>
 80035f6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80035fa:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 80035fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003602:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003604:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003608:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	fa93 f2a3 	rbit	r2, r3
 8003612:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003616:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800361a:	601a      	str	r2, [r3, #0]
  return result;
 800361c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003620:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003624:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003626:	fab3 f383 	clz	r3, r3
 800362a:	b2db      	uxtb	r3, r3
 800362c:	095b      	lsrs	r3, r3, #5
 800362e:	b2db      	uxtb	r3, r3
 8003630:	f043 0301 	orr.w	r3, r3, #1
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b01      	cmp	r3, #1
 8003638:	d102      	bne.n	8003640 <HAL_RCC_OscConfig+0xe2c>
 800363a:	4b54      	ldr	r3, [pc, #336]	@ (800378c <HAL_RCC_OscConfig+0xf78>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	e027      	b.n	8003690 <HAL_RCC_OscConfig+0xe7c>
 8003640:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003644:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003648:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800364c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800364e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003652:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	fa93 f2a3 	rbit	r2, r3
 800365c:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003660:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800366a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800366e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003672:	601a      	str	r2, [r3, #0]
 8003674:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003678:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	fa93 f2a3 	rbit	r2, r3
 8003682:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003686:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	4b3f      	ldr	r3, [pc, #252]	@ (800378c <HAL_RCC_OscConfig+0xf78>)
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003694:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 8003698:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800369c:	6011      	str	r1, [r2, #0]
 800369e:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036a2:	f5a2 72e4 	sub.w	r2, r2, #456	@ 0x1c8
 80036a6:	6812      	ldr	r2, [r2, #0]
 80036a8:	fa92 f1a2 	rbit	r1, r2
 80036ac:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036b0:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80036b4:	6011      	str	r1, [r2, #0]
  return result;
 80036b6:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80036ba:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80036be:	6812      	ldr	r2, [r2, #0]
 80036c0:	fab2 f282 	clz	r2, r2
 80036c4:	b2d2      	uxtb	r2, r2
 80036c6:	f042 0220 	orr.w	r2, r2, #32
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	f002 021f 	and.w	r2, r2, #31
 80036d0:	2101      	movs	r1, #1
 80036d2:	fa01 f202 	lsl.w	r2, r1, r2
 80036d6:	4013      	ands	r3, r2
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d082      	beq.n	80035e2 <HAL_RCC_OscConfig+0xdce>
 80036dc:	e0cf      	b.n	800387e <HAL_RCC_OscConfig+0x106a>
 80036de:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036e2:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80036e6:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80036ea:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ec:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036f0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	fa93 f2a3 	rbit	r2, r3
 80036fa:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80036fe:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003702:	601a      	str	r2, [r3, #0]
  return result;
 8003704:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003708:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800370c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800370e:	fab3 f383 	clz	r3, r3
 8003712:	b2db      	uxtb	r3, r3
 8003714:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003718:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	461a      	mov	r2, r3
 8003720:	2300      	movs	r3, #0
 8003722:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003724:	f7fd ff12 	bl	800154c <HAL_GetTick>
 8003728:	f8c7 01f8 	str.w	r0, [r7, #504]	@ 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800372c:	e009      	b.n	8003742 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800372e:	f7fd ff0d 	bl	800154c <HAL_GetTick>
 8003732:	4602      	mov	r2, r0
 8003734:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	2b02      	cmp	r3, #2
 800373c:	d901      	bls.n	8003742 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e09e      	b.n	8003880 <HAL_RCC_OscConfig+0x106c>
 8003742:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003746:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800374a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800374e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003750:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003754:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	fa93 f2a3 	rbit	r2, r3
 800375e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003762:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003766:	601a      	str	r2, [r3, #0]
  return result;
 8003768:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800376c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003770:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003772:	fab3 f383 	clz	r3, r3
 8003776:	b2db      	uxtb	r3, r3
 8003778:	095b      	lsrs	r3, r3, #5
 800377a:	b2db      	uxtb	r3, r3
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b01      	cmp	r3, #1
 8003784:	d104      	bne.n	8003790 <HAL_RCC_OscConfig+0xf7c>
 8003786:	4b01      	ldr	r3, [pc, #4]	@ (800378c <HAL_RCC_OscConfig+0xf78>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	e029      	b.n	80037e0 <HAL_RCC_OscConfig+0xfcc>
 800378c:	40021000 	.word	0x40021000
 8003790:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003794:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003798:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800379c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800379e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037a2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	fa93 f2a3 	rbit	r2, r3
 80037ac:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037b0:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80037b4:	601a      	str	r2, [r3, #0]
 80037b6:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037ba:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80037be:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80037c2:	601a      	str	r2, [r3, #0]
 80037c4:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037c8:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	fa93 f2a3 	rbit	r2, r3
 80037d2:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 80037d6:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	4b2b      	ldr	r3, [pc, #172]	@ (800388c <HAL_RCC_OscConfig+0x1078>)
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037e4:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80037e8:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80037ec:	6011      	str	r1, [r2, #0]
 80037ee:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 80037f2:	f5a2 72f8 	sub.w	r2, r2, #496	@ 0x1f0
 80037f6:	6812      	ldr	r2, [r2, #0]
 80037f8:	fa92 f1a2 	rbit	r1, r2
 80037fc:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 8003800:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003804:	6011      	str	r1, [r2, #0]
  return result;
 8003806:	f507 7200 	add.w	r2, r7, #512	@ 0x200
 800380a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800380e:	6812      	ldr	r2, [r2, #0]
 8003810:	fab2 f282 	clz	r2, r2
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	f042 0220 	orr.w	r2, r2, #32
 800381a:	b2d2      	uxtb	r2, r2
 800381c:	f002 021f 	and.w	r2, r2, #31
 8003820:	2101      	movs	r1, #1
 8003822:	fa01 f202 	lsl.w	r2, r1, r2
 8003826:	4013      	ands	r3, r2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d180      	bne.n	800372e <HAL_RCC_OscConfig+0xf1a>
 800382c:	e027      	b.n	800387e <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800382e:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003832:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e01e      	b.n	8003880 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003842:	4b12      	ldr	r3, [pc, #72]	@ (800388c <HAL_RCC_OscConfig+0x1078>)
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 800384a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800384e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003852:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 8003856:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6a1b      	ldr	r3, [r3, #32]
 800385e:	429a      	cmp	r2, r3
 8003860:	d10b      	bne.n	800387a <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8003862:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8003866:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800386a:	f507 7300 	add.w	r3, r7, #512	@ 0x200
 800386e:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003876:	429a      	cmp	r2, r3
 8003878:	d001      	beq.n	800387e <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e000      	b.n	8003880 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 800387e:	2300      	movs	r3, #0
}
 8003880:	4618      	mov	r0, r3
 8003882:	f507 7700 	add.w	r7, r7, #512	@ 0x200
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40021000 	.word	0x40021000

08003890 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b09e      	sub	sp, #120	@ 0x78
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d101      	bne.n	80038a8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	e162      	b.n	8003b6e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038a8:	4b90      	ldr	r3, [pc, #576]	@ (8003aec <HAL_RCC_ClockConfig+0x25c>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	683a      	ldr	r2, [r7, #0]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	d910      	bls.n	80038d8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038b6:	4b8d      	ldr	r3, [pc, #564]	@ (8003aec <HAL_RCC_ClockConfig+0x25c>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f023 0207 	bic.w	r2, r3, #7
 80038be:	498b      	ldr	r1, [pc, #556]	@ (8003aec <HAL_RCC_ClockConfig+0x25c>)
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b89      	ldr	r3, [pc, #548]	@ (8003aec <HAL_RCC_ClockConfig+0x25c>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e14a      	b.n	8003b6e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0302 	and.w	r3, r3, #2
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038e4:	4b82      	ldr	r3, [pc, #520]	@ (8003af0 <HAL_RCC_ClockConfig+0x260>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	497f      	ldr	r1, [pc, #508]	@ (8003af0 <HAL_RCC_ClockConfig+0x260>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	f000 80dc 	beq.w	8003abc <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	2b01      	cmp	r3, #1
 800390a:	d13c      	bne.n	8003986 <HAL_RCC_ClockConfig+0xf6>
 800390c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003910:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800391a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800391c:	fab3 f383 	clz	r3, r3
 8003920:	b2db      	uxtb	r3, r3
 8003922:	095b      	lsrs	r3, r3, #5
 8003924:	b2db      	uxtb	r3, r3
 8003926:	f043 0301 	orr.w	r3, r3, #1
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b01      	cmp	r3, #1
 800392e:	d102      	bne.n	8003936 <HAL_RCC_ClockConfig+0xa6>
 8003930:	4b6f      	ldr	r3, [pc, #444]	@ (8003af0 <HAL_RCC_ClockConfig+0x260>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	e00f      	b.n	8003956 <HAL_RCC_ClockConfig+0xc6>
 8003936:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800393a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800393c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800393e:	fa93 f3a3 	rbit	r3, r3
 8003942:	667b      	str	r3, [r7, #100]	@ 0x64
 8003944:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003948:	663b      	str	r3, [r7, #96]	@ 0x60
 800394a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800394c:	fa93 f3a3 	rbit	r3, r3
 8003950:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003952:	4b67      	ldr	r3, [pc, #412]	@ (8003af0 <HAL_RCC_ClockConfig+0x260>)
 8003954:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003956:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800395a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800395c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800395e:	fa92 f2a2 	rbit	r2, r2
 8003962:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8003964:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003966:	fab2 f282 	clz	r2, r2
 800396a:	b2d2      	uxtb	r2, r2
 800396c:	f042 0220 	orr.w	r2, r2, #32
 8003970:	b2d2      	uxtb	r2, r2
 8003972:	f002 021f 	and.w	r2, r2, #31
 8003976:	2101      	movs	r1, #1
 8003978:	fa01 f202 	lsl.w	r2, r1, r2
 800397c:	4013      	ands	r3, r2
 800397e:	2b00      	cmp	r3, #0
 8003980:	d17b      	bne.n	8003a7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e0f3      	b.n	8003b6e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b02      	cmp	r3, #2
 800398c:	d13c      	bne.n	8003a08 <HAL_RCC_ClockConfig+0x178>
 800398e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003992:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003994:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003996:	fa93 f3a3 	rbit	r3, r3
 800399a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800399c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800399e:	fab3 f383 	clz	r3, r3
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	095b      	lsrs	r3, r3, #5
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	f043 0301 	orr.w	r3, r3, #1
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d102      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x128>
 80039b2:	4b4f      	ldr	r3, [pc, #316]	@ (8003af0 <HAL_RCC_ClockConfig+0x260>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	e00f      	b.n	80039d8 <HAL_RCC_ClockConfig+0x148>
 80039b8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039bc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80039c0:	fa93 f3a3 	rbit	r3, r3
 80039c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80039c6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80039ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80039cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039ce:	fa93 f3a3 	rbit	r3, r3
 80039d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80039d4:	4b46      	ldr	r3, [pc, #280]	@ (8003af0 <HAL_RCC_ClockConfig+0x260>)
 80039d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039d8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80039dc:	63ba      	str	r2, [r7, #56]	@ 0x38
 80039de:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80039e0:	fa92 f2a2 	rbit	r2, r2
 80039e4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80039e6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80039e8:	fab2 f282 	clz	r2, r2
 80039ec:	b2d2      	uxtb	r2, r2
 80039ee:	f042 0220 	orr.w	r2, r2, #32
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	f002 021f 	and.w	r2, r2, #31
 80039f8:	2101      	movs	r1, #1
 80039fa:	fa01 f202 	lsl.w	r2, r1, r2
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d13a      	bne.n	8003a7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e0b2      	b.n	8003b6e <HAL_RCC_ClockConfig+0x2de>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a0e:	fa93 f3a3 	rbit	r3, r3
 8003a12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003a14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a16:	fab3 f383 	clz	r3, r3
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	095b      	lsrs	r3, r3, #5
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	f043 0301 	orr.w	r3, r3, #1
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d102      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x1a0>
 8003a2a:	4b31      	ldr	r3, [pc, #196]	@ (8003af0 <HAL_RCC_ClockConfig+0x260>)
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	e00d      	b.n	8003a4c <HAL_RCC_ClockConfig+0x1bc>
 8003a30:	2302      	movs	r3, #2
 8003a32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a36:	fa93 f3a3 	rbit	r3, r3
 8003a3a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a3c:	2302      	movs	r3, #2
 8003a3e:	623b      	str	r3, [r7, #32]
 8003a40:	6a3b      	ldr	r3, [r7, #32]
 8003a42:	fa93 f3a3 	rbit	r3, r3
 8003a46:	61fb      	str	r3, [r7, #28]
 8003a48:	4b29      	ldr	r3, [pc, #164]	@ (8003af0 <HAL_RCC_ClockConfig+0x260>)
 8003a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a4c:	2202      	movs	r2, #2
 8003a4e:	61ba      	str	r2, [r7, #24]
 8003a50:	69ba      	ldr	r2, [r7, #24]
 8003a52:	fa92 f2a2 	rbit	r2, r2
 8003a56:	617a      	str	r2, [r7, #20]
  return result;
 8003a58:	697a      	ldr	r2, [r7, #20]
 8003a5a:	fab2 f282 	clz	r2, r2
 8003a5e:	b2d2      	uxtb	r2, r2
 8003a60:	f042 0220 	orr.w	r2, r2, #32
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	f002 021f 	and.w	r2, r2, #31
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003a70:	4013      	ands	r3, r2
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d101      	bne.n	8003a7a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003a76:	2301      	movs	r3, #1
 8003a78:	e079      	b.n	8003b6e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8003af0 <HAL_RCC_ClockConfig+0x260>)
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	f023 0203 	bic.w	r2, r3, #3
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	491a      	ldr	r1, [pc, #104]	@ (8003af0 <HAL_RCC_ClockConfig+0x260>)
 8003a88:	4313      	orrs	r3, r2
 8003a8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a8c:	f7fd fd5e 	bl	800154c <HAL_GetTick>
 8003a90:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a92:	e00a      	b.n	8003aaa <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a94:	f7fd fd5a 	bl	800154c <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e061      	b.n	8003b6e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aaa:	4b11      	ldr	r3, [pc, #68]	@ (8003af0 <HAL_RCC_ClockConfig+0x260>)
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	f003 020c 	and.w	r2, r3, #12
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	009b      	lsls	r3, r3, #2
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d1eb      	bne.n	8003a94 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003abc:	4b0b      	ldr	r3, [pc, #44]	@ (8003aec <HAL_RCC_ClockConfig+0x25c>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f003 0307 	and.w	r3, r3, #7
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	429a      	cmp	r2, r3
 8003ac8:	d214      	bcs.n	8003af4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003aca:	4b08      	ldr	r3, [pc, #32]	@ (8003aec <HAL_RCC_ClockConfig+0x25c>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f023 0207 	bic.w	r2, r3, #7
 8003ad2:	4906      	ldr	r1, [pc, #24]	@ (8003aec <HAL_RCC_ClockConfig+0x25c>)
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ada:	4b04      	ldr	r3, [pc, #16]	@ (8003aec <HAL_RCC_ClockConfig+0x25c>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d005      	beq.n	8003af4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003ae8:	2301      	movs	r3, #1
 8003aea:	e040      	b.n	8003b6e <HAL_RCC_ClockConfig+0x2de>
 8003aec:	40022000 	.word	0x40022000
 8003af0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f003 0304 	and.w	r3, r3, #4
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b00:	4b1d      	ldr	r3, [pc, #116]	@ (8003b78 <HAL_RCC_ClockConfig+0x2e8>)
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	491a      	ldr	r1, [pc, #104]	@ (8003b78 <HAL_RCC_ClockConfig+0x2e8>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0308 	and.w	r3, r3, #8
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d009      	beq.n	8003b32 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b1e:	4b16      	ldr	r3, [pc, #88]	@ (8003b78 <HAL_RCC_ClockConfig+0x2e8>)
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	00db      	lsls	r3, r3, #3
 8003b2c:	4912      	ldr	r1, [pc, #72]	@ (8003b78 <HAL_RCC_ClockConfig+0x2e8>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003b32:	f000 f829 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8003b36:	4601      	mov	r1, r0
 8003b38:	4b0f      	ldr	r3, [pc, #60]	@ (8003b78 <HAL_RCC_ClockConfig+0x2e8>)
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b40:	22f0      	movs	r2, #240	@ 0xf0
 8003b42:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	fa92 f2a2 	rbit	r2, r2
 8003b4a:	60fa      	str	r2, [r7, #12]
  return result;
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	fab2 f282 	clz	r2, r2
 8003b52:	b2d2      	uxtb	r2, r2
 8003b54:	40d3      	lsrs	r3, r2
 8003b56:	4a09      	ldr	r2, [pc, #36]	@ (8003b7c <HAL_RCC_ClockConfig+0x2ec>)
 8003b58:	5cd3      	ldrb	r3, [r2, r3]
 8003b5a:	fa21 f303 	lsr.w	r3, r1, r3
 8003b5e:	4a08      	ldr	r2, [pc, #32]	@ (8003b80 <HAL_RCC_ClockConfig+0x2f0>)
 8003b60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003b62:	4b08      	ldr	r3, [pc, #32]	@ (8003b84 <HAL_RCC_ClockConfig+0x2f4>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4618      	mov	r0, r3
 8003b68:	f7fd fcac 	bl	80014c4 <HAL_InitTick>
  
  return HAL_OK;
 8003b6c:	2300      	movs	r3, #0
}
 8003b6e:	4618      	mov	r0, r3
 8003b70:	3778      	adds	r7, #120	@ 0x78
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	08008f38 	.word	0x08008f38
 8003b80:	20000000 	.word	0x20000000
 8003b84:	20000004 	.word	0x20000004

08003b88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b087      	sub	sp, #28
 8003b8c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003b8e:	2300      	movs	r3, #0
 8003b90:	60fb      	str	r3, [r7, #12]
 8003b92:	2300      	movs	r3, #0
 8003b94:	60bb      	str	r3, [r7, #8]
 8003b96:	2300      	movs	r3, #0
 8003b98:	617b      	str	r3, [r7, #20]
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x94>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f003 030c 	and.w	r3, r3, #12
 8003bae:	2b04      	cmp	r3, #4
 8003bb0:	d002      	beq.n	8003bb8 <HAL_RCC_GetSysClockFreq+0x30>
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d003      	beq.n	8003bbe <HAL_RCC_GetSysClockFreq+0x36>
 8003bb6:	e026      	b.n	8003c06 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003bb8:	4b19      	ldr	r3, [pc, #100]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003bba:	613b      	str	r3, [r7, #16]
      break;
 8003bbc:	e026      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	0c9b      	lsrs	r3, r3, #18
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	4a17      	ldr	r2, [pc, #92]	@ (8003c24 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003bc8:	5cd3      	ldrb	r3, [r2, r3]
 8003bca:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8003bcc:	4b13      	ldr	r3, [pc, #76]	@ (8003c1c <HAL_RCC_GetSysClockFreq+0x94>)
 8003bce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bd0:	f003 030f 	and.w	r3, r3, #15
 8003bd4:	4a14      	ldr	r2, [pc, #80]	@ (8003c28 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003bd6:	5cd3      	ldrb	r3, [r2, r3]
 8003bd8:	60bb      	str	r3, [r7, #8]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003be4:	4a0e      	ldr	r2, [pc, #56]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	fbb2 f2f3 	udiv	r2, r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	fb02 f303 	mul.w	r3, r2, r3
 8003bf2:	617b      	str	r3, [r7, #20]
 8003bf4:	e004      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x78>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a0c      	ldr	r2, [pc, #48]	@ (8003c2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	617b      	str	r3, [r7, #20]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	613b      	str	r3, [r7, #16]
      break;
 8003c04:	e002      	b.n	8003c0c <HAL_RCC_GetSysClockFreq+0x84>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003c06:	4b06      	ldr	r3, [pc, #24]	@ (8003c20 <HAL_RCC_GetSysClockFreq+0x98>)
 8003c08:	613b      	str	r3, [r7, #16]
      break;
 8003c0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c0c:	693b      	ldr	r3, [r7, #16]
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr
 8003c1a:	bf00      	nop
 8003c1c:	40021000 	.word	0x40021000
 8003c20:	007a1200 	.word	0x007a1200
 8003c24:	08008f50 	.word	0x08008f50
 8003c28:	08008f60 	.word	0x08008f60
 8003c2c:	003d0900 	.word	0x003d0900

08003c30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c30:	b480      	push	{r7}
 8003c32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c34:	4b03      	ldr	r3, [pc, #12]	@ (8003c44 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c36:	681b      	ldr	r3, [r3, #0]
}
 8003c38:	4618      	mov	r0, r3
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	20000000 	.word	0x20000000

08003c48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b082      	sub	sp, #8
 8003c4c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8003c4e:	f7ff ffef 	bl	8003c30 <HAL_RCC_GetHCLKFreq>
 8003c52:	4601      	mov	r1, r0
 8003c54:	4b0b      	ldr	r3, [pc, #44]	@ (8003c84 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003c5c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003c60:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	fa92 f2a2 	rbit	r2, r2
 8003c68:	603a      	str	r2, [r7, #0]
  return result;
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	fab2 f282 	clz	r2, r2
 8003c70:	b2d2      	uxtb	r2, r2
 8003c72:	40d3      	lsrs	r3, r2
 8003c74:	4a04      	ldr	r2, [pc, #16]	@ (8003c88 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003c76:	5cd3      	ldrb	r3, [r2, r3]
 8003c78:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3708      	adds	r7, #8
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40021000 	.word	0x40021000
 8003c88:	08008f48 	.word	0x08008f48

08003c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b082      	sub	sp, #8
 8003c90:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003c92:	f7ff ffcd 	bl	8003c30 <HAL_RCC_GetHCLKFreq>
 8003c96:	4601      	mov	r1, r0
 8003c98:	4b0b      	ldr	r3, [pc, #44]	@ (8003cc8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003ca0:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003ca4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	fa92 f2a2 	rbit	r2, r2
 8003cac:	603a      	str	r2, [r7, #0]
  return result;
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	fab2 f282 	clz	r2, r2
 8003cb4:	b2d2      	uxtb	r2, r2
 8003cb6:	40d3      	lsrs	r3, r2
 8003cb8:	4a04      	ldr	r2, [pc, #16]	@ (8003ccc <HAL_RCC_GetPCLK2Freq+0x40>)
 8003cba:	5cd3      	ldrb	r3, [r2, r3]
 8003cbc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3708      	adds	r7, #8
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	40021000 	.word	0x40021000
 8003ccc:	08008f48 	.word	0x08008f48

08003cd0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b092      	sub	sp, #72	@ 0x48
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	f000 80d4 	beq.w	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cf4:	4b4e      	ldr	r3, [pc, #312]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003cf6:	69db      	ldr	r3, [r3, #28]
 8003cf8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10e      	bne.n	8003d1e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d00:	4b4b      	ldr	r3, [pc, #300]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d02:	69db      	ldr	r3, [r3, #28]
 8003d04:	4a4a      	ldr	r2, [pc, #296]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d06:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d0a:	61d3      	str	r3, [r2, #28]
 8003d0c:	4b48      	ldr	r3, [pc, #288]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d14:	60bb      	str	r3, [r7, #8]
 8003d16:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d1e:	4b45      	ldr	r3, [pc, #276]	@ (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d118      	bne.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d2a:	4b42      	ldr	r3, [pc, #264]	@ (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a41      	ldr	r2, [pc, #260]	@ (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d36:	f7fd fc09 	bl	800154c <HAL_GetTick>
 8003d3a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d3c:	e008      	b.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d3e:	f7fd fc05 	bl	800154c <HAL_GetTick>
 8003d42:	4602      	mov	r2, r0
 8003d44:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d46:	1ad3      	subs	r3, r2, r3
 8003d48:	2b64      	cmp	r3, #100	@ 0x64
 8003d4a:	d901      	bls.n	8003d50 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e14b      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x318>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d50:	4b38      	ldr	r3, [pc, #224]	@ (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0f0      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d5c:	4b34      	ldr	r3, [pc, #208]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	f000 8084 	beq.w	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d76:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d78:	429a      	cmp	r2, r3
 8003d7a:	d07c      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003d7c:	4b2c      	ldr	r3, [pc, #176]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d84:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003d86:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003d8a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d8e:	fa93 f3a3 	rbit	r3, r3
 8003d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003d94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003d96:	fab3 f383 	clz	r3, r3
 8003d9a:	b2db      	uxtb	r3, r3
 8003d9c:	461a      	mov	r2, r3
 8003d9e:	4b26      	ldr	r3, [pc, #152]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	461a      	mov	r2, r3
 8003da6:	2301      	movs	r3, #1
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003dae:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003db2:	fa93 f3a3 	rbit	r3, r3
 8003db6:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003db8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003dba:	fab3 f383 	clz	r3, r3
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8003e38 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003dc4:	4413      	add	r3, r2
 8003dc6:	009b      	lsls	r3, r3, #2
 8003dc8:	461a      	mov	r2, r3
 8003dca:	2300      	movs	r3, #0
 8003dcc:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003dce:	4a18      	ldr	r2, [pc, #96]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003dd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dd2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d04b      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dde:	f7fd fbb5 	bl	800154c <HAL_GetTick>
 8003de2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de4:	e00a      	b.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003de6:	f7fd fbb1 	bl	800154c <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e0f5      	b.n	8003fe8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e02:	fa93 f3a3 	rbit	r3, r3
 8003e06:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e08:	2302      	movs	r3, #2
 8003e0a:	623b      	str	r3, [r7, #32]
 8003e0c:	6a3b      	ldr	r3, [r7, #32]
 8003e0e:	fa93 f3a3 	rbit	r3, r3
 8003e12:	61fb      	str	r3, [r7, #28]
  return result;
 8003e14:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e16:	fab3 f383 	clz	r3, r3
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	095b      	lsrs	r3, r3, #5
 8003e1e:	b2db      	uxtb	r3, r3
 8003e20:	f043 0302 	orr.w	r3, r3, #2
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d108      	bne.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003e2a:	4b01      	ldr	r3, [pc, #4]	@ (8003e30 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003e2c:	6a1b      	ldr	r3, [r3, #32]
 8003e2e:	e00d      	b.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003e30:	40021000 	.word	0x40021000
 8003e34:	40007000 	.word	0x40007000
 8003e38:	10908100 	.word	0x10908100
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	fa93 f3a3 	rbit	r3, r3
 8003e46:	617b      	str	r3, [r7, #20]
 8003e48:	4b69      	ldr	r3, [pc, #420]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e4c:	2202      	movs	r2, #2
 8003e4e:	613a      	str	r2, [r7, #16]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	fa92 f2a2 	rbit	r2, r2
 8003e56:	60fa      	str	r2, [r7, #12]
  return result;
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	fab2 f282 	clz	r2, r2
 8003e5e:	b2d2      	uxtb	r2, r2
 8003e60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	f002 021f 	and.w	r2, r2, #31
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	fa01 f202 	lsl.w	r2, r1, r2
 8003e70:	4013      	ands	r3, r2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0b7      	beq.n	8003de6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003e76:	4b5e      	ldr	r3, [pc, #376]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	495b      	ldr	r1, [pc, #364]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003e88:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d105      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e90:	4b57      	ldr	r3, [pc, #348]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e92:	69db      	ldr	r3, [r3, #28]
 8003e94:	4a56      	ldr	r2, [pc, #344]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003e96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e9a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 0301 	and.w	r3, r3, #1
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d008      	beq.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ea8:	4b51      	ldr	r3, [pc, #324]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eac:	f023 0203 	bic.w	r2, r3, #3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	494e      	ldr	r1, [pc, #312]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003eb6:	4313      	orrs	r3, r2
 8003eb8:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d008      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ec6:	4b4a      	ldr	r3, [pc, #296]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eca:	f023 0210 	bic.w	r2, r3, #16
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	4947      	ldr	r1, [pc, #284]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d008      	beq.n	8003ef6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003ee4:	4b42      	ldr	r3, [pc, #264]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ee6:	685b      	ldr	r3, [r3, #4]
 8003ee8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef0:	493f      	ldr	r1, [pc, #252]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d008      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f02:	4b3b      	ldr	r3, [pc, #236]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f06:	f023 0220 	bic.w	r2, r3, #32
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	4938      	ldr	r1, [pc, #224]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f10:	4313      	orrs	r3, r2
 8003f12:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d008      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f20:	4b33      	ldr	r3, [pc, #204]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f24:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	695b      	ldr	r3, [r3, #20]
 8003f2c:	4930      	ldr	r1, [pc, #192]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d008      	beq.n	8003f50 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	69db      	ldr	r3, [r3, #28]
 8003f4a:	4929      	ldr	r1, [pc, #164]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	604b      	str	r3, [r1, #4]
       /* STM32F301x8 || STM32F302x8 || STM32F318xx    */
  
#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
      
  /*------------------------------ ADC1 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC1) == RCC_PERIPHCLK_ADC1)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d008      	beq.n	8003f6e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC1PLLCLK_DIV(PeriphClkInit->Adc1ClockSelection));
    
    /* Configure the ADC1 clock source */
    __HAL_RCC_ADC1_CONFIG(PeriphClkInit->Adc1ClockSelection);
 8003f5c:	4b24      	ldr	r3, [pc, #144]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f60:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	699b      	ldr	r3, [r3, #24]
 8003f68:	4921      	ldr	r1, [pc, #132]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f6a:	4313      	orrs	r3, r2
 8003f6c:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d008      	beq.n	8003f8c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f7e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6a1b      	ldr	r3, [r3, #32]
 8003f86:	491a      	ldr	r1, [pc, #104]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	630b      	str	r3, [r1, #48]	@ 0x30
       /* STM32F303xC || STM32F358xx    */

#if defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM15 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003f98:	4b15      	ldr	r3, [pc, #84]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f9c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fa4:	4912      	ldr	r1, [pc, #72]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d008      	beq.n	8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the TIM16 clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003fb6:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fba:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fc2:	490b      	ldr	r1, [pc, #44]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d008      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the TIM17 clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8003fd4:	4b06      	ldr	r3, [pc, #24]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe0:	4903      	ldr	r1, [pc, #12]	@ (8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x320>)
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	630b      	str	r3, [r1, #48]	@ 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003fe6:	2300      	movs	r3, #0
}
 8003fe8:	4618      	mov	r0, r3
 8003fea:	3748      	adds	r7, #72	@ 0x48
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	40021000 	.word	0x40021000

08003ff4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d101      	bne.n	8004006 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e040      	b.n	8004088 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800400a:	2b00      	cmp	r3, #0
 800400c:	d106      	bne.n	800401c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7fd f8ca 	bl	80011b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2224      	movs	r2, #36	@ 0x24
 8004020:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0201 	bic.w	r2, r2, #1
 8004030:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800403a:	6878      	ldr	r0, [r7, #4]
 800403c:	f000 f9e8 	bl	8004410 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 f8af 	bl	80041a4 <UART_SetConfig>
 8004046:	4603      	mov	r3, r0
 8004048:	2b01      	cmp	r3, #1
 800404a:	d101      	bne.n	8004050 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	e01b      	b.n	8004088 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800405e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	689a      	ldr	r2, [r3, #8]
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800406e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f000 fa67 	bl	8004554 <UART_CheckIdleState>
 8004086:	4603      	mov	r3, r0
}
 8004088:	4618      	mov	r0, r3
 800408a:	3708      	adds	r7, #8
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b08a      	sub	sp, #40	@ 0x28
 8004094:	af02      	add	r7, sp, #8
 8004096:	60f8      	str	r0, [r7, #12]
 8004098:	60b9      	str	r1, [r7, #8]
 800409a:	603b      	str	r3, [r7, #0]
 800409c:	4613      	mov	r3, r2
 800409e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	d177      	bne.n	8004198 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <HAL_UART_Transmit+0x24>
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e070      	b.n	800419a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2221      	movs	r2, #33	@ 0x21
 80040c4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040c6:	f7fd fa41 	bl	800154c <HAL_GetTick>
 80040ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	88fa      	ldrh	r2, [r7, #6]
 80040d0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	88fa      	ldrh	r2, [r7, #6]
 80040d8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e4:	d108      	bne.n	80040f8 <HAL_UART_Transmit+0x68>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d104      	bne.n	80040f8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80040ee:	2300      	movs	r3, #0
 80040f0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	e003      	b.n	8004100 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004100:	e02f      	b.n	8004162 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	2200      	movs	r2, #0
 800410a:	2180      	movs	r1, #128	@ 0x80
 800410c:	68f8      	ldr	r0, [r7, #12]
 800410e:	f000 fac9 	bl	80046a4 <UART_WaitOnFlagUntilTimeout>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d004      	beq.n	8004122 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	2220      	movs	r2, #32
 800411c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800411e:	2303      	movs	r3, #3
 8004120:	e03b      	b.n	800419a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004122:	69fb      	ldr	r3, [r7, #28]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10b      	bne.n	8004140 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	881a      	ldrh	r2, [r3, #0]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004134:	b292      	uxth	r2, r2
 8004136:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	3302      	adds	r3, #2
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	e007      	b.n	8004150 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	781a      	ldrb	r2, [r3, #0]
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	3301      	adds	r3, #1
 800414e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004168:	b29b      	uxth	r3, r3
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1c9      	bne.n	8004102 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	9300      	str	r3, [sp, #0]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	2200      	movs	r2, #0
 8004176:	2140      	movs	r1, #64	@ 0x40
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 fa93 	bl	80046a4 <UART_WaitOnFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d004      	beq.n	800418e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2220      	movs	r2, #32
 8004188:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e005      	b.n	800419a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2220      	movs	r2, #32
 8004192:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004194:	2300      	movs	r3, #0
 8004196:	e000      	b.n	800419a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004198:	2302      	movs	r3, #2
  }
}
 800419a:	4618      	mov	r0, r3
 800419c:	3720      	adds	r7, #32
 800419e:	46bd      	mov	sp, r7
 80041a0:	bd80      	pop	{r7, pc}
	...

080041a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b088      	sub	sp, #32
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	689a      	ldr	r2, [r3, #8]
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	431a      	orrs	r2, r3
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69db      	ldr	r3, [r3, #28]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	4b8a      	ldr	r3, [pc, #552]	@ (80043f8 <UART_SetConfig+0x254>)
 80041d0:	4013      	ands	r3, r2
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	6812      	ldr	r2, [r2, #0]
 80041d6:	6979      	ldr	r1, [r7, #20]
 80041d8:	430b      	orrs	r3, r1
 80041da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685b      	ldr	r3, [r3, #4]
 80041e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	68da      	ldr	r2, [r3, #12]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	697a      	ldr	r2, [r7, #20]
 80041fe:	4313      	orrs	r3, r2
 8004200:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	689b      	ldr	r3, [r3, #8]
 8004208:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	697a      	ldr	r2, [r7, #20]
 8004212:	430a      	orrs	r2, r1
 8004214:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a78      	ldr	r2, [pc, #480]	@ (80043fc <UART_SetConfig+0x258>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d120      	bne.n	8004262 <UART_SetConfig+0xbe>
 8004220:	4b77      	ldr	r3, [pc, #476]	@ (8004400 <UART_SetConfig+0x25c>)
 8004222:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004224:	f003 0303 	and.w	r3, r3, #3
 8004228:	2b03      	cmp	r3, #3
 800422a:	d817      	bhi.n	800425c <UART_SetConfig+0xb8>
 800422c:	a201      	add	r2, pc, #4	@ (adr r2, 8004234 <UART_SetConfig+0x90>)
 800422e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004232:	bf00      	nop
 8004234:	08004245 	.word	0x08004245
 8004238:	08004251 	.word	0x08004251
 800423c:	08004257 	.word	0x08004257
 8004240:	0800424b 	.word	0x0800424b
 8004244:	2300      	movs	r3, #0
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e01d      	b.n	8004286 <UART_SetConfig+0xe2>
 800424a:	2302      	movs	r3, #2
 800424c:	77fb      	strb	r3, [r7, #31]
 800424e:	e01a      	b.n	8004286 <UART_SetConfig+0xe2>
 8004250:	2304      	movs	r3, #4
 8004252:	77fb      	strb	r3, [r7, #31]
 8004254:	e017      	b.n	8004286 <UART_SetConfig+0xe2>
 8004256:	2308      	movs	r3, #8
 8004258:	77fb      	strb	r3, [r7, #31]
 800425a:	e014      	b.n	8004286 <UART_SetConfig+0xe2>
 800425c:	2310      	movs	r3, #16
 800425e:	77fb      	strb	r3, [r7, #31]
 8004260:	e011      	b.n	8004286 <UART_SetConfig+0xe2>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	4a67      	ldr	r2, [pc, #412]	@ (8004404 <UART_SetConfig+0x260>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d102      	bne.n	8004272 <UART_SetConfig+0xce>
 800426c:	2300      	movs	r3, #0
 800426e:	77fb      	strb	r3, [r7, #31]
 8004270:	e009      	b.n	8004286 <UART_SetConfig+0xe2>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a64      	ldr	r2, [pc, #400]	@ (8004408 <UART_SetConfig+0x264>)
 8004278:	4293      	cmp	r3, r2
 800427a:	d102      	bne.n	8004282 <UART_SetConfig+0xde>
 800427c:	2300      	movs	r3, #0
 800427e:	77fb      	strb	r3, [r7, #31]
 8004280:	e001      	b.n	8004286 <UART_SetConfig+0xe2>
 8004282:	2310      	movs	r3, #16
 8004284:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	69db      	ldr	r3, [r3, #28]
 800428a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800428e:	d15a      	bne.n	8004346 <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8004290:	7ffb      	ldrb	r3, [r7, #31]
 8004292:	2b08      	cmp	r3, #8
 8004294:	d827      	bhi.n	80042e6 <UART_SetConfig+0x142>
 8004296:	a201      	add	r2, pc, #4	@ (adr r2, 800429c <UART_SetConfig+0xf8>)
 8004298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800429c:	080042c1 	.word	0x080042c1
 80042a0:	080042c9 	.word	0x080042c9
 80042a4:	080042d1 	.word	0x080042d1
 80042a8:	080042e7 	.word	0x080042e7
 80042ac:	080042d7 	.word	0x080042d7
 80042b0:	080042e7 	.word	0x080042e7
 80042b4:	080042e7 	.word	0x080042e7
 80042b8:	080042e7 	.word	0x080042e7
 80042bc:	080042df 	.word	0x080042df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042c0:	f7ff fcc2 	bl	8003c48 <HAL_RCC_GetPCLK1Freq>
 80042c4:	61b8      	str	r0, [r7, #24]
        break;
 80042c6:	e013      	b.n	80042f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042c8:	f7ff fce0 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 80042cc:	61b8      	str	r0, [r7, #24]
        break;
 80042ce:	e00f      	b.n	80042f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042d0:	4b4e      	ldr	r3, [pc, #312]	@ (800440c <UART_SetConfig+0x268>)
 80042d2:	61bb      	str	r3, [r7, #24]
        break;
 80042d4:	e00c      	b.n	80042f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042d6:	f7ff fc57 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 80042da:	61b8      	str	r0, [r7, #24]
        break;
 80042dc:	e008      	b.n	80042f0 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042de:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042e2:	61bb      	str	r3, [r7, #24]
        break;
 80042e4:	e004      	b.n	80042f0 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	77bb      	strb	r3, [r7, #30]
        break;
 80042ee:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d074      	beq.n	80043e0 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	005a      	lsls	r2, r3, #1
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	085b      	lsrs	r3, r3, #1
 8004300:	441a      	add	r2, r3
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	fbb2 f3f3 	udiv	r3, r2, r3
 800430a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	2b0f      	cmp	r3, #15
 8004310:	d916      	bls.n	8004340 <UART_SetConfig+0x19c>
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004318:	d212      	bcs.n	8004340 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800431a:	693b      	ldr	r3, [r7, #16]
 800431c:	b29b      	uxth	r3, r3
 800431e:	f023 030f 	bic.w	r3, r3, #15
 8004322:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	085b      	lsrs	r3, r3, #1
 8004328:	b29b      	uxth	r3, r3
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	b29a      	uxth	r2, r3
 8004330:	89fb      	ldrh	r3, [r7, #14]
 8004332:	4313      	orrs	r3, r2
 8004334:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	89fa      	ldrh	r2, [r7, #14]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	e04f      	b.n	80043e0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004340:	2301      	movs	r3, #1
 8004342:	77bb      	strb	r3, [r7, #30]
 8004344:	e04c      	b.n	80043e0 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004346:	7ffb      	ldrb	r3, [r7, #31]
 8004348:	2b08      	cmp	r3, #8
 800434a:	d828      	bhi.n	800439e <UART_SetConfig+0x1fa>
 800434c:	a201      	add	r2, pc, #4	@ (adr r2, 8004354 <UART_SetConfig+0x1b0>)
 800434e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004352:	bf00      	nop
 8004354:	08004379 	.word	0x08004379
 8004358:	08004381 	.word	0x08004381
 800435c:	08004389 	.word	0x08004389
 8004360:	0800439f 	.word	0x0800439f
 8004364:	0800438f 	.word	0x0800438f
 8004368:	0800439f 	.word	0x0800439f
 800436c:	0800439f 	.word	0x0800439f
 8004370:	0800439f 	.word	0x0800439f
 8004374:	08004397 	.word	0x08004397
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004378:	f7ff fc66 	bl	8003c48 <HAL_RCC_GetPCLK1Freq>
 800437c:	61b8      	str	r0, [r7, #24]
        break;
 800437e:	e013      	b.n	80043a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004380:	f7ff fc84 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 8004384:	61b8      	str	r0, [r7, #24]
        break;
 8004386:	e00f      	b.n	80043a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004388:	4b20      	ldr	r3, [pc, #128]	@ (800440c <UART_SetConfig+0x268>)
 800438a:	61bb      	str	r3, [r7, #24]
        break;
 800438c:	e00c      	b.n	80043a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800438e:	f7ff fbfb 	bl	8003b88 <HAL_RCC_GetSysClockFreq>
 8004392:	61b8      	str	r0, [r7, #24]
        break;
 8004394:	e008      	b.n	80043a8 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004396:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800439a:	61bb      	str	r3, [r7, #24]
        break;
 800439c:	e004      	b.n	80043a8 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800439e:	2300      	movs	r3, #0
 80043a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	77bb      	strb	r3, [r7, #30]
        break;
 80043a6:	bf00      	nop
    }

    if (pclk != 0U)
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d018      	beq.n	80043e0 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	085a      	lsrs	r2, r3, #1
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	441a      	add	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b0f      	cmp	r3, #15
 80043c6:	d909      	bls.n	80043dc <UART_SetConfig+0x238>
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80043ce:	d205      	bcs.n	80043dc <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	b29a      	uxth	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	60da      	str	r2, [r3, #12]
 80043da:	e001      	b.n	80043e0 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80043ec:	7fbb      	ldrb	r3, [r7, #30]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3720      	adds	r7, #32
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	efff69f3 	.word	0xefff69f3
 80043fc:	40013800 	.word	0x40013800
 8004400:	40021000 	.word	0x40021000
 8004404:	40004400 	.word	0x40004400
 8004408:	40004800 	.word	0x40004800
 800440c:	007a1200 	.word	0x007a1200

08004410 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800441c:	f003 0308 	and.w	r3, r3, #8
 8004420:	2b00      	cmp	r3, #0
 8004422:	d00a      	beq.n	800443a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	685b      	ldr	r3, [r3, #4]
 800442a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800443e:	f003 0301 	and.w	r3, r3, #1
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00a      	beq.n	800445c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	430a      	orrs	r2, r1
 800445a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004482:	f003 0304 	and.w	r3, r3, #4
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044a4:	f003 0310 	and.w	r3, r3, #16
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	689b      	ldr	r3, [r3, #8]
 80044b2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c6:	f003 0320 	and.w	r3, r3, #32
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d01a      	beq.n	8004526 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800450e:	d10a      	bne.n	8004526 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	430a      	orrs	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800452a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800452e:	2b00      	cmp	r3, #0
 8004530:	d00a      	beq.n	8004548 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	685b      	ldr	r3, [r3, #4]
 8004538:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	430a      	orrs	r2, r1
 8004546:	605a      	str	r2, [r3, #4]
  }
}
 8004548:	bf00      	nop
 800454a:	370c      	adds	r7, #12
 800454c:	46bd      	mov	sp, r7
 800454e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004552:	4770      	bx	lr

08004554 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b098      	sub	sp, #96	@ 0x60
 8004558:	af02      	add	r7, sp, #8
 800455a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004564:	f7fc fff2 	bl	800154c <HAL_GetTick>
 8004568:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0308 	and.w	r3, r3, #8
 8004574:	2b08      	cmp	r3, #8
 8004576:	d12e      	bne.n	80045d6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004578:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004580:	2200      	movs	r2, #0
 8004582:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f88c 	bl	80046a4 <UART_WaitOnFlagUntilTimeout>
 800458c:	4603      	mov	r3, r0
 800458e:	2b00      	cmp	r3, #0
 8004590:	d021      	beq.n	80045d6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800459a:	e853 3f00 	ldrex	r3, [r3]
 800459e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80045a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	461a      	mov	r2, r3
 80045ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80045b2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80045b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80045be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e6      	bne.n	8004592 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045d2:	2303      	movs	r3, #3
 80045d4:	e062      	b.n	800469c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0304 	and.w	r3, r3, #4
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d149      	bne.n	8004678 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ec:	2200      	movs	r2, #0
 80045ee:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f856 	bl	80046a4 <UART_WaitOnFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d03c      	beq.n	8004678 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	623b      	str	r3, [r7, #32]
   return(result);
 800460c:	6a3b      	ldr	r3, [r7, #32]
 800460e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004612:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800461c:	633b      	str	r3, [r7, #48]	@ 0x30
 800461e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004622:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800462a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e6      	bne.n	80045fe <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	3308      	adds	r3, #8
 8004636:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004638:	693b      	ldr	r3, [r7, #16]
 800463a:	e853 3f00 	ldrex	r3, [r3]
 800463e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	f023 0301 	bic.w	r3, r3, #1
 8004646:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	3308      	adds	r3, #8
 800464e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004650:	61fa      	str	r2, [r7, #28]
 8004652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004654:	69b9      	ldr	r1, [r7, #24]
 8004656:	69fa      	ldr	r2, [r7, #28]
 8004658:	e841 2300 	strex	r3, r2, [r1]
 800465c:	617b      	str	r3, [r7, #20]
   return(result);
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d1e5      	bne.n	8004630 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2220      	movs	r2, #32
 8004668:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004674:	2303      	movs	r3, #3
 8004676:	e011      	b.n	800469c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2220      	movs	r2, #32
 800467c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2220      	movs	r2, #32
 8004682:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2200      	movs	r2, #0
 800468a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2200      	movs	r2, #0
 8004696:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800469a:	2300      	movs	r3, #0
}
 800469c:	4618      	mov	r0, r3
 800469e:	3758      	adds	r7, #88	@ 0x58
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	603b      	str	r3, [r7, #0]
 80046b0:	4613      	mov	r3, r2
 80046b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80046b4:	e04f      	b.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046b6:	69bb      	ldr	r3, [r7, #24]
 80046b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046bc:	d04b      	beq.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046be:	f7fc ff45 	bl	800154c <HAL_GetTick>
 80046c2:	4602      	mov	r2, r0
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	1ad3      	subs	r3, r2, r3
 80046c8:	69ba      	ldr	r2, [r7, #24]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d302      	bcc.n	80046d4 <UART_WaitOnFlagUntilTimeout+0x30>
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80046d4:	2303      	movs	r3, #3
 80046d6:	e04e      	b.n	8004776 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0304 	and.w	r3, r3, #4
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d037      	beq.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb2>
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	2b80      	cmp	r3, #128	@ 0x80
 80046ea:	d034      	beq.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb2>
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	2b40      	cmp	r3, #64	@ 0x40
 80046f0:	d031      	beq.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d110      	bne.n	8004722 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	2208      	movs	r2, #8
 8004706:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004708:	68f8      	ldr	r0, [r7, #12]
 800470a:	f000 f838 	bl	800477e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	2208      	movs	r2, #8
 8004712:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e029      	b.n	8004776 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800472c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004730:	d111      	bne.n	8004756 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800473a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f81e 	bl	800477e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2220      	movs	r2, #32
 8004746:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004752:	2303      	movs	r3, #3
 8004754:	e00f      	b.n	8004776 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	69da      	ldr	r2, [r3, #28]
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	4013      	ands	r3, r2
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	429a      	cmp	r2, r3
 8004764:	bf0c      	ite	eq
 8004766:	2301      	moveq	r3, #1
 8004768:	2300      	movne	r3, #0
 800476a:	b2db      	uxtb	r3, r3
 800476c:	461a      	mov	r2, r3
 800476e:	79fb      	ldrb	r3, [r7, #7]
 8004770:	429a      	cmp	r2, r3
 8004772:	d0a0      	beq.n	80046b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004774:	2300      	movs	r3, #0
}
 8004776:	4618      	mov	r0, r3
 8004778:	3710      	adds	r7, #16
 800477a:	46bd      	mov	sp, r7
 800477c:	bd80      	pop	{r7, pc}

0800477e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800477e:	b480      	push	{r7}
 8004780:	b095      	sub	sp, #84	@ 0x54
 8004782:	af00      	add	r7, sp, #0
 8004784:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800478c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800478e:	e853 3f00 	ldrex	r3, [r3]
 8004792:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004794:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004796:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800479a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	461a      	mov	r2, r3
 80047a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80047a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80047a6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80047aa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80047ac:	e841 2300 	strex	r3, r2, [r1]
 80047b0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80047b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d1e6      	bne.n	8004786 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	3308      	adds	r3, #8
 80047be:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047c0:	6a3b      	ldr	r3, [r7, #32]
 80047c2:	e853 3f00 	ldrex	r3, [r3]
 80047c6:	61fb      	str	r3, [r7, #28]
   return(result);
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f023 0301 	bic.w	r3, r3, #1
 80047ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	3308      	adds	r3, #8
 80047d6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80047d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80047da:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047dc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80047de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047e0:	e841 2300 	strex	r3, r2, [r1]
 80047e4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80047e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d1e5      	bne.n	80047b8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047f0:	2b01      	cmp	r3, #1
 80047f2:	d118      	bne.n	8004826 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	e853 3f00 	ldrex	r3, [r3]
 8004800:	60bb      	str	r3, [r7, #8]
   return(result);
 8004802:	68bb      	ldr	r3, [r7, #8]
 8004804:	f023 0310 	bic.w	r3, r3, #16
 8004808:	647b      	str	r3, [r7, #68]	@ 0x44
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	461a      	mov	r2, r3
 8004810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004812:	61bb      	str	r3, [r7, #24]
 8004814:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004816:	6979      	ldr	r1, [r7, #20]
 8004818:	69ba      	ldr	r2, [r7, #24]
 800481a:	e841 2300 	strex	r3, r2, [r1]
 800481e:	613b      	str	r3, [r7, #16]
   return(result);
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d1e6      	bne.n	80047f4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	2220      	movs	r2, #32
 800482a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800483a:	bf00      	nop
 800483c:	3754      	adds	r7, #84	@ 0x54
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <__cvt>:
 8004846:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800484a:	ec57 6b10 	vmov	r6, r7, d0
 800484e:	2f00      	cmp	r7, #0
 8004850:	460c      	mov	r4, r1
 8004852:	4619      	mov	r1, r3
 8004854:	463b      	mov	r3, r7
 8004856:	bfbb      	ittet	lt
 8004858:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800485c:	461f      	movlt	r7, r3
 800485e:	2300      	movge	r3, #0
 8004860:	232d      	movlt	r3, #45	@ 0x2d
 8004862:	700b      	strb	r3, [r1, #0]
 8004864:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004866:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800486a:	4691      	mov	r9, r2
 800486c:	f023 0820 	bic.w	r8, r3, #32
 8004870:	bfbc      	itt	lt
 8004872:	4632      	movlt	r2, r6
 8004874:	4616      	movlt	r6, r2
 8004876:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800487a:	d005      	beq.n	8004888 <__cvt+0x42>
 800487c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004880:	d100      	bne.n	8004884 <__cvt+0x3e>
 8004882:	3401      	adds	r4, #1
 8004884:	2102      	movs	r1, #2
 8004886:	e000      	b.n	800488a <__cvt+0x44>
 8004888:	2103      	movs	r1, #3
 800488a:	ab03      	add	r3, sp, #12
 800488c:	9301      	str	r3, [sp, #4]
 800488e:	ab02      	add	r3, sp, #8
 8004890:	9300      	str	r3, [sp, #0]
 8004892:	ec47 6b10 	vmov	d0, r6, r7
 8004896:	4653      	mov	r3, sl
 8004898:	4622      	mov	r2, r4
 800489a:	f001 f875 	bl	8005988 <_dtoa_r>
 800489e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80048a2:	4605      	mov	r5, r0
 80048a4:	d119      	bne.n	80048da <__cvt+0x94>
 80048a6:	f019 0f01 	tst.w	r9, #1
 80048aa:	d00e      	beq.n	80048ca <__cvt+0x84>
 80048ac:	eb00 0904 	add.w	r9, r0, r4
 80048b0:	2200      	movs	r2, #0
 80048b2:	2300      	movs	r3, #0
 80048b4:	4630      	mov	r0, r6
 80048b6:	4639      	mov	r1, r7
 80048b8:	f7fc f906 	bl	8000ac8 <__aeabi_dcmpeq>
 80048bc:	b108      	cbz	r0, 80048c2 <__cvt+0x7c>
 80048be:	f8cd 900c 	str.w	r9, [sp, #12]
 80048c2:	2230      	movs	r2, #48	@ 0x30
 80048c4:	9b03      	ldr	r3, [sp, #12]
 80048c6:	454b      	cmp	r3, r9
 80048c8:	d31e      	bcc.n	8004908 <__cvt+0xc2>
 80048ca:	9b03      	ldr	r3, [sp, #12]
 80048cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80048ce:	1b5b      	subs	r3, r3, r5
 80048d0:	4628      	mov	r0, r5
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	b004      	add	sp, #16
 80048d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048da:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80048de:	eb00 0904 	add.w	r9, r0, r4
 80048e2:	d1e5      	bne.n	80048b0 <__cvt+0x6a>
 80048e4:	7803      	ldrb	r3, [r0, #0]
 80048e6:	2b30      	cmp	r3, #48	@ 0x30
 80048e8:	d10a      	bne.n	8004900 <__cvt+0xba>
 80048ea:	2200      	movs	r2, #0
 80048ec:	2300      	movs	r3, #0
 80048ee:	4630      	mov	r0, r6
 80048f0:	4639      	mov	r1, r7
 80048f2:	f7fc f8e9 	bl	8000ac8 <__aeabi_dcmpeq>
 80048f6:	b918      	cbnz	r0, 8004900 <__cvt+0xba>
 80048f8:	f1c4 0401 	rsb	r4, r4, #1
 80048fc:	f8ca 4000 	str.w	r4, [sl]
 8004900:	f8da 3000 	ldr.w	r3, [sl]
 8004904:	4499      	add	r9, r3
 8004906:	e7d3      	b.n	80048b0 <__cvt+0x6a>
 8004908:	1c59      	adds	r1, r3, #1
 800490a:	9103      	str	r1, [sp, #12]
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	e7d9      	b.n	80048c4 <__cvt+0x7e>

08004910 <__exponent>:
 8004910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004912:	2900      	cmp	r1, #0
 8004914:	bfba      	itte	lt
 8004916:	4249      	neglt	r1, r1
 8004918:	232d      	movlt	r3, #45	@ 0x2d
 800491a:	232b      	movge	r3, #43	@ 0x2b
 800491c:	2909      	cmp	r1, #9
 800491e:	7002      	strb	r2, [r0, #0]
 8004920:	7043      	strb	r3, [r0, #1]
 8004922:	dd29      	ble.n	8004978 <__exponent+0x68>
 8004924:	f10d 0307 	add.w	r3, sp, #7
 8004928:	461d      	mov	r5, r3
 800492a:	270a      	movs	r7, #10
 800492c:	461a      	mov	r2, r3
 800492e:	fbb1 f6f7 	udiv	r6, r1, r7
 8004932:	fb07 1416 	mls	r4, r7, r6, r1
 8004936:	3430      	adds	r4, #48	@ 0x30
 8004938:	f802 4c01 	strb.w	r4, [r2, #-1]
 800493c:	460c      	mov	r4, r1
 800493e:	2c63      	cmp	r4, #99	@ 0x63
 8004940:	f103 33ff 	add.w	r3, r3, #4294967295
 8004944:	4631      	mov	r1, r6
 8004946:	dcf1      	bgt.n	800492c <__exponent+0x1c>
 8004948:	3130      	adds	r1, #48	@ 0x30
 800494a:	1e94      	subs	r4, r2, #2
 800494c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004950:	1c41      	adds	r1, r0, #1
 8004952:	4623      	mov	r3, r4
 8004954:	42ab      	cmp	r3, r5
 8004956:	d30a      	bcc.n	800496e <__exponent+0x5e>
 8004958:	f10d 0309 	add.w	r3, sp, #9
 800495c:	1a9b      	subs	r3, r3, r2
 800495e:	42ac      	cmp	r4, r5
 8004960:	bf88      	it	hi
 8004962:	2300      	movhi	r3, #0
 8004964:	3302      	adds	r3, #2
 8004966:	4403      	add	r3, r0
 8004968:	1a18      	subs	r0, r3, r0
 800496a:	b003      	add	sp, #12
 800496c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800496e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004972:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004976:	e7ed      	b.n	8004954 <__exponent+0x44>
 8004978:	2330      	movs	r3, #48	@ 0x30
 800497a:	3130      	adds	r1, #48	@ 0x30
 800497c:	7083      	strb	r3, [r0, #2]
 800497e:	70c1      	strb	r1, [r0, #3]
 8004980:	1d03      	adds	r3, r0, #4
 8004982:	e7f1      	b.n	8004968 <__exponent+0x58>

08004984 <_printf_float>:
 8004984:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004988:	b08d      	sub	sp, #52	@ 0x34
 800498a:	460c      	mov	r4, r1
 800498c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004990:	4616      	mov	r6, r2
 8004992:	461f      	mov	r7, r3
 8004994:	4605      	mov	r5, r0
 8004996:	f000 feef 	bl	8005778 <_localeconv_r>
 800499a:	6803      	ldr	r3, [r0, #0]
 800499c:	9304      	str	r3, [sp, #16]
 800499e:	4618      	mov	r0, r3
 80049a0:	f7fb fc66 	bl	8000270 <strlen>
 80049a4:	2300      	movs	r3, #0
 80049a6:	930a      	str	r3, [sp, #40]	@ 0x28
 80049a8:	f8d8 3000 	ldr.w	r3, [r8]
 80049ac:	9005      	str	r0, [sp, #20]
 80049ae:	3307      	adds	r3, #7
 80049b0:	f023 0307 	bic.w	r3, r3, #7
 80049b4:	f103 0208 	add.w	r2, r3, #8
 80049b8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80049bc:	f8d4 b000 	ldr.w	fp, [r4]
 80049c0:	f8c8 2000 	str.w	r2, [r8]
 80049c4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80049c8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80049cc:	9307      	str	r3, [sp, #28]
 80049ce:	f8cd 8018 	str.w	r8, [sp, #24]
 80049d2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80049d6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049da:	4b9c      	ldr	r3, [pc, #624]	@ (8004c4c <_printf_float+0x2c8>)
 80049dc:	f04f 32ff 	mov.w	r2, #4294967295
 80049e0:	f7fc f8a4 	bl	8000b2c <__aeabi_dcmpun>
 80049e4:	bb70      	cbnz	r0, 8004a44 <_printf_float+0xc0>
 80049e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80049ea:	4b98      	ldr	r3, [pc, #608]	@ (8004c4c <_printf_float+0x2c8>)
 80049ec:	f04f 32ff 	mov.w	r2, #4294967295
 80049f0:	f7fc f87e 	bl	8000af0 <__aeabi_dcmple>
 80049f4:	bb30      	cbnz	r0, 8004a44 <_printf_float+0xc0>
 80049f6:	2200      	movs	r2, #0
 80049f8:	2300      	movs	r3, #0
 80049fa:	4640      	mov	r0, r8
 80049fc:	4649      	mov	r1, r9
 80049fe:	f7fc f86d 	bl	8000adc <__aeabi_dcmplt>
 8004a02:	b110      	cbz	r0, 8004a0a <_printf_float+0x86>
 8004a04:	232d      	movs	r3, #45	@ 0x2d
 8004a06:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a0a:	4a91      	ldr	r2, [pc, #580]	@ (8004c50 <_printf_float+0x2cc>)
 8004a0c:	4b91      	ldr	r3, [pc, #580]	@ (8004c54 <_printf_float+0x2d0>)
 8004a0e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004a12:	bf94      	ite	ls
 8004a14:	4690      	movls	r8, r2
 8004a16:	4698      	movhi	r8, r3
 8004a18:	2303      	movs	r3, #3
 8004a1a:	6123      	str	r3, [r4, #16]
 8004a1c:	f02b 0304 	bic.w	r3, fp, #4
 8004a20:	6023      	str	r3, [r4, #0]
 8004a22:	f04f 0900 	mov.w	r9, #0
 8004a26:	9700      	str	r7, [sp, #0]
 8004a28:	4633      	mov	r3, r6
 8004a2a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004a2c:	4621      	mov	r1, r4
 8004a2e:	4628      	mov	r0, r5
 8004a30:	f000 f9d2 	bl	8004dd8 <_printf_common>
 8004a34:	3001      	adds	r0, #1
 8004a36:	f040 808d 	bne.w	8004b54 <_printf_float+0x1d0>
 8004a3a:	f04f 30ff 	mov.w	r0, #4294967295
 8004a3e:	b00d      	add	sp, #52	@ 0x34
 8004a40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a44:	4642      	mov	r2, r8
 8004a46:	464b      	mov	r3, r9
 8004a48:	4640      	mov	r0, r8
 8004a4a:	4649      	mov	r1, r9
 8004a4c:	f7fc f86e 	bl	8000b2c <__aeabi_dcmpun>
 8004a50:	b140      	cbz	r0, 8004a64 <_printf_float+0xe0>
 8004a52:	464b      	mov	r3, r9
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	bfbc      	itt	lt
 8004a58:	232d      	movlt	r3, #45	@ 0x2d
 8004a5a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004a5e:	4a7e      	ldr	r2, [pc, #504]	@ (8004c58 <_printf_float+0x2d4>)
 8004a60:	4b7e      	ldr	r3, [pc, #504]	@ (8004c5c <_printf_float+0x2d8>)
 8004a62:	e7d4      	b.n	8004a0e <_printf_float+0x8a>
 8004a64:	6863      	ldr	r3, [r4, #4]
 8004a66:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004a6a:	9206      	str	r2, [sp, #24]
 8004a6c:	1c5a      	adds	r2, r3, #1
 8004a6e:	d13b      	bne.n	8004ae8 <_printf_float+0x164>
 8004a70:	2306      	movs	r3, #6
 8004a72:	6063      	str	r3, [r4, #4]
 8004a74:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004a78:	2300      	movs	r3, #0
 8004a7a:	6022      	str	r2, [r4, #0]
 8004a7c:	9303      	str	r3, [sp, #12]
 8004a7e:	ab0a      	add	r3, sp, #40	@ 0x28
 8004a80:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004a84:	ab09      	add	r3, sp, #36	@ 0x24
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	6861      	ldr	r1, [r4, #4]
 8004a8a:	ec49 8b10 	vmov	d0, r8, r9
 8004a8e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004a92:	4628      	mov	r0, r5
 8004a94:	f7ff fed7 	bl	8004846 <__cvt>
 8004a98:	9b06      	ldr	r3, [sp, #24]
 8004a9a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004a9c:	2b47      	cmp	r3, #71	@ 0x47
 8004a9e:	4680      	mov	r8, r0
 8004aa0:	d129      	bne.n	8004af6 <_printf_float+0x172>
 8004aa2:	1cc8      	adds	r0, r1, #3
 8004aa4:	db02      	blt.n	8004aac <_printf_float+0x128>
 8004aa6:	6863      	ldr	r3, [r4, #4]
 8004aa8:	4299      	cmp	r1, r3
 8004aaa:	dd41      	ble.n	8004b30 <_printf_float+0x1ac>
 8004aac:	f1aa 0a02 	sub.w	sl, sl, #2
 8004ab0:	fa5f fa8a 	uxtb.w	sl, sl
 8004ab4:	3901      	subs	r1, #1
 8004ab6:	4652      	mov	r2, sl
 8004ab8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004abc:	9109      	str	r1, [sp, #36]	@ 0x24
 8004abe:	f7ff ff27 	bl	8004910 <__exponent>
 8004ac2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004ac4:	1813      	adds	r3, r2, r0
 8004ac6:	2a01      	cmp	r2, #1
 8004ac8:	4681      	mov	r9, r0
 8004aca:	6123      	str	r3, [r4, #16]
 8004acc:	dc02      	bgt.n	8004ad4 <_printf_float+0x150>
 8004ace:	6822      	ldr	r2, [r4, #0]
 8004ad0:	07d2      	lsls	r2, r2, #31
 8004ad2:	d501      	bpl.n	8004ad8 <_printf_float+0x154>
 8004ad4:	3301      	adds	r3, #1
 8004ad6:	6123      	str	r3, [r4, #16]
 8004ad8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d0a2      	beq.n	8004a26 <_printf_float+0xa2>
 8004ae0:	232d      	movs	r3, #45	@ 0x2d
 8004ae2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004ae6:	e79e      	b.n	8004a26 <_printf_float+0xa2>
 8004ae8:	9a06      	ldr	r2, [sp, #24]
 8004aea:	2a47      	cmp	r2, #71	@ 0x47
 8004aec:	d1c2      	bne.n	8004a74 <_printf_float+0xf0>
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1c0      	bne.n	8004a74 <_printf_float+0xf0>
 8004af2:	2301      	movs	r3, #1
 8004af4:	e7bd      	b.n	8004a72 <_printf_float+0xee>
 8004af6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004afa:	d9db      	bls.n	8004ab4 <_printf_float+0x130>
 8004afc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004b00:	d118      	bne.n	8004b34 <_printf_float+0x1b0>
 8004b02:	2900      	cmp	r1, #0
 8004b04:	6863      	ldr	r3, [r4, #4]
 8004b06:	dd0b      	ble.n	8004b20 <_printf_float+0x19c>
 8004b08:	6121      	str	r1, [r4, #16]
 8004b0a:	b913      	cbnz	r3, 8004b12 <_printf_float+0x18e>
 8004b0c:	6822      	ldr	r2, [r4, #0]
 8004b0e:	07d0      	lsls	r0, r2, #31
 8004b10:	d502      	bpl.n	8004b18 <_printf_float+0x194>
 8004b12:	3301      	adds	r3, #1
 8004b14:	440b      	add	r3, r1
 8004b16:	6123      	str	r3, [r4, #16]
 8004b18:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004b1a:	f04f 0900 	mov.w	r9, #0
 8004b1e:	e7db      	b.n	8004ad8 <_printf_float+0x154>
 8004b20:	b913      	cbnz	r3, 8004b28 <_printf_float+0x1a4>
 8004b22:	6822      	ldr	r2, [r4, #0]
 8004b24:	07d2      	lsls	r2, r2, #31
 8004b26:	d501      	bpl.n	8004b2c <_printf_float+0x1a8>
 8004b28:	3302      	adds	r3, #2
 8004b2a:	e7f4      	b.n	8004b16 <_printf_float+0x192>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e7f2      	b.n	8004b16 <_printf_float+0x192>
 8004b30:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004b34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004b36:	4299      	cmp	r1, r3
 8004b38:	db05      	blt.n	8004b46 <_printf_float+0x1c2>
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	6121      	str	r1, [r4, #16]
 8004b3e:	07d8      	lsls	r0, r3, #31
 8004b40:	d5ea      	bpl.n	8004b18 <_printf_float+0x194>
 8004b42:	1c4b      	adds	r3, r1, #1
 8004b44:	e7e7      	b.n	8004b16 <_printf_float+0x192>
 8004b46:	2900      	cmp	r1, #0
 8004b48:	bfd4      	ite	le
 8004b4a:	f1c1 0202 	rsble	r2, r1, #2
 8004b4e:	2201      	movgt	r2, #1
 8004b50:	4413      	add	r3, r2
 8004b52:	e7e0      	b.n	8004b16 <_printf_float+0x192>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	055a      	lsls	r2, r3, #21
 8004b58:	d407      	bmi.n	8004b6a <_printf_float+0x1e6>
 8004b5a:	6923      	ldr	r3, [r4, #16]
 8004b5c:	4642      	mov	r2, r8
 8004b5e:	4631      	mov	r1, r6
 8004b60:	4628      	mov	r0, r5
 8004b62:	47b8      	blx	r7
 8004b64:	3001      	adds	r0, #1
 8004b66:	d12b      	bne.n	8004bc0 <_printf_float+0x23c>
 8004b68:	e767      	b.n	8004a3a <_printf_float+0xb6>
 8004b6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004b6e:	f240 80dd 	bls.w	8004d2c <_printf_float+0x3a8>
 8004b72:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004b76:	2200      	movs	r2, #0
 8004b78:	2300      	movs	r3, #0
 8004b7a:	f7fb ffa5 	bl	8000ac8 <__aeabi_dcmpeq>
 8004b7e:	2800      	cmp	r0, #0
 8004b80:	d033      	beq.n	8004bea <_printf_float+0x266>
 8004b82:	4a37      	ldr	r2, [pc, #220]	@ (8004c60 <_printf_float+0x2dc>)
 8004b84:	2301      	movs	r3, #1
 8004b86:	4631      	mov	r1, r6
 8004b88:	4628      	mov	r0, r5
 8004b8a:	47b8      	blx	r7
 8004b8c:	3001      	adds	r0, #1
 8004b8e:	f43f af54 	beq.w	8004a3a <_printf_float+0xb6>
 8004b92:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004b96:	4543      	cmp	r3, r8
 8004b98:	db02      	blt.n	8004ba0 <_printf_float+0x21c>
 8004b9a:	6823      	ldr	r3, [r4, #0]
 8004b9c:	07d8      	lsls	r0, r3, #31
 8004b9e:	d50f      	bpl.n	8004bc0 <_printf_float+0x23c>
 8004ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ba4:	4631      	mov	r1, r6
 8004ba6:	4628      	mov	r0, r5
 8004ba8:	47b8      	blx	r7
 8004baa:	3001      	adds	r0, #1
 8004bac:	f43f af45 	beq.w	8004a3a <_printf_float+0xb6>
 8004bb0:	f04f 0900 	mov.w	r9, #0
 8004bb4:	f108 38ff 	add.w	r8, r8, #4294967295
 8004bb8:	f104 0a1a 	add.w	sl, r4, #26
 8004bbc:	45c8      	cmp	r8, r9
 8004bbe:	dc09      	bgt.n	8004bd4 <_printf_float+0x250>
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	079b      	lsls	r3, r3, #30
 8004bc4:	f100 8103 	bmi.w	8004dce <_printf_float+0x44a>
 8004bc8:	68e0      	ldr	r0, [r4, #12]
 8004bca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004bcc:	4298      	cmp	r0, r3
 8004bce:	bfb8      	it	lt
 8004bd0:	4618      	movlt	r0, r3
 8004bd2:	e734      	b.n	8004a3e <_printf_float+0xba>
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	4652      	mov	r2, sl
 8004bd8:	4631      	mov	r1, r6
 8004bda:	4628      	mov	r0, r5
 8004bdc:	47b8      	blx	r7
 8004bde:	3001      	adds	r0, #1
 8004be0:	f43f af2b 	beq.w	8004a3a <_printf_float+0xb6>
 8004be4:	f109 0901 	add.w	r9, r9, #1
 8004be8:	e7e8      	b.n	8004bbc <_printf_float+0x238>
 8004bea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	dc39      	bgt.n	8004c64 <_printf_float+0x2e0>
 8004bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8004c60 <_printf_float+0x2dc>)
 8004bf2:	2301      	movs	r3, #1
 8004bf4:	4631      	mov	r1, r6
 8004bf6:	4628      	mov	r0, r5
 8004bf8:	47b8      	blx	r7
 8004bfa:	3001      	adds	r0, #1
 8004bfc:	f43f af1d 	beq.w	8004a3a <_printf_float+0xb6>
 8004c00:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004c04:	ea59 0303 	orrs.w	r3, r9, r3
 8004c08:	d102      	bne.n	8004c10 <_printf_float+0x28c>
 8004c0a:	6823      	ldr	r3, [r4, #0]
 8004c0c:	07d9      	lsls	r1, r3, #31
 8004c0e:	d5d7      	bpl.n	8004bc0 <_printf_float+0x23c>
 8004c10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c14:	4631      	mov	r1, r6
 8004c16:	4628      	mov	r0, r5
 8004c18:	47b8      	blx	r7
 8004c1a:	3001      	adds	r0, #1
 8004c1c:	f43f af0d 	beq.w	8004a3a <_printf_float+0xb6>
 8004c20:	f04f 0a00 	mov.w	sl, #0
 8004c24:	f104 0b1a 	add.w	fp, r4, #26
 8004c28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c2a:	425b      	negs	r3, r3
 8004c2c:	4553      	cmp	r3, sl
 8004c2e:	dc01      	bgt.n	8004c34 <_printf_float+0x2b0>
 8004c30:	464b      	mov	r3, r9
 8004c32:	e793      	b.n	8004b5c <_printf_float+0x1d8>
 8004c34:	2301      	movs	r3, #1
 8004c36:	465a      	mov	r2, fp
 8004c38:	4631      	mov	r1, r6
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	47b8      	blx	r7
 8004c3e:	3001      	adds	r0, #1
 8004c40:	f43f aefb 	beq.w	8004a3a <_printf_float+0xb6>
 8004c44:	f10a 0a01 	add.w	sl, sl, #1
 8004c48:	e7ee      	b.n	8004c28 <_printf_float+0x2a4>
 8004c4a:	bf00      	nop
 8004c4c:	7fefffff 	.word	0x7fefffff
 8004c50:	08008f70 	.word	0x08008f70
 8004c54:	08008f74 	.word	0x08008f74
 8004c58:	08008f78 	.word	0x08008f78
 8004c5c:	08008f7c 	.word	0x08008f7c
 8004c60:	08008f80 	.word	0x08008f80
 8004c64:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c66:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004c6a:	4553      	cmp	r3, sl
 8004c6c:	bfa8      	it	ge
 8004c6e:	4653      	movge	r3, sl
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	4699      	mov	r9, r3
 8004c74:	dc36      	bgt.n	8004ce4 <_printf_float+0x360>
 8004c76:	f04f 0b00 	mov.w	fp, #0
 8004c7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004c7e:	f104 021a 	add.w	r2, r4, #26
 8004c82:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004c84:	9306      	str	r3, [sp, #24]
 8004c86:	eba3 0309 	sub.w	r3, r3, r9
 8004c8a:	455b      	cmp	r3, fp
 8004c8c:	dc31      	bgt.n	8004cf2 <_printf_float+0x36e>
 8004c8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c90:	459a      	cmp	sl, r3
 8004c92:	dc3a      	bgt.n	8004d0a <_printf_float+0x386>
 8004c94:	6823      	ldr	r3, [r4, #0]
 8004c96:	07da      	lsls	r2, r3, #31
 8004c98:	d437      	bmi.n	8004d0a <_printf_float+0x386>
 8004c9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c9c:	ebaa 0903 	sub.w	r9, sl, r3
 8004ca0:	9b06      	ldr	r3, [sp, #24]
 8004ca2:	ebaa 0303 	sub.w	r3, sl, r3
 8004ca6:	4599      	cmp	r9, r3
 8004ca8:	bfa8      	it	ge
 8004caa:	4699      	movge	r9, r3
 8004cac:	f1b9 0f00 	cmp.w	r9, #0
 8004cb0:	dc33      	bgt.n	8004d1a <_printf_float+0x396>
 8004cb2:	f04f 0800 	mov.w	r8, #0
 8004cb6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cba:	f104 0b1a 	add.w	fp, r4, #26
 8004cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004cc0:	ebaa 0303 	sub.w	r3, sl, r3
 8004cc4:	eba3 0309 	sub.w	r3, r3, r9
 8004cc8:	4543      	cmp	r3, r8
 8004cca:	f77f af79 	ble.w	8004bc0 <_printf_float+0x23c>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	465a      	mov	r2, fp
 8004cd2:	4631      	mov	r1, r6
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	47b8      	blx	r7
 8004cd8:	3001      	adds	r0, #1
 8004cda:	f43f aeae 	beq.w	8004a3a <_printf_float+0xb6>
 8004cde:	f108 0801 	add.w	r8, r8, #1
 8004ce2:	e7ec      	b.n	8004cbe <_printf_float+0x33a>
 8004ce4:	4642      	mov	r2, r8
 8004ce6:	4631      	mov	r1, r6
 8004ce8:	4628      	mov	r0, r5
 8004cea:	47b8      	blx	r7
 8004cec:	3001      	adds	r0, #1
 8004cee:	d1c2      	bne.n	8004c76 <_printf_float+0x2f2>
 8004cf0:	e6a3      	b.n	8004a3a <_printf_float+0xb6>
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	4631      	mov	r1, r6
 8004cf6:	4628      	mov	r0, r5
 8004cf8:	9206      	str	r2, [sp, #24]
 8004cfa:	47b8      	blx	r7
 8004cfc:	3001      	adds	r0, #1
 8004cfe:	f43f ae9c 	beq.w	8004a3a <_printf_float+0xb6>
 8004d02:	9a06      	ldr	r2, [sp, #24]
 8004d04:	f10b 0b01 	add.w	fp, fp, #1
 8004d08:	e7bb      	b.n	8004c82 <_printf_float+0x2fe>
 8004d0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d0e:	4631      	mov	r1, r6
 8004d10:	4628      	mov	r0, r5
 8004d12:	47b8      	blx	r7
 8004d14:	3001      	adds	r0, #1
 8004d16:	d1c0      	bne.n	8004c9a <_printf_float+0x316>
 8004d18:	e68f      	b.n	8004a3a <_printf_float+0xb6>
 8004d1a:	9a06      	ldr	r2, [sp, #24]
 8004d1c:	464b      	mov	r3, r9
 8004d1e:	4442      	add	r2, r8
 8004d20:	4631      	mov	r1, r6
 8004d22:	4628      	mov	r0, r5
 8004d24:	47b8      	blx	r7
 8004d26:	3001      	adds	r0, #1
 8004d28:	d1c3      	bne.n	8004cb2 <_printf_float+0x32e>
 8004d2a:	e686      	b.n	8004a3a <_printf_float+0xb6>
 8004d2c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004d30:	f1ba 0f01 	cmp.w	sl, #1
 8004d34:	dc01      	bgt.n	8004d3a <_printf_float+0x3b6>
 8004d36:	07db      	lsls	r3, r3, #31
 8004d38:	d536      	bpl.n	8004da8 <_printf_float+0x424>
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	4642      	mov	r2, r8
 8004d3e:	4631      	mov	r1, r6
 8004d40:	4628      	mov	r0, r5
 8004d42:	47b8      	blx	r7
 8004d44:	3001      	adds	r0, #1
 8004d46:	f43f ae78 	beq.w	8004a3a <_printf_float+0xb6>
 8004d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d4e:	4631      	mov	r1, r6
 8004d50:	4628      	mov	r0, r5
 8004d52:	47b8      	blx	r7
 8004d54:	3001      	adds	r0, #1
 8004d56:	f43f ae70 	beq.w	8004a3a <_printf_float+0xb6>
 8004d5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004d5e:	2200      	movs	r2, #0
 8004d60:	2300      	movs	r3, #0
 8004d62:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004d66:	f7fb feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8004d6a:	b9c0      	cbnz	r0, 8004d9e <_printf_float+0x41a>
 8004d6c:	4653      	mov	r3, sl
 8004d6e:	f108 0201 	add.w	r2, r8, #1
 8004d72:	4631      	mov	r1, r6
 8004d74:	4628      	mov	r0, r5
 8004d76:	47b8      	blx	r7
 8004d78:	3001      	adds	r0, #1
 8004d7a:	d10c      	bne.n	8004d96 <_printf_float+0x412>
 8004d7c:	e65d      	b.n	8004a3a <_printf_float+0xb6>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	465a      	mov	r2, fp
 8004d82:	4631      	mov	r1, r6
 8004d84:	4628      	mov	r0, r5
 8004d86:	47b8      	blx	r7
 8004d88:	3001      	adds	r0, #1
 8004d8a:	f43f ae56 	beq.w	8004a3a <_printf_float+0xb6>
 8004d8e:	f108 0801 	add.w	r8, r8, #1
 8004d92:	45d0      	cmp	r8, sl
 8004d94:	dbf3      	blt.n	8004d7e <_printf_float+0x3fa>
 8004d96:	464b      	mov	r3, r9
 8004d98:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004d9c:	e6df      	b.n	8004b5e <_printf_float+0x1da>
 8004d9e:	f04f 0800 	mov.w	r8, #0
 8004da2:	f104 0b1a 	add.w	fp, r4, #26
 8004da6:	e7f4      	b.n	8004d92 <_printf_float+0x40e>
 8004da8:	2301      	movs	r3, #1
 8004daa:	4642      	mov	r2, r8
 8004dac:	e7e1      	b.n	8004d72 <_printf_float+0x3ee>
 8004dae:	2301      	movs	r3, #1
 8004db0:	464a      	mov	r2, r9
 8004db2:	4631      	mov	r1, r6
 8004db4:	4628      	mov	r0, r5
 8004db6:	47b8      	blx	r7
 8004db8:	3001      	adds	r0, #1
 8004dba:	f43f ae3e 	beq.w	8004a3a <_printf_float+0xb6>
 8004dbe:	f108 0801 	add.w	r8, r8, #1
 8004dc2:	68e3      	ldr	r3, [r4, #12]
 8004dc4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004dc6:	1a5b      	subs	r3, r3, r1
 8004dc8:	4543      	cmp	r3, r8
 8004dca:	dcf0      	bgt.n	8004dae <_printf_float+0x42a>
 8004dcc:	e6fc      	b.n	8004bc8 <_printf_float+0x244>
 8004dce:	f04f 0800 	mov.w	r8, #0
 8004dd2:	f104 0919 	add.w	r9, r4, #25
 8004dd6:	e7f4      	b.n	8004dc2 <_printf_float+0x43e>

08004dd8 <_printf_common>:
 8004dd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ddc:	4616      	mov	r6, r2
 8004dde:	4698      	mov	r8, r3
 8004de0:	688a      	ldr	r2, [r1, #8]
 8004de2:	690b      	ldr	r3, [r1, #16]
 8004de4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004de8:	4293      	cmp	r3, r2
 8004dea:	bfb8      	it	lt
 8004dec:	4613      	movlt	r3, r2
 8004dee:	6033      	str	r3, [r6, #0]
 8004df0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004df4:	4607      	mov	r7, r0
 8004df6:	460c      	mov	r4, r1
 8004df8:	b10a      	cbz	r2, 8004dfe <_printf_common+0x26>
 8004dfa:	3301      	adds	r3, #1
 8004dfc:	6033      	str	r3, [r6, #0]
 8004dfe:	6823      	ldr	r3, [r4, #0]
 8004e00:	0699      	lsls	r1, r3, #26
 8004e02:	bf42      	ittt	mi
 8004e04:	6833      	ldrmi	r3, [r6, #0]
 8004e06:	3302      	addmi	r3, #2
 8004e08:	6033      	strmi	r3, [r6, #0]
 8004e0a:	6825      	ldr	r5, [r4, #0]
 8004e0c:	f015 0506 	ands.w	r5, r5, #6
 8004e10:	d106      	bne.n	8004e20 <_printf_common+0x48>
 8004e12:	f104 0a19 	add.w	sl, r4, #25
 8004e16:	68e3      	ldr	r3, [r4, #12]
 8004e18:	6832      	ldr	r2, [r6, #0]
 8004e1a:	1a9b      	subs	r3, r3, r2
 8004e1c:	42ab      	cmp	r3, r5
 8004e1e:	dc26      	bgt.n	8004e6e <_printf_common+0x96>
 8004e20:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e24:	6822      	ldr	r2, [r4, #0]
 8004e26:	3b00      	subs	r3, #0
 8004e28:	bf18      	it	ne
 8004e2a:	2301      	movne	r3, #1
 8004e2c:	0692      	lsls	r2, r2, #26
 8004e2e:	d42b      	bmi.n	8004e88 <_printf_common+0xb0>
 8004e30:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e34:	4641      	mov	r1, r8
 8004e36:	4638      	mov	r0, r7
 8004e38:	47c8      	blx	r9
 8004e3a:	3001      	adds	r0, #1
 8004e3c:	d01e      	beq.n	8004e7c <_printf_common+0xa4>
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	6922      	ldr	r2, [r4, #16]
 8004e42:	f003 0306 	and.w	r3, r3, #6
 8004e46:	2b04      	cmp	r3, #4
 8004e48:	bf02      	ittt	eq
 8004e4a:	68e5      	ldreq	r5, [r4, #12]
 8004e4c:	6833      	ldreq	r3, [r6, #0]
 8004e4e:	1aed      	subeq	r5, r5, r3
 8004e50:	68a3      	ldr	r3, [r4, #8]
 8004e52:	bf0c      	ite	eq
 8004e54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e58:	2500      	movne	r5, #0
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	bfc4      	itt	gt
 8004e5e:	1a9b      	subgt	r3, r3, r2
 8004e60:	18ed      	addgt	r5, r5, r3
 8004e62:	2600      	movs	r6, #0
 8004e64:	341a      	adds	r4, #26
 8004e66:	42b5      	cmp	r5, r6
 8004e68:	d11a      	bne.n	8004ea0 <_printf_common+0xc8>
 8004e6a:	2000      	movs	r0, #0
 8004e6c:	e008      	b.n	8004e80 <_printf_common+0xa8>
 8004e6e:	2301      	movs	r3, #1
 8004e70:	4652      	mov	r2, sl
 8004e72:	4641      	mov	r1, r8
 8004e74:	4638      	mov	r0, r7
 8004e76:	47c8      	blx	r9
 8004e78:	3001      	adds	r0, #1
 8004e7a:	d103      	bne.n	8004e84 <_printf_common+0xac>
 8004e7c:	f04f 30ff 	mov.w	r0, #4294967295
 8004e80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e84:	3501      	adds	r5, #1
 8004e86:	e7c6      	b.n	8004e16 <_printf_common+0x3e>
 8004e88:	18e1      	adds	r1, r4, r3
 8004e8a:	1c5a      	adds	r2, r3, #1
 8004e8c:	2030      	movs	r0, #48	@ 0x30
 8004e8e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004e92:	4422      	add	r2, r4
 8004e94:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004e98:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004e9c:	3302      	adds	r3, #2
 8004e9e:	e7c7      	b.n	8004e30 <_printf_common+0x58>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	4622      	mov	r2, r4
 8004ea4:	4641      	mov	r1, r8
 8004ea6:	4638      	mov	r0, r7
 8004ea8:	47c8      	blx	r9
 8004eaa:	3001      	adds	r0, #1
 8004eac:	d0e6      	beq.n	8004e7c <_printf_common+0xa4>
 8004eae:	3601      	adds	r6, #1
 8004eb0:	e7d9      	b.n	8004e66 <_printf_common+0x8e>
	...

08004eb4 <_printf_i>:
 8004eb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004eb8:	7e0f      	ldrb	r7, [r1, #24]
 8004eba:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ebc:	2f78      	cmp	r7, #120	@ 0x78
 8004ebe:	4691      	mov	r9, r2
 8004ec0:	4680      	mov	r8, r0
 8004ec2:	460c      	mov	r4, r1
 8004ec4:	469a      	mov	sl, r3
 8004ec6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004eca:	d807      	bhi.n	8004edc <_printf_i+0x28>
 8004ecc:	2f62      	cmp	r7, #98	@ 0x62
 8004ece:	d80a      	bhi.n	8004ee6 <_printf_i+0x32>
 8004ed0:	2f00      	cmp	r7, #0
 8004ed2:	f000 80d2 	beq.w	800507a <_printf_i+0x1c6>
 8004ed6:	2f58      	cmp	r7, #88	@ 0x58
 8004ed8:	f000 80b9 	beq.w	800504e <_printf_i+0x19a>
 8004edc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004ee0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004ee4:	e03a      	b.n	8004f5c <_printf_i+0xa8>
 8004ee6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004eea:	2b15      	cmp	r3, #21
 8004eec:	d8f6      	bhi.n	8004edc <_printf_i+0x28>
 8004eee:	a101      	add	r1, pc, #4	@ (adr r1, 8004ef4 <_printf_i+0x40>)
 8004ef0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004ef4:	08004f4d 	.word	0x08004f4d
 8004ef8:	08004f61 	.word	0x08004f61
 8004efc:	08004edd 	.word	0x08004edd
 8004f00:	08004edd 	.word	0x08004edd
 8004f04:	08004edd 	.word	0x08004edd
 8004f08:	08004edd 	.word	0x08004edd
 8004f0c:	08004f61 	.word	0x08004f61
 8004f10:	08004edd 	.word	0x08004edd
 8004f14:	08004edd 	.word	0x08004edd
 8004f18:	08004edd 	.word	0x08004edd
 8004f1c:	08004edd 	.word	0x08004edd
 8004f20:	08005061 	.word	0x08005061
 8004f24:	08004f8b 	.word	0x08004f8b
 8004f28:	0800501b 	.word	0x0800501b
 8004f2c:	08004edd 	.word	0x08004edd
 8004f30:	08004edd 	.word	0x08004edd
 8004f34:	08005083 	.word	0x08005083
 8004f38:	08004edd 	.word	0x08004edd
 8004f3c:	08004f8b 	.word	0x08004f8b
 8004f40:	08004edd 	.word	0x08004edd
 8004f44:	08004edd 	.word	0x08004edd
 8004f48:	08005023 	.word	0x08005023
 8004f4c:	6833      	ldr	r3, [r6, #0]
 8004f4e:	1d1a      	adds	r2, r3, #4
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	6032      	str	r2, [r6, #0]
 8004f54:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f58:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	e09d      	b.n	800509c <_printf_i+0x1e8>
 8004f60:	6833      	ldr	r3, [r6, #0]
 8004f62:	6820      	ldr	r0, [r4, #0]
 8004f64:	1d19      	adds	r1, r3, #4
 8004f66:	6031      	str	r1, [r6, #0]
 8004f68:	0606      	lsls	r6, r0, #24
 8004f6a:	d501      	bpl.n	8004f70 <_printf_i+0xbc>
 8004f6c:	681d      	ldr	r5, [r3, #0]
 8004f6e:	e003      	b.n	8004f78 <_printf_i+0xc4>
 8004f70:	0645      	lsls	r5, r0, #25
 8004f72:	d5fb      	bpl.n	8004f6c <_printf_i+0xb8>
 8004f74:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004f78:	2d00      	cmp	r5, #0
 8004f7a:	da03      	bge.n	8004f84 <_printf_i+0xd0>
 8004f7c:	232d      	movs	r3, #45	@ 0x2d
 8004f7e:	426d      	negs	r5, r5
 8004f80:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004f84:	4859      	ldr	r0, [pc, #356]	@ (80050ec <_printf_i+0x238>)
 8004f86:	230a      	movs	r3, #10
 8004f88:	e011      	b.n	8004fae <_printf_i+0xfa>
 8004f8a:	6821      	ldr	r1, [r4, #0]
 8004f8c:	6833      	ldr	r3, [r6, #0]
 8004f8e:	0608      	lsls	r0, r1, #24
 8004f90:	f853 5b04 	ldr.w	r5, [r3], #4
 8004f94:	d402      	bmi.n	8004f9c <_printf_i+0xe8>
 8004f96:	0649      	lsls	r1, r1, #25
 8004f98:	bf48      	it	mi
 8004f9a:	b2ad      	uxthmi	r5, r5
 8004f9c:	2f6f      	cmp	r7, #111	@ 0x6f
 8004f9e:	4853      	ldr	r0, [pc, #332]	@ (80050ec <_printf_i+0x238>)
 8004fa0:	6033      	str	r3, [r6, #0]
 8004fa2:	bf14      	ite	ne
 8004fa4:	230a      	movne	r3, #10
 8004fa6:	2308      	moveq	r3, #8
 8004fa8:	2100      	movs	r1, #0
 8004faa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fae:	6866      	ldr	r6, [r4, #4]
 8004fb0:	60a6      	str	r6, [r4, #8]
 8004fb2:	2e00      	cmp	r6, #0
 8004fb4:	bfa2      	ittt	ge
 8004fb6:	6821      	ldrge	r1, [r4, #0]
 8004fb8:	f021 0104 	bicge.w	r1, r1, #4
 8004fbc:	6021      	strge	r1, [r4, #0]
 8004fbe:	b90d      	cbnz	r5, 8004fc4 <_printf_i+0x110>
 8004fc0:	2e00      	cmp	r6, #0
 8004fc2:	d04b      	beq.n	800505c <_printf_i+0x1a8>
 8004fc4:	4616      	mov	r6, r2
 8004fc6:	fbb5 f1f3 	udiv	r1, r5, r3
 8004fca:	fb03 5711 	mls	r7, r3, r1, r5
 8004fce:	5dc7      	ldrb	r7, [r0, r7]
 8004fd0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004fd4:	462f      	mov	r7, r5
 8004fd6:	42bb      	cmp	r3, r7
 8004fd8:	460d      	mov	r5, r1
 8004fda:	d9f4      	bls.n	8004fc6 <_printf_i+0x112>
 8004fdc:	2b08      	cmp	r3, #8
 8004fde:	d10b      	bne.n	8004ff8 <_printf_i+0x144>
 8004fe0:	6823      	ldr	r3, [r4, #0]
 8004fe2:	07df      	lsls	r7, r3, #31
 8004fe4:	d508      	bpl.n	8004ff8 <_printf_i+0x144>
 8004fe6:	6923      	ldr	r3, [r4, #16]
 8004fe8:	6861      	ldr	r1, [r4, #4]
 8004fea:	4299      	cmp	r1, r3
 8004fec:	bfde      	ittt	le
 8004fee:	2330      	movle	r3, #48	@ 0x30
 8004ff0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ff4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004ff8:	1b92      	subs	r2, r2, r6
 8004ffa:	6122      	str	r2, [r4, #16]
 8004ffc:	f8cd a000 	str.w	sl, [sp]
 8005000:	464b      	mov	r3, r9
 8005002:	aa03      	add	r2, sp, #12
 8005004:	4621      	mov	r1, r4
 8005006:	4640      	mov	r0, r8
 8005008:	f7ff fee6 	bl	8004dd8 <_printf_common>
 800500c:	3001      	adds	r0, #1
 800500e:	d14a      	bne.n	80050a6 <_printf_i+0x1f2>
 8005010:	f04f 30ff 	mov.w	r0, #4294967295
 8005014:	b004      	add	sp, #16
 8005016:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800501a:	6823      	ldr	r3, [r4, #0]
 800501c:	f043 0320 	orr.w	r3, r3, #32
 8005020:	6023      	str	r3, [r4, #0]
 8005022:	4833      	ldr	r0, [pc, #204]	@ (80050f0 <_printf_i+0x23c>)
 8005024:	2778      	movs	r7, #120	@ 0x78
 8005026:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800502a:	6823      	ldr	r3, [r4, #0]
 800502c:	6831      	ldr	r1, [r6, #0]
 800502e:	061f      	lsls	r7, r3, #24
 8005030:	f851 5b04 	ldr.w	r5, [r1], #4
 8005034:	d402      	bmi.n	800503c <_printf_i+0x188>
 8005036:	065f      	lsls	r7, r3, #25
 8005038:	bf48      	it	mi
 800503a:	b2ad      	uxthmi	r5, r5
 800503c:	6031      	str	r1, [r6, #0]
 800503e:	07d9      	lsls	r1, r3, #31
 8005040:	bf44      	itt	mi
 8005042:	f043 0320 	orrmi.w	r3, r3, #32
 8005046:	6023      	strmi	r3, [r4, #0]
 8005048:	b11d      	cbz	r5, 8005052 <_printf_i+0x19e>
 800504a:	2310      	movs	r3, #16
 800504c:	e7ac      	b.n	8004fa8 <_printf_i+0xf4>
 800504e:	4827      	ldr	r0, [pc, #156]	@ (80050ec <_printf_i+0x238>)
 8005050:	e7e9      	b.n	8005026 <_printf_i+0x172>
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	f023 0320 	bic.w	r3, r3, #32
 8005058:	6023      	str	r3, [r4, #0]
 800505a:	e7f6      	b.n	800504a <_printf_i+0x196>
 800505c:	4616      	mov	r6, r2
 800505e:	e7bd      	b.n	8004fdc <_printf_i+0x128>
 8005060:	6833      	ldr	r3, [r6, #0]
 8005062:	6825      	ldr	r5, [r4, #0]
 8005064:	6961      	ldr	r1, [r4, #20]
 8005066:	1d18      	adds	r0, r3, #4
 8005068:	6030      	str	r0, [r6, #0]
 800506a:	062e      	lsls	r6, r5, #24
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	d501      	bpl.n	8005074 <_printf_i+0x1c0>
 8005070:	6019      	str	r1, [r3, #0]
 8005072:	e002      	b.n	800507a <_printf_i+0x1c6>
 8005074:	0668      	lsls	r0, r5, #25
 8005076:	d5fb      	bpl.n	8005070 <_printf_i+0x1bc>
 8005078:	8019      	strh	r1, [r3, #0]
 800507a:	2300      	movs	r3, #0
 800507c:	6123      	str	r3, [r4, #16]
 800507e:	4616      	mov	r6, r2
 8005080:	e7bc      	b.n	8004ffc <_printf_i+0x148>
 8005082:	6833      	ldr	r3, [r6, #0]
 8005084:	1d1a      	adds	r2, r3, #4
 8005086:	6032      	str	r2, [r6, #0]
 8005088:	681e      	ldr	r6, [r3, #0]
 800508a:	6862      	ldr	r2, [r4, #4]
 800508c:	2100      	movs	r1, #0
 800508e:	4630      	mov	r0, r6
 8005090:	f7fb f89e 	bl	80001d0 <memchr>
 8005094:	b108      	cbz	r0, 800509a <_printf_i+0x1e6>
 8005096:	1b80      	subs	r0, r0, r6
 8005098:	6060      	str	r0, [r4, #4]
 800509a:	6863      	ldr	r3, [r4, #4]
 800509c:	6123      	str	r3, [r4, #16]
 800509e:	2300      	movs	r3, #0
 80050a0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050a4:	e7aa      	b.n	8004ffc <_printf_i+0x148>
 80050a6:	6923      	ldr	r3, [r4, #16]
 80050a8:	4632      	mov	r2, r6
 80050aa:	4649      	mov	r1, r9
 80050ac:	4640      	mov	r0, r8
 80050ae:	47d0      	blx	sl
 80050b0:	3001      	adds	r0, #1
 80050b2:	d0ad      	beq.n	8005010 <_printf_i+0x15c>
 80050b4:	6823      	ldr	r3, [r4, #0]
 80050b6:	079b      	lsls	r3, r3, #30
 80050b8:	d413      	bmi.n	80050e2 <_printf_i+0x22e>
 80050ba:	68e0      	ldr	r0, [r4, #12]
 80050bc:	9b03      	ldr	r3, [sp, #12]
 80050be:	4298      	cmp	r0, r3
 80050c0:	bfb8      	it	lt
 80050c2:	4618      	movlt	r0, r3
 80050c4:	e7a6      	b.n	8005014 <_printf_i+0x160>
 80050c6:	2301      	movs	r3, #1
 80050c8:	4632      	mov	r2, r6
 80050ca:	4649      	mov	r1, r9
 80050cc:	4640      	mov	r0, r8
 80050ce:	47d0      	blx	sl
 80050d0:	3001      	adds	r0, #1
 80050d2:	d09d      	beq.n	8005010 <_printf_i+0x15c>
 80050d4:	3501      	adds	r5, #1
 80050d6:	68e3      	ldr	r3, [r4, #12]
 80050d8:	9903      	ldr	r1, [sp, #12]
 80050da:	1a5b      	subs	r3, r3, r1
 80050dc:	42ab      	cmp	r3, r5
 80050de:	dcf2      	bgt.n	80050c6 <_printf_i+0x212>
 80050e0:	e7eb      	b.n	80050ba <_printf_i+0x206>
 80050e2:	2500      	movs	r5, #0
 80050e4:	f104 0619 	add.w	r6, r4, #25
 80050e8:	e7f5      	b.n	80050d6 <_printf_i+0x222>
 80050ea:	bf00      	nop
 80050ec:	08008f82 	.word	0x08008f82
 80050f0:	08008f93 	.word	0x08008f93

080050f4 <_scanf_float>:
 80050f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f8:	b087      	sub	sp, #28
 80050fa:	4617      	mov	r7, r2
 80050fc:	9303      	str	r3, [sp, #12]
 80050fe:	688b      	ldr	r3, [r1, #8]
 8005100:	1e5a      	subs	r2, r3, #1
 8005102:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005106:	bf81      	itttt	hi
 8005108:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800510c:	eb03 0b05 	addhi.w	fp, r3, r5
 8005110:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005114:	608b      	strhi	r3, [r1, #8]
 8005116:	680b      	ldr	r3, [r1, #0]
 8005118:	460a      	mov	r2, r1
 800511a:	f04f 0500 	mov.w	r5, #0
 800511e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005122:	f842 3b1c 	str.w	r3, [r2], #28
 8005126:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800512a:	4680      	mov	r8, r0
 800512c:	460c      	mov	r4, r1
 800512e:	bf98      	it	ls
 8005130:	f04f 0b00 	movls.w	fp, #0
 8005134:	9201      	str	r2, [sp, #4]
 8005136:	4616      	mov	r6, r2
 8005138:	46aa      	mov	sl, r5
 800513a:	46a9      	mov	r9, r5
 800513c:	9502      	str	r5, [sp, #8]
 800513e:	68a2      	ldr	r2, [r4, #8]
 8005140:	b152      	cbz	r2, 8005158 <_scanf_float+0x64>
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	781b      	ldrb	r3, [r3, #0]
 8005146:	2b4e      	cmp	r3, #78	@ 0x4e
 8005148:	d864      	bhi.n	8005214 <_scanf_float+0x120>
 800514a:	2b40      	cmp	r3, #64	@ 0x40
 800514c:	d83c      	bhi.n	80051c8 <_scanf_float+0xd4>
 800514e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8005152:	b2c8      	uxtb	r0, r1
 8005154:	280e      	cmp	r0, #14
 8005156:	d93a      	bls.n	80051ce <_scanf_float+0xda>
 8005158:	f1b9 0f00 	cmp.w	r9, #0
 800515c:	d003      	beq.n	8005166 <_scanf_float+0x72>
 800515e:	6823      	ldr	r3, [r4, #0]
 8005160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005164:	6023      	str	r3, [r4, #0]
 8005166:	f10a 3aff 	add.w	sl, sl, #4294967295
 800516a:	f1ba 0f01 	cmp.w	sl, #1
 800516e:	f200 8117 	bhi.w	80053a0 <_scanf_float+0x2ac>
 8005172:	9b01      	ldr	r3, [sp, #4]
 8005174:	429e      	cmp	r6, r3
 8005176:	f200 8108 	bhi.w	800538a <_scanf_float+0x296>
 800517a:	2001      	movs	r0, #1
 800517c:	b007      	add	sp, #28
 800517e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005182:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8005186:	2a0d      	cmp	r2, #13
 8005188:	d8e6      	bhi.n	8005158 <_scanf_float+0x64>
 800518a:	a101      	add	r1, pc, #4	@ (adr r1, 8005190 <_scanf_float+0x9c>)
 800518c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005190:	080052d7 	.word	0x080052d7
 8005194:	08005159 	.word	0x08005159
 8005198:	08005159 	.word	0x08005159
 800519c:	08005159 	.word	0x08005159
 80051a0:	08005337 	.word	0x08005337
 80051a4:	0800530f 	.word	0x0800530f
 80051a8:	08005159 	.word	0x08005159
 80051ac:	08005159 	.word	0x08005159
 80051b0:	080052e5 	.word	0x080052e5
 80051b4:	08005159 	.word	0x08005159
 80051b8:	08005159 	.word	0x08005159
 80051bc:	08005159 	.word	0x08005159
 80051c0:	08005159 	.word	0x08005159
 80051c4:	0800529d 	.word	0x0800529d
 80051c8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80051cc:	e7db      	b.n	8005186 <_scanf_float+0x92>
 80051ce:	290e      	cmp	r1, #14
 80051d0:	d8c2      	bhi.n	8005158 <_scanf_float+0x64>
 80051d2:	a001      	add	r0, pc, #4	@ (adr r0, 80051d8 <_scanf_float+0xe4>)
 80051d4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80051d8:	0800528d 	.word	0x0800528d
 80051dc:	08005159 	.word	0x08005159
 80051e0:	0800528d 	.word	0x0800528d
 80051e4:	08005323 	.word	0x08005323
 80051e8:	08005159 	.word	0x08005159
 80051ec:	08005235 	.word	0x08005235
 80051f0:	08005273 	.word	0x08005273
 80051f4:	08005273 	.word	0x08005273
 80051f8:	08005273 	.word	0x08005273
 80051fc:	08005273 	.word	0x08005273
 8005200:	08005273 	.word	0x08005273
 8005204:	08005273 	.word	0x08005273
 8005208:	08005273 	.word	0x08005273
 800520c:	08005273 	.word	0x08005273
 8005210:	08005273 	.word	0x08005273
 8005214:	2b6e      	cmp	r3, #110	@ 0x6e
 8005216:	d809      	bhi.n	800522c <_scanf_float+0x138>
 8005218:	2b60      	cmp	r3, #96	@ 0x60
 800521a:	d8b2      	bhi.n	8005182 <_scanf_float+0x8e>
 800521c:	2b54      	cmp	r3, #84	@ 0x54
 800521e:	d07b      	beq.n	8005318 <_scanf_float+0x224>
 8005220:	2b59      	cmp	r3, #89	@ 0x59
 8005222:	d199      	bne.n	8005158 <_scanf_float+0x64>
 8005224:	2d07      	cmp	r5, #7
 8005226:	d197      	bne.n	8005158 <_scanf_float+0x64>
 8005228:	2508      	movs	r5, #8
 800522a:	e02c      	b.n	8005286 <_scanf_float+0x192>
 800522c:	2b74      	cmp	r3, #116	@ 0x74
 800522e:	d073      	beq.n	8005318 <_scanf_float+0x224>
 8005230:	2b79      	cmp	r3, #121	@ 0x79
 8005232:	e7f6      	b.n	8005222 <_scanf_float+0x12e>
 8005234:	6821      	ldr	r1, [r4, #0]
 8005236:	05c8      	lsls	r0, r1, #23
 8005238:	d51b      	bpl.n	8005272 <_scanf_float+0x17e>
 800523a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800523e:	6021      	str	r1, [r4, #0]
 8005240:	f109 0901 	add.w	r9, r9, #1
 8005244:	f1bb 0f00 	cmp.w	fp, #0
 8005248:	d003      	beq.n	8005252 <_scanf_float+0x15e>
 800524a:	3201      	adds	r2, #1
 800524c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005250:	60a2      	str	r2, [r4, #8]
 8005252:	68a3      	ldr	r3, [r4, #8]
 8005254:	3b01      	subs	r3, #1
 8005256:	60a3      	str	r3, [r4, #8]
 8005258:	6923      	ldr	r3, [r4, #16]
 800525a:	3301      	adds	r3, #1
 800525c:	6123      	str	r3, [r4, #16]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	3b01      	subs	r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	607b      	str	r3, [r7, #4]
 8005266:	f340 8087 	ble.w	8005378 <_scanf_float+0x284>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	3301      	adds	r3, #1
 800526e:	603b      	str	r3, [r7, #0]
 8005270:	e765      	b.n	800513e <_scanf_float+0x4a>
 8005272:	eb1a 0105 	adds.w	r1, sl, r5
 8005276:	f47f af6f 	bne.w	8005158 <_scanf_float+0x64>
 800527a:	6822      	ldr	r2, [r4, #0]
 800527c:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8005280:	6022      	str	r2, [r4, #0]
 8005282:	460d      	mov	r5, r1
 8005284:	468a      	mov	sl, r1
 8005286:	f806 3b01 	strb.w	r3, [r6], #1
 800528a:	e7e2      	b.n	8005252 <_scanf_float+0x15e>
 800528c:	6822      	ldr	r2, [r4, #0]
 800528e:	0610      	lsls	r0, r2, #24
 8005290:	f57f af62 	bpl.w	8005158 <_scanf_float+0x64>
 8005294:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005298:	6022      	str	r2, [r4, #0]
 800529a:	e7f4      	b.n	8005286 <_scanf_float+0x192>
 800529c:	f1ba 0f00 	cmp.w	sl, #0
 80052a0:	d10e      	bne.n	80052c0 <_scanf_float+0x1cc>
 80052a2:	f1b9 0f00 	cmp.w	r9, #0
 80052a6:	d10e      	bne.n	80052c6 <_scanf_float+0x1d2>
 80052a8:	6822      	ldr	r2, [r4, #0]
 80052aa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80052ae:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80052b2:	d108      	bne.n	80052c6 <_scanf_float+0x1d2>
 80052b4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80052b8:	6022      	str	r2, [r4, #0]
 80052ba:	f04f 0a01 	mov.w	sl, #1
 80052be:	e7e2      	b.n	8005286 <_scanf_float+0x192>
 80052c0:	f1ba 0f02 	cmp.w	sl, #2
 80052c4:	d055      	beq.n	8005372 <_scanf_float+0x27e>
 80052c6:	2d01      	cmp	r5, #1
 80052c8:	d002      	beq.n	80052d0 <_scanf_float+0x1dc>
 80052ca:	2d04      	cmp	r5, #4
 80052cc:	f47f af44 	bne.w	8005158 <_scanf_float+0x64>
 80052d0:	3501      	adds	r5, #1
 80052d2:	b2ed      	uxtb	r5, r5
 80052d4:	e7d7      	b.n	8005286 <_scanf_float+0x192>
 80052d6:	f1ba 0f01 	cmp.w	sl, #1
 80052da:	f47f af3d 	bne.w	8005158 <_scanf_float+0x64>
 80052de:	f04f 0a02 	mov.w	sl, #2
 80052e2:	e7d0      	b.n	8005286 <_scanf_float+0x192>
 80052e4:	b97d      	cbnz	r5, 8005306 <_scanf_float+0x212>
 80052e6:	f1b9 0f00 	cmp.w	r9, #0
 80052ea:	f47f af38 	bne.w	800515e <_scanf_float+0x6a>
 80052ee:	6822      	ldr	r2, [r4, #0]
 80052f0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80052f4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80052f8:	f040 8108 	bne.w	800550c <_scanf_float+0x418>
 80052fc:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005300:	6022      	str	r2, [r4, #0]
 8005302:	2501      	movs	r5, #1
 8005304:	e7bf      	b.n	8005286 <_scanf_float+0x192>
 8005306:	2d03      	cmp	r5, #3
 8005308:	d0e2      	beq.n	80052d0 <_scanf_float+0x1dc>
 800530a:	2d05      	cmp	r5, #5
 800530c:	e7de      	b.n	80052cc <_scanf_float+0x1d8>
 800530e:	2d02      	cmp	r5, #2
 8005310:	f47f af22 	bne.w	8005158 <_scanf_float+0x64>
 8005314:	2503      	movs	r5, #3
 8005316:	e7b6      	b.n	8005286 <_scanf_float+0x192>
 8005318:	2d06      	cmp	r5, #6
 800531a:	f47f af1d 	bne.w	8005158 <_scanf_float+0x64>
 800531e:	2507      	movs	r5, #7
 8005320:	e7b1      	b.n	8005286 <_scanf_float+0x192>
 8005322:	6822      	ldr	r2, [r4, #0]
 8005324:	0591      	lsls	r1, r2, #22
 8005326:	f57f af17 	bpl.w	8005158 <_scanf_float+0x64>
 800532a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800532e:	6022      	str	r2, [r4, #0]
 8005330:	f8cd 9008 	str.w	r9, [sp, #8]
 8005334:	e7a7      	b.n	8005286 <_scanf_float+0x192>
 8005336:	6822      	ldr	r2, [r4, #0]
 8005338:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800533c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8005340:	d006      	beq.n	8005350 <_scanf_float+0x25c>
 8005342:	0550      	lsls	r0, r2, #21
 8005344:	f57f af08 	bpl.w	8005158 <_scanf_float+0x64>
 8005348:	f1b9 0f00 	cmp.w	r9, #0
 800534c:	f000 80de 	beq.w	800550c <_scanf_float+0x418>
 8005350:	0591      	lsls	r1, r2, #22
 8005352:	bf58      	it	pl
 8005354:	9902      	ldrpl	r1, [sp, #8]
 8005356:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800535a:	bf58      	it	pl
 800535c:	eba9 0101 	subpl.w	r1, r9, r1
 8005360:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8005364:	bf58      	it	pl
 8005366:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800536a:	6022      	str	r2, [r4, #0]
 800536c:	f04f 0900 	mov.w	r9, #0
 8005370:	e789      	b.n	8005286 <_scanf_float+0x192>
 8005372:	f04f 0a03 	mov.w	sl, #3
 8005376:	e786      	b.n	8005286 <_scanf_float+0x192>
 8005378:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800537c:	4639      	mov	r1, r7
 800537e:	4640      	mov	r0, r8
 8005380:	4798      	blx	r3
 8005382:	2800      	cmp	r0, #0
 8005384:	f43f aedb 	beq.w	800513e <_scanf_float+0x4a>
 8005388:	e6e6      	b.n	8005158 <_scanf_float+0x64>
 800538a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800538e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005392:	463a      	mov	r2, r7
 8005394:	4640      	mov	r0, r8
 8005396:	4798      	blx	r3
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	3b01      	subs	r3, #1
 800539c:	6123      	str	r3, [r4, #16]
 800539e:	e6e8      	b.n	8005172 <_scanf_float+0x7e>
 80053a0:	1e6b      	subs	r3, r5, #1
 80053a2:	2b06      	cmp	r3, #6
 80053a4:	d824      	bhi.n	80053f0 <_scanf_float+0x2fc>
 80053a6:	2d02      	cmp	r5, #2
 80053a8:	d836      	bhi.n	8005418 <_scanf_float+0x324>
 80053aa:	9b01      	ldr	r3, [sp, #4]
 80053ac:	429e      	cmp	r6, r3
 80053ae:	f67f aee4 	bls.w	800517a <_scanf_float+0x86>
 80053b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80053b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80053ba:	463a      	mov	r2, r7
 80053bc:	4640      	mov	r0, r8
 80053be:	4798      	blx	r3
 80053c0:	6923      	ldr	r3, [r4, #16]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	6123      	str	r3, [r4, #16]
 80053c6:	e7f0      	b.n	80053aa <_scanf_float+0x2b6>
 80053c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80053cc:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80053d0:	463a      	mov	r2, r7
 80053d2:	4640      	mov	r0, r8
 80053d4:	4798      	blx	r3
 80053d6:	6923      	ldr	r3, [r4, #16]
 80053d8:	3b01      	subs	r3, #1
 80053da:	6123      	str	r3, [r4, #16]
 80053dc:	f10a 3aff 	add.w	sl, sl, #4294967295
 80053e0:	fa5f fa8a 	uxtb.w	sl, sl
 80053e4:	f1ba 0f02 	cmp.w	sl, #2
 80053e8:	d1ee      	bne.n	80053c8 <_scanf_float+0x2d4>
 80053ea:	3d03      	subs	r5, #3
 80053ec:	b2ed      	uxtb	r5, r5
 80053ee:	1b76      	subs	r6, r6, r5
 80053f0:	6823      	ldr	r3, [r4, #0]
 80053f2:	05da      	lsls	r2, r3, #23
 80053f4:	d530      	bpl.n	8005458 <_scanf_float+0x364>
 80053f6:	055b      	lsls	r3, r3, #21
 80053f8:	d511      	bpl.n	800541e <_scanf_float+0x32a>
 80053fa:	9b01      	ldr	r3, [sp, #4]
 80053fc:	429e      	cmp	r6, r3
 80053fe:	f67f aebc 	bls.w	800517a <_scanf_float+0x86>
 8005402:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005406:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800540a:	463a      	mov	r2, r7
 800540c:	4640      	mov	r0, r8
 800540e:	4798      	blx	r3
 8005410:	6923      	ldr	r3, [r4, #16]
 8005412:	3b01      	subs	r3, #1
 8005414:	6123      	str	r3, [r4, #16]
 8005416:	e7f0      	b.n	80053fa <_scanf_float+0x306>
 8005418:	46aa      	mov	sl, r5
 800541a:	46b3      	mov	fp, r6
 800541c:	e7de      	b.n	80053dc <_scanf_float+0x2e8>
 800541e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005422:	6923      	ldr	r3, [r4, #16]
 8005424:	2965      	cmp	r1, #101	@ 0x65
 8005426:	f103 33ff 	add.w	r3, r3, #4294967295
 800542a:	f106 35ff 	add.w	r5, r6, #4294967295
 800542e:	6123      	str	r3, [r4, #16]
 8005430:	d00c      	beq.n	800544c <_scanf_float+0x358>
 8005432:	2945      	cmp	r1, #69	@ 0x45
 8005434:	d00a      	beq.n	800544c <_scanf_float+0x358>
 8005436:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800543a:	463a      	mov	r2, r7
 800543c:	4640      	mov	r0, r8
 800543e:	4798      	blx	r3
 8005440:	6923      	ldr	r3, [r4, #16]
 8005442:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005446:	3b01      	subs	r3, #1
 8005448:	1eb5      	subs	r5, r6, #2
 800544a:	6123      	str	r3, [r4, #16]
 800544c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005450:	463a      	mov	r2, r7
 8005452:	4640      	mov	r0, r8
 8005454:	4798      	blx	r3
 8005456:	462e      	mov	r6, r5
 8005458:	6822      	ldr	r2, [r4, #0]
 800545a:	f012 0210 	ands.w	r2, r2, #16
 800545e:	d001      	beq.n	8005464 <_scanf_float+0x370>
 8005460:	2000      	movs	r0, #0
 8005462:	e68b      	b.n	800517c <_scanf_float+0x88>
 8005464:	7032      	strb	r2, [r6, #0]
 8005466:	6823      	ldr	r3, [r4, #0]
 8005468:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800546c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005470:	d11c      	bne.n	80054ac <_scanf_float+0x3b8>
 8005472:	9b02      	ldr	r3, [sp, #8]
 8005474:	454b      	cmp	r3, r9
 8005476:	eba3 0209 	sub.w	r2, r3, r9
 800547a:	d123      	bne.n	80054c4 <_scanf_float+0x3d0>
 800547c:	9901      	ldr	r1, [sp, #4]
 800547e:	2200      	movs	r2, #0
 8005480:	4640      	mov	r0, r8
 8005482:	f002 fbf9 	bl	8007c78 <_strtod_r>
 8005486:	9b03      	ldr	r3, [sp, #12]
 8005488:	6821      	ldr	r1, [r4, #0]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f011 0f02 	tst.w	r1, #2
 8005490:	ec57 6b10 	vmov	r6, r7, d0
 8005494:	f103 0204 	add.w	r2, r3, #4
 8005498:	d01f      	beq.n	80054da <_scanf_float+0x3e6>
 800549a:	9903      	ldr	r1, [sp, #12]
 800549c:	600a      	str	r2, [r1, #0]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	e9c3 6700 	strd	r6, r7, [r3]
 80054a4:	68e3      	ldr	r3, [r4, #12]
 80054a6:	3301      	adds	r3, #1
 80054a8:	60e3      	str	r3, [r4, #12]
 80054aa:	e7d9      	b.n	8005460 <_scanf_float+0x36c>
 80054ac:	9b04      	ldr	r3, [sp, #16]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0e4      	beq.n	800547c <_scanf_float+0x388>
 80054b2:	9905      	ldr	r1, [sp, #20]
 80054b4:	230a      	movs	r3, #10
 80054b6:	3101      	adds	r1, #1
 80054b8:	4640      	mov	r0, r8
 80054ba:	f002 fc5d 	bl	8007d78 <_strtol_r>
 80054be:	9b04      	ldr	r3, [sp, #16]
 80054c0:	9e05      	ldr	r6, [sp, #20]
 80054c2:	1ac2      	subs	r2, r0, r3
 80054c4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80054c8:	429e      	cmp	r6, r3
 80054ca:	bf28      	it	cs
 80054cc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80054d0:	4910      	ldr	r1, [pc, #64]	@ (8005514 <_scanf_float+0x420>)
 80054d2:	4630      	mov	r0, r6
 80054d4:	f000 f8e4 	bl	80056a0 <siprintf>
 80054d8:	e7d0      	b.n	800547c <_scanf_float+0x388>
 80054da:	f011 0f04 	tst.w	r1, #4
 80054de:	9903      	ldr	r1, [sp, #12]
 80054e0:	600a      	str	r2, [r1, #0]
 80054e2:	d1dc      	bne.n	800549e <_scanf_float+0x3aa>
 80054e4:	681d      	ldr	r5, [r3, #0]
 80054e6:	4632      	mov	r2, r6
 80054e8:	463b      	mov	r3, r7
 80054ea:	4630      	mov	r0, r6
 80054ec:	4639      	mov	r1, r7
 80054ee:	f7fb fb1d 	bl	8000b2c <__aeabi_dcmpun>
 80054f2:	b128      	cbz	r0, 8005500 <_scanf_float+0x40c>
 80054f4:	4808      	ldr	r0, [pc, #32]	@ (8005518 <_scanf_float+0x424>)
 80054f6:	f000 f9b7 	bl	8005868 <nanf>
 80054fa:	ed85 0a00 	vstr	s0, [r5]
 80054fe:	e7d1      	b.n	80054a4 <_scanf_float+0x3b0>
 8005500:	4630      	mov	r0, r6
 8005502:	4639      	mov	r1, r7
 8005504:	f7fb fb70 	bl	8000be8 <__aeabi_d2f>
 8005508:	6028      	str	r0, [r5, #0]
 800550a:	e7cb      	b.n	80054a4 <_scanf_float+0x3b0>
 800550c:	f04f 0900 	mov.w	r9, #0
 8005510:	e629      	b.n	8005166 <_scanf_float+0x72>
 8005512:	bf00      	nop
 8005514:	08008fa4 	.word	0x08008fa4
 8005518:	0800933d 	.word	0x0800933d

0800551c <std>:
 800551c:	2300      	movs	r3, #0
 800551e:	b510      	push	{r4, lr}
 8005520:	4604      	mov	r4, r0
 8005522:	e9c0 3300 	strd	r3, r3, [r0]
 8005526:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800552a:	6083      	str	r3, [r0, #8]
 800552c:	8181      	strh	r1, [r0, #12]
 800552e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005530:	81c2      	strh	r2, [r0, #14]
 8005532:	6183      	str	r3, [r0, #24]
 8005534:	4619      	mov	r1, r3
 8005536:	2208      	movs	r2, #8
 8005538:	305c      	adds	r0, #92	@ 0x5c
 800553a:	f000 f914 	bl	8005766 <memset>
 800553e:	4b0d      	ldr	r3, [pc, #52]	@ (8005574 <std+0x58>)
 8005540:	6263      	str	r3, [r4, #36]	@ 0x24
 8005542:	4b0d      	ldr	r3, [pc, #52]	@ (8005578 <std+0x5c>)
 8005544:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005546:	4b0d      	ldr	r3, [pc, #52]	@ (800557c <std+0x60>)
 8005548:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800554a:	4b0d      	ldr	r3, [pc, #52]	@ (8005580 <std+0x64>)
 800554c:	6323      	str	r3, [r4, #48]	@ 0x30
 800554e:	4b0d      	ldr	r3, [pc, #52]	@ (8005584 <std+0x68>)
 8005550:	6224      	str	r4, [r4, #32]
 8005552:	429c      	cmp	r4, r3
 8005554:	d006      	beq.n	8005564 <std+0x48>
 8005556:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800555a:	4294      	cmp	r4, r2
 800555c:	d002      	beq.n	8005564 <std+0x48>
 800555e:	33d0      	adds	r3, #208	@ 0xd0
 8005560:	429c      	cmp	r4, r3
 8005562:	d105      	bne.n	8005570 <std+0x54>
 8005564:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800556c:	f000 b978 	b.w	8005860 <__retarget_lock_init_recursive>
 8005570:	bd10      	pop	{r4, pc}
 8005572:	bf00      	nop
 8005574:	080056e1 	.word	0x080056e1
 8005578:	08005703 	.word	0x08005703
 800557c:	0800573b 	.word	0x0800573b
 8005580:	0800575f 	.word	0x0800575f
 8005584:	20000304 	.word	0x20000304

08005588 <stdio_exit_handler>:
 8005588:	4a02      	ldr	r2, [pc, #8]	@ (8005594 <stdio_exit_handler+0xc>)
 800558a:	4903      	ldr	r1, [pc, #12]	@ (8005598 <stdio_exit_handler+0x10>)
 800558c:	4803      	ldr	r0, [pc, #12]	@ (800559c <stdio_exit_handler+0x14>)
 800558e:	f000 b869 	b.w	8005664 <_fwalk_sglue>
 8005592:	bf00      	nop
 8005594:	2000000c 	.word	0x2000000c
 8005598:	08008135 	.word	0x08008135
 800559c:	2000001c 	.word	0x2000001c

080055a0 <cleanup_stdio>:
 80055a0:	6841      	ldr	r1, [r0, #4]
 80055a2:	4b0c      	ldr	r3, [pc, #48]	@ (80055d4 <cleanup_stdio+0x34>)
 80055a4:	4299      	cmp	r1, r3
 80055a6:	b510      	push	{r4, lr}
 80055a8:	4604      	mov	r4, r0
 80055aa:	d001      	beq.n	80055b0 <cleanup_stdio+0x10>
 80055ac:	f002 fdc2 	bl	8008134 <_fflush_r>
 80055b0:	68a1      	ldr	r1, [r4, #8]
 80055b2:	4b09      	ldr	r3, [pc, #36]	@ (80055d8 <cleanup_stdio+0x38>)
 80055b4:	4299      	cmp	r1, r3
 80055b6:	d002      	beq.n	80055be <cleanup_stdio+0x1e>
 80055b8:	4620      	mov	r0, r4
 80055ba:	f002 fdbb 	bl	8008134 <_fflush_r>
 80055be:	68e1      	ldr	r1, [r4, #12]
 80055c0:	4b06      	ldr	r3, [pc, #24]	@ (80055dc <cleanup_stdio+0x3c>)
 80055c2:	4299      	cmp	r1, r3
 80055c4:	d004      	beq.n	80055d0 <cleanup_stdio+0x30>
 80055c6:	4620      	mov	r0, r4
 80055c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055cc:	f002 bdb2 	b.w	8008134 <_fflush_r>
 80055d0:	bd10      	pop	{r4, pc}
 80055d2:	bf00      	nop
 80055d4:	20000304 	.word	0x20000304
 80055d8:	2000036c 	.word	0x2000036c
 80055dc:	200003d4 	.word	0x200003d4

080055e0 <global_stdio_init.part.0>:
 80055e0:	b510      	push	{r4, lr}
 80055e2:	4b0b      	ldr	r3, [pc, #44]	@ (8005610 <global_stdio_init.part.0+0x30>)
 80055e4:	4c0b      	ldr	r4, [pc, #44]	@ (8005614 <global_stdio_init.part.0+0x34>)
 80055e6:	4a0c      	ldr	r2, [pc, #48]	@ (8005618 <global_stdio_init.part.0+0x38>)
 80055e8:	601a      	str	r2, [r3, #0]
 80055ea:	4620      	mov	r0, r4
 80055ec:	2200      	movs	r2, #0
 80055ee:	2104      	movs	r1, #4
 80055f0:	f7ff ff94 	bl	800551c <std>
 80055f4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80055f8:	2201      	movs	r2, #1
 80055fa:	2109      	movs	r1, #9
 80055fc:	f7ff ff8e 	bl	800551c <std>
 8005600:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005604:	2202      	movs	r2, #2
 8005606:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800560a:	2112      	movs	r1, #18
 800560c:	f7ff bf86 	b.w	800551c <std>
 8005610:	2000043c 	.word	0x2000043c
 8005614:	20000304 	.word	0x20000304
 8005618:	08005589 	.word	0x08005589

0800561c <__sfp_lock_acquire>:
 800561c:	4801      	ldr	r0, [pc, #4]	@ (8005624 <__sfp_lock_acquire+0x8>)
 800561e:	f000 b920 	b.w	8005862 <__retarget_lock_acquire_recursive>
 8005622:	bf00      	nop
 8005624:	20000445 	.word	0x20000445

08005628 <__sfp_lock_release>:
 8005628:	4801      	ldr	r0, [pc, #4]	@ (8005630 <__sfp_lock_release+0x8>)
 800562a:	f000 b91b 	b.w	8005864 <__retarget_lock_release_recursive>
 800562e:	bf00      	nop
 8005630:	20000445 	.word	0x20000445

08005634 <__sinit>:
 8005634:	b510      	push	{r4, lr}
 8005636:	4604      	mov	r4, r0
 8005638:	f7ff fff0 	bl	800561c <__sfp_lock_acquire>
 800563c:	6a23      	ldr	r3, [r4, #32]
 800563e:	b11b      	cbz	r3, 8005648 <__sinit+0x14>
 8005640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005644:	f7ff bff0 	b.w	8005628 <__sfp_lock_release>
 8005648:	4b04      	ldr	r3, [pc, #16]	@ (800565c <__sinit+0x28>)
 800564a:	6223      	str	r3, [r4, #32]
 800564c:	4b04      	ldr	r3, [pc, #16]	@ (8005660 <__sinit+0x2c>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d1f5      	bne.n	8005640 <__sinit+0xc>
 8005654:	f7ff ffc4 	bl	80055e0 <global_stdio_init.part.0>
 8005658:	e7f2      	b.n	8005640 <__sinit+0xc>
 800565a:	bf00      	nop
 800565c:	080055a1 	.word	0x080055a1
 8005660:	2000043c 	.word	0x2000043c

08005664 <_fwalk_sglue>:
 8005664:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005668:	4607      	mov	r7, r0
 800566a:	4688      	mov	r8, r1
 800566c:	4614      	mov	r4, r2
 800566e:	2600      	movs	r6, #0
 8005670:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005674:	f1b9 0901 	subs.w	r9, r9, #1
 8005678:	d505      	bpl.n	8005686 <_fwalk_sglue+0x22>
 800567a:	6824      	ldr	r4, [r4, #0]
 800567c:	2c00      	cmp	r4, #0
 800567e:	d1f7      	bne.n	8005670 <_fwalk_sglue+0xc>
 8005680:	4630      	mov	r0, r6
 8005682:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005686:	89ab      	ldrh	r3, [r5, #12]
 8005688:	2b01      	cmp	r3, #1
 800568a:	d907      	bls.n	800569c <_fwalk_sglue+0x38>
 800568c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005690:	3301      	adds	r3, #1
 8005692:	d003      	beq.n	800569c <_fwalk_sglue+0x38>
 8005694:	4629      	mov	r1, r5
 8005696:	4638      	mov	r0, r7
 8005698:	47c0      	blx	r8
 800569a:	4306      	orrs	r6, r0
 800569c:	3568      	adds	r5, #104	@ 0x68
 800569e:	e7e9      	b.n	8005674 <_fwalk_sglue+0x10>

080056a0 <siprintf>:
 80056a0:	b40e      	push	{r1, r2, r3}
 80056a2:	b500      	push	{lr}
 80056a4:	b09c      	sub	sp, #112	@ 0x70
 80056a6:	ab1d      	add	r3, sp, #116	@ 0x74
 80056a8:	9002      	str	r0, [sp, #8]
 80056aa:	9006      	str	r0, [sp, #24]
 80056ac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80056b0:	4809      	ldr	r0, [pc, #36]	@ (80056d8 <siprintf+0x38>)
 80056b2:	9107      	str	r1, [sp, #28]
 80056b4:	9104      	str	r1, [sp, #16]
 80056b6:	4909      	ldr	r1, [pc, #36]	@ (80056dc <siprintf+0x3c>)
 80056b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80056bc:	9105      	str	r1, [sp, #20]
 80056be:	6800      	ldr	r0, [r0, #0]
 80056c0:	9301      	str	r3, [sp, #4]
 80056c2:	a902      	add	r1, sp, #8
 80056c4:	f002 fbb6 	bl	8007e34 <_svfiprintf_r>
 80056c8:	9b02      	ldr	r3, [sp, #8]
 80056ca:	2200      	movs	r2, #0
 80056cc:	701a      	strb	r2, [r3, #0]
 80056ce:	b01c      	add	sp, #112	@ 0x70
 80056d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80056d4:	b003      	add	sp, #12
 80056d6:	4770      	bx	lr
 80056d8:	20000018 	.word	0x20000018
 80056dc:	ffff0208 	.word	0xffff0208

080056e0 <__sread>:
 80056e0:	b510      	push	{r4, lr}
 80056e2:	460c      	mov	r4, r1
 80056e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80056e8:	f000 f86c 	bl	80057c4 <_read_r>
 80056ec:	2800      	cmp	r0, #0
 80056ee:	bfab      	itete	ge
 80056f0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80056f2:	89a3      	ldrhlt	r3, [r4, #12]
 80056f4:	181b      	addge	r3, r3, r0
 80056f6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80056fa:	bfac      	ite	ge
 80056fc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80056fe:	81a3      	strhlt	r3, [r4, #12]
 8005700:	bd10      	pop	{r4, pc}

08005702 <__swrite>:
 8005702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005706:	461f      	mov	r7, r3
 8005708:	898b      	ldrh	r3, [r1, #12]
 800570a:	05db      	lsls	r3, r3, #23
 800570c:	4605      	mov	r5, r0
 800570e:	460c      	mov	r4, r1
 8005710:	4616      	mov	r6, r2
 8005712:	d505      	bpl.n	8005720 <__swrite+0x1e>
 8005714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005718:	2302      	movs	r3, #2
 800571a:	2200      	movs	r2, #0
 800571c:	f000 f840 	bl	80057a0 <_lseek_r>
 8005720:	89a3      	ldrh	r3, [r4, #12]
 8005722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005726:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800572a:	81a3      	strh	r3, [r4, #12]
 800572c:	4632      	mov	r2, r6
 800572e:	463b      	mov	r3, r7
 8005730:	4628      	mov	r0, r5
 8005732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005736:	f000 b857 	b.w	80057e8 <_write_r>

0800573a <__sseek>:
 800573a:	b510      	push	{r4, lr}
 800573c:	460c      	mov	r4, r1
 800573e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005742:	f000 f82d 	bl	80057a0 <_lseek_r>
 8005746:	1c43      	adds	r3, r0, #1
 8005748:	89a3      	ldrh	r3, [r4, #12]
 800574a:	bf15      	itete	ne
 800574c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800574e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005752:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005756:	81a3      	strheq	r3, [r4, #12]
 8005758:	bf18      	it	ne
 800575a:	81a3      	strhne	r3, [r4, #12]
 800575c:	bd10      	pop	{r4, pc}

0800575e <__sclose>:
 800575e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005762:	f000 b80d 	b.w	8005780 <_close_r>

08005766 <memset>:
 8005766:	4402      	add	r2, r0
 8005768:	4603      	mov	r3, r0
 800576a:	4293      	cmp	r3, r2
 800576c:	d100      	bne.n	8005770 <memset+0xa>
 800576e:	4770      	bx	lr
 8005770:	f803 1b01 	strb.w	r1, [r3], #1
 8005774:	e7f9      	b.n	800576a <memset+0x4>
	...

08005778 <_localeconv_r>:
 8005778:	4800      	ldr	r0, [pc, #0]	@ (800577c <_localeconv_r+0x4>)
 800577a:	4770      	bx	lr
 800577c:	20000158 	.word	0x20000158

08005780 <_close_r>:
 8005780:	b538      	push	{r3, r4, r5, lr}
 8005782:	4d06      	ldr	r5, [pc, #24]	@ (800579c <_close_r+0x1c>)
 8005784:	2300      	movs	r3, #0
 8005786:	4604      	mov	r4, r0
 8005788:	4608      	mov	r0, r1
 800578a:	602b      	str	r3, [r5, #0]
 800578c:	f7fb fddd 	bl	800134a <_close>
 8005790:	1c43      	adds	r3, r0, #1
 8005792:	d102      	bne.n	800579a <_close_r+0x1a>
 8005794:	682b      	ldr	r3, [r5, #0]
 8005796:	b103      	cbz	r3, 800579a <_close_r+0x1a>
 8005798:	6023      	str	r3, [r4, #0]
 800579a:	bd38      	pop	{r3, r4, r5, pc}
 800579c:	20000440 	.word	0x20000440

080057a0 <_lseek_r>:
 80057a0:	b538      	push	{r3, r4, r5, lr}
 80057a2:	4d07      	ldr	r5, [pc, #28]	@ (80057c0 <_lseek_r+0x20>)
 80057a4:	4604      	mov	r4, r0
 80057a6:	4608      	mov	r0, r1
 80057a8:	4611      	mov	r1, r2
 80057aa:	2200      	movs	r2, #0
 80057ac:	602a      	str	r2, [r5, #0]
 80057ae:	461a      	mov	r2, r3
 80057b0:	f7fb fdf2 	bl	8001398 <_lseek>
 80057b4:	1c43      	adds	r3, r0, #1
 80057b6:	d102      	bne.n	80057be <_lseek_r+0x1e>
 80057b8:	682b      	ldr	r3, [r5, #0]
 80057ba:	b103      	cbz	r3, 80057be <_lseek_r+0x1e>
 80057bc:	6023      	str	r3, [r4, #0]
 80057be:	bd38      	pop	{r3, r4, r5, pc}
 80057c0:	20000440 	.word	0x20000440

080057c4 <_read_r>:
 80057c4:	b538      	push	{r3, r4, r5, lr}
 80057c6:	4d07      	ldr	r5, [pc, #28]	@ (80057e4 <_read_r+0x20>)
 80057c8:	4604      	mov	r4, r0
 80057ca:	4608      	mov	r0, r1
 80057cc:	4611      	mov	r1, r2
 80057ce:	2200      	movs	r2, #0
 80057d0:	602a      	str	r2, [r5, #0]
 80057d2:	461a      	mov	r2, r3
 80057d4:	f7fb fd80 	bl	80012d8 <_read>
 80057d8:	1c43      	adds	r3, r0, #1
 80057da:	d102      	bne.n	80057e2 <_read_r+0x1e>
 80057dc:	682b      	ldr	r3, [r5, #0]
 80057de:	b103      	cbz	r3, 80057e2 <_read_r+0x1e>
 80057e0:	6023      	str	r3, [r4, #0]
 80057e2:	bd38      	pop	{r3, r4, r5, pc}
 80057e4:	20000440 	.word	0x20000440

080057e8 <_write_r>:
 80057e8:	b538      	push	{r3, r4, r5, lr}
 80057ea:	4d07      	ldr	r5, [pc, #28]	@ (8005808 <_write_r+0x20>)
 80057ec:	4604      	mov	r4, r0
 80057ee:	4608      	mov	r0, r1
 80057f0:	4611      	mov	r1, r2
 80057f2:	2200      	movs	r2, #0
 80057f4:	602a      	str	r2, [r5, #0]
 80057f6:	461a      	mov	r2, r3
 80057f8:	f7fb fd8b 	bl	8001312 <_write>
 80057fc:	1c43      	adds	r3, r0, #1
 80057fe:	d102      	bne.n	8005806 <_write_r+0x1e>
 8005800:	682b      	ldr	r3, [r5, #0]
 8005802:	b103      	cbz	r3, 8005806 <_write_r+0x1e>
 8005804:	6023      	str	r3, [r4, #0]
 8005806:	bd38      	pop	{r3, r4, r5, pc}
 8005808:	20000440 	.word	0x20000440

0800580c <__errno>:
 800580c:	4b01      	ldr	r3, [pc, #4]	@ (8005814 <__errno+0x8>)
 800580e:	6818      	ldr	r0, [r3, #0]
 8005810:	4770      	bx	lr
 8005812:	bf00      	nop
 8005814:	20000018 	.word	0x20000018

08005818 <__libc_init_array>:
 8005818:	b570      	push	{r4, r5, r6, lr}
 800581a:	4d0d      	ldr	r5, [pc, #52]	@ (8005850 <__libc_init_array+0x38>)
 800581c:	4c0d      	ldr	r4, [pc, #52]	@ (8005854 <__libc_init_array+0x3c>)
 800581e:	1b64      	subs	r4, r4, r5
 8005820:	10a4      	asrs	r4, r4, #2
 8005822:	2600      	movs	r6, #0
 8005824:	42a6      	cmp	r6, r4
 8005826:	d109      	bne.n	800583c <__libc_init_array+0x24>
 8005828:	4d0b      	ldr	r5, [pc, #44]	@ (8005858 <__libc_init_array+0x40>)
 800582a:	4c0c      	ldr	r4, [pc, #48]	@ (800585c <__libc_init_array+0x44>)
 800582c:	f003 fb72 	bl	8008f14 <_init>
 8005830:	1b64      	subs	r4, r4, r5
 8005832:	10a4      	asrs	r4, r4, #2
 8005834:	2600      	movs	r6, #0
 8005836:	42a6      	cmp	r6, r4
 8005838:	d105      	bne.n	8005846 <__libc_init_array+0x2e>
 800583a:	bd70      	pop	{r4, r5, r6, pc}
 800583c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005840:	4798      	blx	r3
 8005842:	3601      	adds	r6, #1
 8005844:	e7ee      	b.n	8005824 <__libc_init_array+0xc>
 8005846:	f855 3b04 	ldr.w	r3, [r5], #4
 800584a:	4798      	blx	r3
 800584c:	3601      	adds	r6, #1
 800584e:	e7f2      	b.n	8005836 <__libc_init_array+0x1e>
 8005850:	080093a8 	.word	0x080093a8
 8005854:	080093a8 	.word	0x080093a8
 8005858:	080093a8 	.word	0x080093a8
 800585c:	080093ac 	.word	0x080093ac

08005860 <__retarget_lock_init_recursive>:
 8005860:	4770      	bx	lr

08005862 <__retarget_lock_acquire_recursive>:
 8005862:	4770      	bx	lr

08005864 <__retarget_lock_release_recursive>:
 8005864:	4770      	bx	lr
	...

08005868 <nanf>:
 8005868:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005870 <nanf+0x8>
 800586c:	4770      	bx	lr
 800586e:	bf00      	nop
 8005870:	7fc00000 	.word	0x7fc00000

08005874 <quorem>:
 8005874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005878:	6903      	ldr	r3, [r0, #16]
 800587a:	690c      	ldr	r4, [r1, #16]
 800587c:	42a3      	cmp	r3, r4
 800587e:	4607      	mov	r7, r0
 8005880:	db7e      	blt.n	8005980 <quorem+0x10c>
 8005882:	3c01      	subs	r4, #1
 8005884:	f101 0814 	add.w	r8, r1, #20
 8005888:	00a3      	lsls	r3, r4, #2
 800588a:	f100 0514 	add.w	r5, r0, #20
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005894:	9301      	str	r3, [sp, #4]
 8005896:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800589a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800589e:	3301      	adds	r3, #1
 80058a0:	429a      	cmp	r2, r3
 80058a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80058a6:	fbb2 f6f3 	udiv	r6, r2, r3
 80058aa:	d32e      	bcc.n	800590a <quorem+0x96>
 80058ac:	f04f 0a00 	mov.w	sl, #0
 80058b0:	46c4      	mov	ip, r8
 80058b2:	46ae      	mov	lr, r5
 80058b4:	46d3      	mov	fp, sl
 80058b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 80058ba:	b298      	uxth	r0, r3
 80058bc:	fb06 a000 	mla	r0, r6, r0, sl
 80058c0:	0c02      	lsrs	r2, r0, #16
 80058c2:	0c1b      	lsrs	r3, r3, #16
 80058c4:	fb06 2303 	mla	r3, r6, r3, r2
 80058c8:	f8de 2000 	ldr.w	r2, [lr]
 80058cc:	b280      	uxth	r0, r0
 80058ce:	b292      	uxth	r2, r2
 80058d0:	1a12      	subs	r2, r2, r0
 80058d2:	445a      	add	r2, fp
 80058d4:	f8de 0000 	ldr.w	r0, [lr]
 80058d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80058dc:	b29b      	uxth	r3, r3
 80058de:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80058e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80058e6:	b292      	uxth	r2, r2
 80058e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80058ec:	45e1      	cmp	r9, ip
 80058ee:	f84e 2b04 	str.w	r2, [lr], #4
 80058f2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80058f6:	d2de      	bcs.n	80058b6 <quorem+0x42>
 80058f8:	9b00      	ldr	r3, [sp, #0]
 80058fa:	58eb      	ldr	r3, [r5, r3]
 80058fc:	b92b      	cbnz	r3, 800590a <quorem+0x96>
 80058fe:	9b01      	ldr	r3, [sp, #4]
 8005900:	3b04      	subs	r3, #4
 8005902:	429d      	cmp	r5, r3
 8005904:	461a      	mov	r2, r3
 8005906:	d32f      	bcc.n	8005968 <quorem+0xf4>
 8005908:	613c      	str	r4, [r7, #16]
 800590a:	4638      	mov	r0, r7
 800590c:	f001 f9c4 	bl	8006c98 <__mcmp>
 8005910:	2800      	cmp	r0, #0
 8005912:	db25      	blt.n	8005960 <quorem+0xec>
 8005914:	4629      	mov	r1, r5
 8005916:	2000      	movs	r0, #0
 8005918:	f858 2b04 	ldr.w	r2, [r8], #4
 800591c:	f8d1 c000 	ldr.w	ip, [r1]
 8005920:	fa1f fe82 	uxth.w	lr, r2
 8005924:	fa1f f38c 	uxth.w	r3, ip
 8005928:	eba3 030e 	sub.w	r3, r3, lr
 800592c:	4403      	add	r3, r0
 800592e:	0c12      	lsrs	r2, r2, #16
 8005930:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005934:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005938:	b29b      	uxth	r3, r3
 800593a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800593e:	45c1      	cmp	r9, r8
 8005940:	f841 3b04 	str.w	r3, [r1], #4
 8005944:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005948:	d2e6      	bcs.n	8005918 <quorem+0xa4>
 800594a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800594e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005952:	b922      	cbnz	r2, 800595e <quorem+0xea>
 8005954:	3b04      	subs	r3, #4
 8005956:	429d      	cmp	r5, r3
 8005958:	461a      	mov	r2, r3
 800595a:	d30b      	bcc.n	8005974 <quorem+0x100>
 800595c:	613c      	str	r4, [r7, #16]
 800595e:	3601      	adds	r6, #1
 8005960:	4630      	mov	r0, r6
 8005962:	b003      	add	sp, #12
 8005964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005968:	6812      	ldr	r2, [r2, #0]
 800596a:	3b04      	subs	r3, #4
 800596c:	2a00      	cmp	r2, #0
 800596e:	d1cb      	bne.n	8005908 <quorem+0x94>
 8005970:	3c01      	subs	r4, #1
 8005972:	e7c6      	b.n	8005902 <quorem+0x8e>
 8005974:	6812      	ldr	r2, [r2, #0]
 8005976:	3b04      	subs	r3, #4
 8005978:	2a00      	cmp	r2, #0
 800597a:	d1ef      	bne.n	800595c <quorem+0xe8>
 800597c:	3c01      	subs	r4, #1
 800597e:	e7ea      	b.n	8005956 <quorem+0xe2>
 8005980:	2000      	movs	r0, #0
 8005982:	e7ee      	b.n	8005962 <quorem+0xee>
 8005984:	0000      	movs	r0, r0
	...

08005988 <_dtoa_r>:
 8005988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800598c:	69c7      	ldr	r7, [r0, #28]
 800598e:	b099      	sub	sp, #100	@ 0x64
 8005990:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005994:	ec55 4b10 	vmov	r4, r5, d0
 8005998:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800599a:	9109      	str	r1, [sp, #36]	@ 0x24
 800599c:	4683      	mov	fp, r0
 800599e:	920e      	str	r2, [sp, #56]	@ 0x38
 80059a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80059a2:	b97f      	cbnz	r7, 80059c4 <_dtoa_r+0x3c>
 80059a4:	2010      	movs	r0, #16
 80059a6:	f000 fdfd 	bl	80065a4 <malloc>
 80059aa:	4602      	mov	r2, r0
 80059ac:	f8cb 001c 	str.w	r0, [fp, #28]
 80059b0:	b920      	cbnz	r0, 80059bc <_dtoa_r+0x34>
 80059b2:	4ba7      	ldr	r3, [pc, #668]	@ (8005c50 <_dtoa_r+0x2c8>)
 80059b4:	21ef      	movs	r1, #239	@ 0xef
 80059b6:	48a7      	ldr	r0, [pc, #668]	@ (8005c54 <_dtoa_r+0x2cc>)
 80059b8:	f002 fc36 	bl	8008228 <__assert_func>
 80059bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80059c0:	6007      	str	r7, [r0, #0]
 80059c2:	60c7      	str	r7, [r0, #12]
 80059c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80059c8:	6819      	ldr	r1, [r3, #0]
 80059ca:	b159      	cbz	r1, 80059e4 <_dtoa_r+0x5c>
 80059cc:	685a      	ldr	r2, [r3, #4]
 80059ce:	604a      	str	r2, [r1, #4]
 80059d0:	2301      	movs	r3, #1
 80059d2:	4093      	lsls	r3, r2
 80059d4:	608b      	str	r3, [r1, #8]
 80059d6:	4658      	mov	r0, fp
 80059d8:	f000 feda 	bl	8006790 <_Bfree>
 80059dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80059e0:	2200      	movs	r2, #0
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	1e2b      	subs	r3, r5, #0
 80059e6:	bfb9      	ittee	lt
 80059e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80059ec:	9303      	strlt	r3, [sp, #12]
 80059ee:	2300      	movge	r3, #0
 80059f0:	6033      	strge	r3, [r6, #0]
 80059f2:	9f03      	ldr	r7, [sp, #12]
 80059f4:	4b98      	ldr	r3, [pc, #608]	@ (8005c58 <_dtoa_r+0x2d0>)
 80059f6:	bfbc      	itt	lt
 80059f8:	2201      	movlt	r2, #1
 80059fa:	6032      	strlt	r2, [r6, #0]
 80059fc:	43bb      	bics	r3, r7
 80059fe:	d112      	bne.n	8005a26 <_dtoa_r+0x9e>
 8005a00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005a02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005a06:	6013      	str	r3, [r2, #0]
 8005a08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005a0c:	4323      	orrs	r3, r4
 8005a0e:	f000 854d 	beq.w	80064ac <_dtoa_r+0xb24>
 8005a12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005a14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005c6c <_dtoa_r+0x2e4>
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f000 854f 	beq.w	80064bc <_dtoa_r+0xb34>
 8005a1e:	f10a 0303 	add.w	r3, sl, #3
 8005a22:	f000 bd49 	b.w	80064b8 <_dtoa_r+0xb30>
 8005a26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	ec51 0b17 	vmov	r0, r1, d7
 8005a30:	2300      	movs	r3, #0
 8005a32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005a36:	f7fb f847 	bl	8000ac8 <__aeabi_dcmpeq>
 8005a3a:	4680      	mov	r8, r0
 8005a3c:	b158      	cbz	r0, 8005a56 <_dtoa_r+0xce>
 8005a3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005a40:	2301      	movs	r3, #1
 8005a42:	6013      	str	r3, [r2, #0]
 8005a44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005a46:	b113      	cbz	r3, 8005a4e <_dtoa_r+0xc6>
 8005a48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8005a4a:	4b84      	ldr	r3, [pc, #528]	@ (8005c5c <_dtoa_r+0x2d4>)
 8005a4c:	6013      	str	r3, [r2, #0]
 8005a4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005c70 <_dtoa_r+0x2e8>
 8005a52:	f000 bd33 	b.w	80064bc <_dtoa_r+0xb34>
 8005a56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005a5a:	aa16      	add	r2, sp, #88	@ 0x58
 8005a5c:	a917      	add	r1, sp, #92	@ 0x5c
 8005a5e:	4658      	mov	r0, fp
 8005a60:	f001 fa3a 	bl	8006ed8 <__d2b>
 8005a64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005a68:	4681      	mov	r9, r0
 8005a6a:	2e00      	cmp	r6, #0
 8005a6c:	d077      	beq.n	8005b5e <_dtoa_r+0x1d6>
 8005a6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005a70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8005a74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005a78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005a7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005a80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005a84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005a88:	4619      	mov	r1, r3
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	4b74      	ldr	r3, [pc, #464]	@ (8005c60 <_dtoa_r+0x2d8>)
 8005a8e:	f7fa fbfb 	bl	8000288 <__aeabi_dsub>
 8005a92:	a369      	add	r3, pc, #420	@ (adr r3, 8005c38 <_dtoa_r+0x2b0>)
 8005a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a98:	f7fa fdae 	bl	80005f8 <__aeabi_dmul>
 8005a9c:	a368      	add	r3, pc, #416	@ (adr r3, 8005c40 <_dtoa_r+0x2b8>)
 8005a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aa2:	f7fa fbf3 	bl	800028c <__adddf3>
 8005aa6:	4604      	mov	r4, r0
 8005aa8:	4630      	mov	r0, r6
 8005aaa:	460d      	mov	r5, r1
 8005aac:	f7fa fd3a 	bl	8000524 <__aeabi_i2d>
 8005ab0:	a365      	add	r3, pc, #404	@ (adr r3, 8005c48 <_dtoa_r+0x2c0>)
 8005ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab6:	f7fa fd9f 	bl	80005f8 <__aeabi_dmul>
 8005aba:	4602      	mov	r2, r0
 8005abc:	460b      	mov	r3, r1
 8005abe:	4620      	mov	r0, r4
 8005ac0:	4629      	mov	r1, r5
 8005ac2:	f7fa fbe3 	bl	800028c <__adddf3>
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	460d      	mov	r5, r1
 8005aca:	f7fb f845 	bl	8000b58 <__aeabi_d2iz>
 8005ace:	2200      	movs	r2, #0
 8005ad0:	4607      	mov	r7, r0
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	4620      	mov	r0, r4
 8005ad6:	4629      	mov	r1, r5
 8005ad8:	f7fb f800 	bl	8000adc <__aeabi_dcmplt>
 8005adc:	b140      	cbz	r0, 8005af0 <_dtoa_r+0x168>
 8005ade:	4638      	mov	r0, r7
 8005ae0:	f7fa fd20 	bl	8000524 <__aeabi_i2d>
 8005ae4:	4622      	mov	r2, r4
 8005ae6:	462b      	mov	r3, r5
 8005ae8:	f7fa ffee 	bl	8000ac8 <__aeabi_dcmpeq>
 8005aec:	b900      	cbnz	r0, 8005af0 <_dtoa_r+0x168>
 8005aee:	3f01      	subs	r7, #1
 8005af0:	2f16      	cmp	r7, #22
 8005af2:	d851      	bhi.n	8005b98 <_dtoa_r+0x210>
 8005af4:	4b5b      	ldr	r3, [pc, #364]	@ (8005c64 <_dtoa_r+0x2dc>)
 8005af6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005afe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b02:	f7fa ffeb 	bl	8000adc <__aeabi_dcmplt>
 8005b06:	2800      	cmp	r0, #0
 8005b08:	d048      	beq.n	8005b9c <_dtoa_r+0x214>
 8005b0a:	3f01      	subs	r7, #1
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8005b10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8005b12:	1b9b      	subs	r3, r3, r6
 8005b14:	1e5a      	subs	r2, r3, #1
 8005b16:	bf44      	itt	mi
 8005b18:	f1c3 0801 	rsbmi	r8, r3, #1
 8005b1c:	2300      	movmi	r3, #0
 8005b1e:	9208      	str	r2, [sp, #32]
 8005b20:	bf54      	ite	pl
 8005b22:	f04f 0800 	movpl.w	r8, #0
 8005b26:	9308      	strmi	r3, [sp, #32]
 8005b28:	2f00      	cmp	r7, #0
 8005b2a:	db39      	blt.n	8005ba0 <_dtoa_r+0x218>
 8005b2c:	9b08      	ldr	r3, [sp, #32]
 8005b2e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005b30:	443b      	add	r3, r7
 8005b32:	9308      	str	r3, [sp, #32]
 8005b34:	2300      	movs	r3, #0
 8005b36:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b3a:	2b09      	cmp	r3, #9
 8005b3c:	d864      	bhi.n	8005c08 <_dtoa_r+0x280>
 8005b3e:	2b05      	cmp	r3, #5
 8005b40:	bfc4      	itt	gt
 8005b42:	3b04      	subgt	r3, #4
 8005b44:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8005b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b48:	f1a3 0302 	sub.w	r3, r3, #2
 8005b4c:	bfcc      	ite	gt
 8005b4e:	2400      	movgt	r4, #0
 8005b50:	2401      	movle	r4, #1
 8005b52:	2b03      	cmp	r3, #3
 8005b54:	d863      	bhi.n	8005c1e <_dtoa_r+0x296>
 8005b56:	e8df f003 	tbb	[pc, r3]
 8005b5a:	372a      	.short	0x372a
 8005b5c:	5535      	.short	0x5535
 8005b5e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8005b62:	441e      	add	r6, r3
 8005b64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005b68:	2b20      	cmp	r3, #32
 8005b6a:	bfc1      	itttt	gt
 8005b6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005b70:	409f      	lslgt	r7, r3
 8005b72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005b76:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005b7a:	bfd6      	itet	le
 8005b7c:	f1c3 0320 	rsble	r3, r3, #32
 8005b80:	ea47 0003 	orrgt.w	r0, r7, r3
 8005b84:	fa04 f003 	lslle.w	r0, r4, r3
 8005b88:	f7fa fcbc 	bl	8000504 <__aeabi_ui2d>
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005b92:	3e01      	subs	r6, #1
 8005b94:	9214      	str	r2, [sp, #80]	@ 0x50
 8005b96:	e777      	b.n	8005a88 <_dtoa_r+0x100>
 8005b98:	2301      	movs	r3, #1
 8005b9a:	e7b8      	b.n	8005b0e <_dtoa_r+0x186>
 8005b9c:	9012      	str	r0, [sp, #72]	@ 0x48
 8005b9e:	e7b7      	b.n	8005b10 <_dtoa_r+0x188>
 8005ba0:	427b      	negs	r3, r7
 8005ba2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	eba8 0807 	sub.w	r8, r8, r7
 8005baa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005bac:	e7c4      	b.n	8005b38 <_dtoa_r+0x1b0>
 8005bae:	2300      	movs	r3, #0
 8005bb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	dc35      	bgt.n	8005c24 <_dtoa_r+0x29c>
 8005bb8:	2301      	movs	r3, #1
 8005bba:	9300      	str	r3, [sp, #0]
 8005bbc:	9307      	str	r3, [sp, #28]
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8005bc2:	e00b      	b.n	8005bdc <_dtoa_r+0x254>
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e7f3      	b.n	8005bb0 <_dtoa_r+0x228>
 8005bc8:	2300      	movs	r3, #0
 8005bca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005bcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005bce:	18fb      	adds	r3, r7, r3
 8005bd0:	9300      	str	r3, [sp, #0]
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	2b01      	cmp	r3, #1
 8005bd6:	9307      	str	r3, [sp, #28]
 8005bd8:	bfb8      	it	lt
 8005bda:	2301      	movlt	r3, #1
 8005bdc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005be0:	2100      	movs	r1, #0
 8005be2:	2204      	movs	r2, #4
 8005be4:	f102 0514 	add.w	r5, r2, #20
 8005be8:	429d      	cmp	r5, r3
 8005bea:	d91f      	bls.n	8005c2c <_dtoa_r+0x2a4>
 8005bec:	6041      	str	r1, [r0, #4]
 8005bee:	4658      	mov	r0, fp
 8005bf0:	f000 fd8e 	bl	8006710 <_Balloc>
 8005bf4:	4682      	mov	sl, r0
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d13c      	bne.n	8005c74 <_dtoa_r+0x2ec>
 8005bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8005c68 <_dtoa_r+0x2e0>)
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	f240 11af 	movw	r1, #431	@ 0x1af
 8005c02:	e6d8      	b.n	80059b6 <_dtoa_r+0x2e>
 8005c04:	2301      	movs	r3, #1
 8005c06:	e7e0      	b.n	8005bca <_dtoa_r+0x242>
 8005c08:	2401      	movs	r4, #1
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005c10:	f04f 33ff 	mov.w	r3, #4294967295
 8005c14:	9300      	str	r3, [sp, #0]
 8005c16:	9307      	str	r3, [sp, #28]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	2312      	movs	r3, #18
 8005c1c:	e7d0      	b.n	8005bc0 <_dtoa_r+0x238>
 8005c1e:	2301      	movs	r3, #1
 8005c20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005c22:	e7f5      	b.n	8005c10 <_dtoa_r+0x288>
 8005c24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c26:	9300      	str	r3, [sp, #0]
 8005c28:	9307      	str	r3, [sp, #28]
 8005c2a:	e7d7      	b.n	8005bdc <_dtoa_r+0x254>
 8005c2c:	3101      	adds	r1, #1
 8005c2e:	0052      	lsls	r2, r2, #1
 8005c30:	e7d8      	b.n	8005be4 <_dtoa_r+0x25c>
 8005c32:	bf00      	nop
 8005c34:	f3af 8000 	nop.w
 8005c38:	636f4361 	.word	0x636f4361
 8005c3c:	3fd287a7 	.word	0x3fd287a7
 8005c40:	8b60c8b3 	.word	0x8b60c8b3
 8005c44:	3fc68a28 	.word	0x3fc68a28
 8005c48:	509f79fb 	.word	0x509f79fb
 8005c4c:	3fd34413 	.word	0x3fd34413
 8005c50:	08008fb6 	.word	0x08008fb6
 8005c54:	08008fcd 	.word	0x08008fcd
 8005c58:	7ff00000 	.word	0x7ff00000
 8005c5c:	08008f81 	.word	0x08008f81
 8005c60:	3ff80000 	.word	0x3ff80000
 8005c64:	080090c8 	.word	0x080090c8
 8005c68:	08009025 	.word	0x08009025
 8005c6c:	08008fb2 	.word	0x08008fb2
 8005c70:	08008f80 	.word	0x08008f80
 8005c74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005c78:	6018      	str	r0, [r3, #0]
 8005c7a:	9b07      	ldr	r3, [sp, #28]
 8005c7c:	2b0e      	cmp	r3, #14
 8005c7e:	f200 80a4 	bhi.w	8005dca <_dtoa_r+0x442>
 8005c82:	2c00      	cmp	r4, #0
 8005c84:	f000 80a1 	beq.w	8005dca <_dtoa_r+0x442>
 8005c88:	2f00      	cmp	r7, #0
 8005c8a:	dd33      	ble.n	8005cf4 <_dtoa_r+0x36c>
 8005c8c:	4bad      	ldr	r3, [pc, #692]	@ (8005f44 <_dtoa_r+0x5bc>)
 8005c8e:	f007 020f 	and.w	r2, r7, #15
 8005c92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005c96:	ed93 7b00 	vldr	d7, [r3]
 8005c9a:	05f8      	lsls	r0, r7, #23
 8005c9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005ca0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005ca4:	d516      	bpl.n	8005cd4 <_dtoa_r+0x34c>
 8005ca6:	4ba8      	ldr	r3, [pc, #672]	@ (8005f48 <_dtoa_r+0x5c0>)
 8005ca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005cac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005cb0:	f7fa fdcc 	bl	800084c <__aeabi_ddiv>
 8005cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cb8:	f004 040f 	and.w	r4, r4, #15
 8005cbc:	2603      	movs	r6, #3
 8005cbe:	4da2      	ldr	r5, [pc, #648]	@ (8005f48 <_dtoa_r+0x5c0>)
 8005cc0:	b954      	cbnz	r4, 8005cd8 <_dtoa_r+0x350>
 8005cc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005cca:	f7fa fdbf 	bl	800084c <__aeabi_ddiv>
 8005cce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005cd2:	e028      	b.n	8005d26 <_dtoa_r+0x39e>
 8005cd4:	2602      	movs	r6, #2
 8005cd6:	e7f2      	b.n	8005cbe <_dtoa_r+0x336>
 8005cd8:	07e1      	lsls	r1, r4, #31
 8005cda:	d508      	bpl.n	8005cee <_dtoa_r+0x366>
 8005cdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ce0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ce4:	f7fa fc88 	bl	80005f8 <__aeabi_dmul>
 8005ce8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005cec:	3601      	adds	r6, #1
 8005cee:	1064      	asrs	r4, r4, #1
 8005cf0:	3508      	adds	r5, #8
 8005cf2:	e7e5      	b.n	8005cc0 <_dtoa_r+0x338>
 8005cf4:	f000 80d2 	beq.w	8005e9c <_dtoa_r+0x514>
 8005cf8:	427c      	negs	r4, r7
 8005cfa:	4b92      	ldr	r3, [pc, #584]	@ (8005f44 <_dtoa_r+0x5bc>)
 8005cfc:	4d92      	ldr	r5, [pc, #584]	@ (8005f48 <_dtoa_r+0x5c0>)
 8005cfe:	f004 020f 	and.w	r2, r4, #15
 8005d02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d0e:	f7fa fc73 	bl	80005f8 <__aeabi_dmul>
 8005d12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d16:	1124      	asrs	r4, r4, #4
 8005d18:	2300      	movs	r3, #0
 8005d1a:	2602      	movs	r6, #2
 8005d1c:	2c00      	cmp	r4, #0
 8005d1e:	f040 80b2 	bne.w	8005e86 <_dtoa_r+0x4fe>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1d3      	bne.n	8005cce <_dtoa_r+0x346>
 8005d26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005d28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 80b7 	beq.w	8005ea0 <_dtoa_r+0x518>
 8005d32:	4b86      	ldr	r3, [pc, #536]	@ (8005f4c <_dtoa_r+0x5c4>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	4620      	mov	r0, r4
 8005d38:	4629      	mov	r1, r5
 8005d3a:	f7fa fecf 	bl	8000adc <__aeabi_dcmplt>
 8005d3e:	2800      	cmp	r0, #0
 8005d40:	f000 80ae 	beq.w	8005ea0 <_dtoa_r+0x518>
 8005d44:	9b07      	ldr	r3, [sp, #28]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	f000 80aa 	beq.w	8005ea0 <_dtoa_r+0x518>
 8005d4c:	9b00      	ldr	r3, [sp, #0]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	dd37      	ble.n	8005dc2 <_dtoa_r+0x43a>
 8005d52:	1e7b      	subs	r3, r7, #1
 8005d54:	9304      	str	r3, [sp, #16]
 8005d56:	4620      	mov	r0, r4
 8005d58:	4b7d      	ldr	r3, [pc, #500]	@ (8005f50 <_dtoa_r+0x5c8>)
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	4629      	mov	r1, r5
 8005d5e:	f7fa fc4b 	bl	80005f8 <__aeabi_dmul>
 8005d62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d66:	9c00      	ldr	r4, [sp, #0]
 8005d68:	3601      	adds	r6, #1
 8005d6a:	4630      	mov	r0, r6
 8005d6c:	f7fa fbda 	bl	8000524 <__aeabi_i2d>
 8005d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d74:	f7fa fc40 	bl	80005f8 <__aeabi_dmul>
 8005d78:	4b76      	ldr	r3, [pc, #472]	@ (8005f54 <_dtoa_r+0x5cc>)
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f7fa fa86 	bl	800028c <__adddf3>
 8005d80:	4605      	mov	r5, r0
 8005d82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005d86:	2c00      	cmp	r4, #0
 8005d88:	f040 808d 	bne.w	8005ea6 <_dtoa_r+0x51e>
 8005d8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d90:	4b71      	ldr	r3, [pc, #452]	@ (8005f58 <_dtoa_r+0x5d0>)
 8005d92:	2200      	movs	r2, #0
 8005d94:	f7fa fa78 	bl	8000288 <__aeabi_dsub>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005da0:	462a      	mov	r2, r5
 8005da2:	4633      	mov	r3, r6
 8005da4:	f7fa feb8 	bl	8000b18 <__aeabi_dcmpgt>
 8005da8:	2800      	cmp	r0, #0
 8005daa:	f040 828b 	bne.w	80062c4 <_dtoa_r+0x93c>
 8005dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005db2:	462a      	mov	r2, r5
 8005db4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005db8:	f7fa fe90 	bl	8000adc <__aeabi_dcmplt>
 8005dbc:	2800      	cmp	r0, #0
 8005dbe:	f040 8128 	bne.w	8006012 <_dtoa_r+0x68a>
 8005dc2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005dc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005dca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	f2c0 815a 	blt.w	8006086 <_dtoa_r+0x6fe>
 8005dd2:	2f0e      	cmp	r7, #14
 8005dd4:	f300 8157 	bgt.w	8006086 <_dtoa_r+0x6fe>
 8005dd8:	4b5a      	ldr	r3, [pc, #360]	@ (8005f44 <_dtoa_r+0x5bc>)
 8005dda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005dde:	ed93 7b00 	vldr	d7, [r3]
 8005de2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	ed8d 7b00 	vstr	d7, [sp]
 8005dea:	da03      	bge.n	8005df4 <_dtoa_r+0x46c>
 8005dec:	9b07      	ldr	r3, [sp, #28]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	f340 8101 	ble.w	8005ff6 <_dtoa_r+0x66e>
 8005df4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005df8:	4656      	mov	r6, sl
 8005dfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005dfe:	4620      	mov	r0, r4
 8005e00:	4629      	mov	r1, r5
 8005e02:	f7fa fd23 	bl	800084c <__aeabi_ddiv>
 8005e06:	f7fa fea7 	bl	8000b58 <__aeabi_d2iz>
 8005e0a:	4680      	mov	r8, r0
 8005e0c:	f7fa fb8a 	bl	8000524 <__aeabi_i2d>
 8005e10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e14:	f7fa fbf0 	bl	80005f8 <__aeabi_dmul>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	460b      	mov	r3, r1
 8005e1c:	4620      	mov	r0, r4
 8005e1e:	4629      	mov	r1, r5
 8005e20:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005e24:	f7fa fa30 	bl	8000288 <__aeabi_dsub>
 8005e28:	f806 4b01 	strb.w	r4, [r6], #1
 8005e2c:	9d07      	ldr	r5, [sp, #28]
 8005e2e:	eba6 040a 	sub.w	r4, r6, sl
 8005e32:	42a5      	cmp	r5, r4
 8005e34:	4602      	mov	r2, r0
 8005e36:	460b      	mov	r3, r1
 8005e38:	f040 8117 	bne.w	800606a <_dtoa_r+0x6e2>
 8005e3c:	f7fa fa26 	bl	800028c <__adddf3>
 8005e40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e44:	4604      	mov	r4, r0
 8005e46:	460d      	mov	r5, r1
 8005e48:	f7fa fe66 	bl	8000b18 <__aeabi_dcmpgt>
 8005e4c:	2800      	cmp	r0, #0
 8005e4e:	f040 80f9 	bne.w	8006044 <_dtoa_r+0x6bc>
 8005e52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e56:	4620      	mov	r0, r4
 8005e58:	4629      	mov	r1, r5
 8005e5a:	f7fa fe35 	bl	8000ac8 <__aeabi_dcmpeq>
 8005e5e:	b118      	cbz	r0, 8005e68 <_dtoa_r+0x4e0>
 8005e60:	f018 0f01 	tst.w	r8, #1
 8005e64:	f040 80ee 	bne.w	8006044 <_dtoa_r+0x6bc>
 8005e68:	4649      	mov	r1, r9
 8005e6a:	4658      	mov	r0, fp
 8005e6c:	f000 fc90 	bl	8006790 <_Bfree>
 8005e70:	2300      	movs	r3, #0
 8005e72:	7033      	strb	r3, [r6, #0]
 8005e74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005e76:	3701      	adds	r7, #1
 8005e78:	601f      	str	r7, [r3, #0]
 8005e7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f000 831d 	beq.w	80064bc <_dtoa_r+0xb34>
 8005e82:	601e      	str	r6, [r3, #0]
 8005e84:	e31a      	b.n	80064bc <_dtoa_r+0xb34>
 8005e86:	07e2      	lsls	r2, r4, #31
 8005e88:	d505      	bpl.n	8005e96 <_dtoa_r+0x50e>
 8005e8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005e8e:	f7fa fbb3 	bl	80005f8 <__aeabi_dmul>
 8005e92:	3601      	adds	r6, #1
 8005e94:	2301      	movs	r3, #1
 8005e96:	1064      	asrs	r4, r4, #1
 8005e98:	3508      	adds	r5, #8
 8005e9a:	e73f      	b.n	8005d1c <_dtoa_r+0x394>
 8005e9c:	2602      	movs	r6, #2
 8005e9e:	e742      	b.n	8005d26 <_dtoa_r+0x39e>
 8005ea0:	9c07      	ldr	r4, [sp, #28]
 8005ea2:	9704      	str	r7, [sp, #16]
 8005ea4:	e761      	b.n	8005d6a <_dtoa_r+0x3e2>
 8005ea6:	4b27      	ldr	r3, [pc, #156]	@ (8005f44 <_dtoa_r+0x5bc>)
 8005ea8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005eaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005eae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005eb2:	4454      	add	r4, sl
 8005eb4:	2900      	cmp	r1, #0
 8005eb6:	d053      	beq.n	8005f60 <_dtoa_r+0x5d8>
 8005eb8:	4928      	ldr	r1, [pc, #160]	@ (8005f5c <_dtoa_r+0x5d4>)
 8005eba:	2000      	movs	r0, #0
 8005ebc:	f7fa fcc6 	bl	800084c <__aeabi_ddiv>
 8005ec0:	4633      	mov	r3, r6
 8005ec2:	462a      	mov	r2, r5
 8005ec4:	f7fa f9e0 	bl	8000288 <__aeabi_dsub>
 8005ec8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005ecc:	4656      	mov	r6, sl
 8005ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ed2:	f7fa fe41 	bl	8000b58 <__aeabi_d2iz>
 8005ed6:	4605      	mov	r5, r0
 8005ed8:	f7fa fb24 	bl	8000524 <__aeabi_i2d>
 8005edc:	4602      	mov	r2, r0
 8005ede:	460b      	mov	r3, r1
 8005ee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ee4:	f7fa f9d0 	bl	8000288 <__aeabi_dsub>
 8005ee8:	3530      	adds	r5, #48	@ 0x30
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005ef2:	f806 5b01 	strb.w	r5, [r6], #1
 8005ef6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005efa:	f7fa fdef 	bl	8000adc <__aeabi_dcmplt>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d171      	bne.n	8005fe6 <_dtoa_r+0x65e>
 8005f02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005f06:	4911      	ldr	r1, [pc, #68]	@ (8005f4c <_dtoa_r+0x5c4>)
 8005f08:	2000      	movs	r0, #0
 8005f0a:	f7fa f9bd 	bl	8000288 <__aeabi_dsub>
 8005f0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005f12:	f7fa fde3 	bl	8000adc <__aeabi_dcmplt>
 8005f16:	2800      	cmp	r0, #0
 8005f18:	f040 8095 	bne.w	8006046 <_dtoa_r+0x6be>
 8005f1c:	42a6      	cmp	r6, r4
 8005f1e:	f43f af50 	beq.w	8005dc2 <_dtoa_r+0x43a>
 8005f22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005f26:	4b0a      	ldr	r3, [pc, #40]	@ (8005f50 <_dtoa_r+0x5c8>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	f7fa fb65 	bl	80005f8 <__aeabi_dmul>
 8005f2e:	4b08      	ldr	r3, [pc, #32]	@ (8005f50 <_dtoa_r+0x5c8>)
 8005f30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005f34:	2200      	movs	r2, #0
 8005f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f3a:	f7fa fb5d 	bl	80005f8 <__aeabi_dmul>
 8005f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005f42:	e7c4      	b.n	8005ece <_dtoa_r+0x546>
 8005f44:	080090c8 	.word	0x080090c8
 8005f48:	080090a0 	.word	0x080090a0
 8005f4c:	3ff00000 	.word	0x3ff00000
 8005f50:	40240000 	.word	0x40240000
 8005f54:	401c0000 	.word	0x401c0000
 8005f58:	40140000 	.word	0x40140000
 8005f5c:	3fe00000 	.word	0x3fe00000
 8005f60:	4631      	mov	r1, r6
 8005f62:	4628      	mov	r0, r5
 8005f64:	f7fa fb48 	bl	80005f8 <__aeabi_dmul>
 8005f68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005f6c:	9415      	str	r4, [sp, #84]	@ 0x54
 8005f6e:	4656      	mov	r6, sl
 8005f70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f74:	f7fa fdf0 	bl	8000b58 <__aeabi_d2iz>
 8005f78:	4605      	mov	r5, r0
 8005f7a:	f7fa fad3 	bl	8000524 <__aeabi_i2d>
 8005f7e:	4602      	mov	r2, r0
 8005f80:	460b      	mov	r3, r1
 8005f82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f86:	f7fa f97f 	bl	8000288 <__aeabi_dsub>
 8005f8a:	3530      	adds	r5, #48	@ 0x30
 8005f8c:	f806 5b01 	strb.w	r5, [r6], #1
 8005f90:	4602      	mov	r2, r0
 8005f92:	460b      	mov	r3, r1
 8005f94:	42a6      	cmp	r6, r4
 8005f96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005f9a:	f04f 0200 	mov.w	r2, #0
 8005f9e:	d124      	bne.n	8005fea <_dtoa_r+0x662>
 8005fa0:	4bac      	ldr	r3, [pc, #688]	@ (8006254 <_dtoa_r+0x8cc>)
 8005fa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005fa6:	f7fa f971 	bl	800028c <__adddf3>
 8005faa:	4602      	mov	r2, r0
 8005fac:	460b      	mov	r3, r1
 8005fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fb2:	f7fa fdb1 	bl	8000b18 <__aeabi_dcmpgt>
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d145      	bne.n	8006046 <_dtoa_r+0x6be>
 8005fba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005fbe:	49a5      	ldr	r1, [pc, #660]	@ (8006254 <_dtoa_r+0x8cc>)
 8005fc0:	2000      	movs	r0, #0
 8005fc2:	f7fa f961 	bl	8000288 <__aeabi_dsub>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	460b      	mov	r3, r1
 8005fca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005fce:	f7fa fd85 	bl	8000adc <__aeabi_dcmplt>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	f43f aef5 	beq.w	8005dc2 <_dtoa_r+0x43a>
 8005fd8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005fda:	1e73      	subs	r3, r6, #1
 8005fdc:	9315      	str	r3, [sp, #84]	@ 0x54
 8005fde:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005fe2:	2b30      	cmp	r3, #48	@ 0x30
 8005fe4:	d0f8      	beq.n	8005fd8 <_dtoa_r+0x650>
 8005fe6:	9f04      	ldr	r7, [sp, #16]
 8005fe8:	e73e      	b.n	8005e68 <_dtoa_r+0x4e0>
 8005fea:	4b9b      	ldr	r3, [pc, #620]	@ (8006258 <_dtoa_r+0x8d0>)
 8005fec:	f7fa fb04 	bl	80005f8 <__aeabi_dmul>
 8005ff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ff4:	e7bc      	b.n	8005f70 <_dtoa_r+0x5e8>
 8005ff6:	d10c      	bne.n	8006012 <_dtoa_r+0x68a>
 8005ff8:	4b98      	ldr	r3, [pc, #608]	@ (800625c <_dtoa_r+0x8d4>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006000:	f7fa fafa 	bl	80005f8 <__aeabi_dmul>
 8006004:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006008:	f7fa fd7c 	bl	8000b04 <__aeabi_dcmpge>
 800600c:	2800      	cmp	r0, #0
 800600e:	f000 8157 	beq.w	80062c0 <_dtoa_r+0x938>
 8006012:	2400      	movs	r4, #0
 8006014:	4625      	mov	r5, r4
 8006016:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006018:	43db      	mvns	r3, r3
 800601a:	9304      	str	r3, [sp, #16]
 800601c:	4656      	mov	r6, sl
 800601e:	2700      	movs	r7, #0
 8006020:	4621      	mov	r1, r4
 8006022:	4658      	mov	r0, fp
 8006024:	f000 fbb4 	bl	8006790 <_Bfree>
 8006028:	2d00      	cmp	r5, #0
 800602a:	d0dc      	beq.n	8005fe6 <_dtoa_r+0x65e>
 800602c:	b12f      	cbz	r7, 800603a <_dtoa_r+0x6b2>
 800602e:	42af      	cmp	r7, r5
 8006030:	d003      	beq.n	800603a <_dtoa_r+0x6b2>
 8006032:	4639      	mov	r1, r7
 8006034:	4658      	mov	r0, fp
 8006036:	f000 fbab 	bl	8006790 <_Bfree>
 800603a:	4629      	mov	r1, r5
 800603c:	4658      	mov	r0, fp
 800603e:	f000 fba7 	bl	8006790 <_Bfree>
 8006042:	e7d0      	b.n	8005fe6 <_dtoa_r+0x65e>
 8006044:	9704      	str	r7, [sp, #16]
 8006046:	4633      	mov	r3, r6
 8006048:	461e      	mov	r6, r3
 800604a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800604e:	2a39      	cmp	r2, #57	@ 0x39
 8006050:	d107      	bne.n	8006062 <_dtoa_r+0x6da>
 8006052:	459a      	cmp	sl, r3
 8006054:	d1f8      	bne.n	8006048 <_dtoa_r+0x6c0>
 8006056:	9a04      	ldr	r2, [sp, #16]
 8006058:	3201      	adds	r2, #1
 800605a:	9204      	str	r2, [sp, #16]
 800605c:	2230      	movs	r2, #48	@ 0x30
 800605e:	f88a 2000 	strb.w	r2, [sl]
 8006062:	781a      	ldrb	r2, [r3, #0]
 8006064:	3201      	adds	r2, #1
 8006066:	701a      	strb	r2, [r3, #0]
 8006068:	e7bd      	b.n	8005fe6 <_dtoa_r+0x65e>
 800606a:	4b7b      	ldr	r3, [pc, #492]	@ (8006258 <_dtoa_r+0x8d0>)
 800606c:	2200      	movs	r2, #0
 800606e:	f7fa fac3 	bl	80005f8 <__aeabi_dmul>
 8006072:	2200      	movs	r2, #0
 8006074:	2300      	movs	r3, #0
 8006076:	4604      	mov	r4, r0
 8006078:	460d      	mov	r5, r1
 800607a:	f7fa fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800607e:	2800      	cmp	r0, #0
 8006080:	f43f aebb 	beq.w	8005dfa <_dtoa_r+0x472>
 8006084:	e6f0      	b.n	8005e68 <_dtoa_r+0x4e0>
 8006086:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006088:	2a00      	cmp	r2, #0
 800608a:	f000 80db 	beq.w	8006244 <_dtoa_r+0x8bc>
 800608e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006090:	2a01      	cmp	r2, #1
 8006092:	f300 80bf 	bgt.w	8006214 <_dtoa_r+0x88c>
 8006096:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006098:	2a00      	cmp	r2, #0
 800609a:	f000 80b7 	beq.w	800620c <_dtoa_r+0x884>
 800609e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80060a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80060a4:	4646      	mov	r6, r8
 80060a6:	9a08      	ldr	r2, [sp, #32]
 80060a8:	2101      	movs	r1, #1
 80060aa:	441a      	add	r2, r3
 80060ac:	4658      	mov	r0, fp
 80060ae:	4498      	add	r8, r3
 80060b0:	9208      	str	r2, [sp, #32]
 80060b2:	f000 fc6b 	bl	800698c <__i2b>
 80060b6:	4605      	mov	r5, r0
 80060b8:	b15e      	cbz	r6, 80060d2 <_dtoa_r+0x74a>
 80060ba:	9b08      	ldr	r3, [sp, #32]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	dd08      	ble.n	80060d2 <_dtoa_r+0x74a>
 80060c0:	42b3      	cmp	r3, r6
 80060c2:	9a08      	ldr	r2, [sp, #32]
 80060c4:	bfa8      	it	ge
 80060c6:	4633      	movge	r3, r6
 80060c8:	eba8 0803 	sub.w	r8, r8, r3
 80060cc:	1af6      	subs	r6, r6, r3
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	9308      	str	r3, [sp, #32]
 80060d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80060d4:	b1f3      	cbz	r3, 8006114 <_dtoa_r+0x78c>
 80060d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060d8:	2b00      	cmp	r3, #0
 80060da:	f000 80b7 	beq.w	800624c <_dtoa_r+0x8c4>
 80060de:	b18c      	cbz	r4, 8006104 <_dtoa_r+0x77c>
 80060e0:	4629      	mov	r1, r5
 80060e2:	4622      	mov	r2, r4
 80060e4:	4658      	mov	r0, fp
 80060e6:	f000 fd11 	bl	8006b0c <__pow5mult>
 80060ea:	464a      	mov	r2, r9
 80060ec:	4601      	mov	r1, r0
 80060ee:	4605      	mov	r5, r0
 80060f0:	4658      	mov	r0, fp
 80060f2:	f000 fc61 	bl	80069b8 <__multiply>
 80060f6:	4649      	mov	r1, r9
 80060f8:	9004      	str	r0, [sp, #16]
 80060fa:	4658      	mov	r0, fp
 80060fc:	f000 fb48 	bl	8006790 <_Bfree>
 8006100:	9b04      	ldr	r3, [sp, #16]
 8006102:	4699      	mov	r9, r3
 8006104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006106:	1b1a      	subs	r2, r3, r4
 8006108:	d004      	beq.n	8006114 <_dtoa_r+0x78c>
 800610a:	4649      	mov	r1, r9
 800610c:	4658      	mov	r0, fp
 800610e:	f000 fcfd 	bl	8006b0c <__pow5mult>
 8006112:	4681      	mov	r9, r0
 8006114:	2101      	movs	r1, #1
 8006116:	4658      	mov	r0, fp
 8006118:	f000 fc38 	bl	800698c <__i2b>
 800611c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800611e:	4604      	mov	r4, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	f000 81cf 	beq.w	80064c4 <_dtoa_r+0xb3c>
 8006126:	461a      	mov	r2, r3
 8006128:	4601      	mov	r1, r0
 800612a:	4658      	mov	r0, fp
 800612c:	f000 fcee 	bl	8006b0c <__pow5mult>
 8006130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006132:	2b01      	cmp	r3, #1
 8006134:	4604      	mov	r4, r0
 8006136:	f300 8095 	bgt.w	8006264 <_dtoa_r+0x8dc>
 800613a:	9b02      	ldr	r3, [sp, #8]
 800613c:	2b00      	cmp	r3, #0
 800613e:	f040 8087 	bne.w	8006250 <_dtoa_r+0x8c8>
 8006142:	9b03      	ldr	r3, [sp, #12]
 8006144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006148:	2b00      	cmp	r3, #0
 800614a:	f040 8089 	bne.w	8006260 <_dtoa_r+0x8d8>
 800614e:	9b03      	ldr	r3, [sp, #12]
 8006150:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006154:	0d1b      	lsrs	r3, r3, #20
 8006156:	051b      	lsls	r3, r3, #20
 8006158:	b12b      	cbz	r3, 8006166 <_dtoa_r+0x7de>
 800615a:	9b08      	ldr	r3, [sp, #32]
 800615c:	3301      	adds	r3, #1
 800615e:	9308      	str	r3, [sp, #32]
 8006160:	f108 0801 	add.w	r8, r8, #1
 8006164:	2301      	movs	r3, #1
 8006166:	930a      	str	r3, [sp, #40]	@ 0x28
 8006168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 81b0 	beq.w	80064d0 <_dtoa_r+0xb48>
 8006170:	6923      	ldr	r3, [r4, #16]
 8006172:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006176:	6918      	ldr	r0, [r3, #16]
 8006178:	f000 fbbc 	bl	80068f4 <__hi0bits>
 800617c:	f1c0 0020 	rsb	r0, r0, #32
 8006180:	9b08      	ldr	r3, [sp, #32]
 8006182:	4418      	add	r0, r3
 8006184:	f010 001f 	ands.w	r0, r0, #31
 8006188:	d077      	beq.n	800627a <_dtoa_r+0x8f2>
 800618a:	f1c0 0320 	rsb	r3, r0, #32
 800618e:	2b04      	cmp	r3, #4
 8006190:	dd6b      	ble.n	800626a <_dtoa_r+0x8e2>
 8006192:	9b08      	ldr	r3, [sp, #32]
 8006194:	f1c0 001c 	rsb	r0, r0, #28
 8006198:	4403      	add	r3, r0
 800619a:	4480      	add	r8, r0
 800619c:	4406      	add	r6, r0
 800619e:	9308      	str	r3, [sp, #32]
 80061a0:	f1b8 0f00 	cmp.w	r8, #0
 80061a4:	dd05      	ble.n	80061b2 <_dtoa_r+0x82a>
 80061a6:	4649      	mov	r1, r9
 80061a8:	4642      	mov	r2, r8
 80061aa:	4658      	mov	r0, fp
 80061ac:	f000 fd08 	bl	8006bc0 <__lshift>
 80061b0:	4681      	mov	r9, r0
 80061b2:	9b08      	ldr	r3, [sp, #32]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	dd05      	ble.n	80061c4 <_dtoa_r+0x83c>
 80061b8:	4621      	mov	r1, r4
 80061ba:	461a      	mov	r2, r3
 80061bc:	4658      	mov	r0, fp
 80061be:	f000 fcff 	bl	8006bc0 <__lshift>
 80061c2:	4604      	mov	r4, r0
 80061c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d059      	beq.n	800627e <_dtoa_r+0x8f6>
 80061ca:	4621      	mov	r1, r4
 80061cc:	4648      	mov	r0, r9
 80061ce:	f000 fd63 	bl	8006c98 <__mcmp>
 80061d2:	2800      	cmp	r0, #0
 80061d4:	da53      	bge.n	800627e <_dtoa_r+0x8f6>
 80061d6:	1e7b      	subs	r3, r7, #1
 80061d8:	9304      	str	r3, [sp, #16]
 80061da:	4649      	mov	r1, r9
 80061dc:	2300      	movs	r3, #0
 80061de:	220a      	movs	r2, #10
 80061e0:	4658      	mov	r0, fp
 80061e2:	f000 faf7 	bl	80067d4 <__multadd>
 80061e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061e8:	4681      	mov	r9, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	f000 8172 	beq.w	80064d4 <_dtoa_r+0xb4c>
 80061f0:	2300      	movs	r3, #0
 80061f2:	4629      	mov	r1, r5
 80061f4:	220a      	movs	r2, #10
 80061f6:	4658      	mov	r0, fp
 80061f8:	f000 faec 	bl	80067d4 <__multadd>
 80061fc:	9b00      	ldr	r3, [sp, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	4605      	mov	r5, r0
 8006202:	dc67      	bgt.n	80062d4 <_dtoa_r+0x94c>
 8006204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006206:	2b02      	cmp	r3, #2
 8006208:	dc41      	bgt.n	800628e <_dtoa_r+0x906>
 800620a:	e063      	b.n	80062d4 <_dtoa_r+0x94c>
 800620c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800620e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006212:	e746      	b.n	80060a2 <_dtoa_r+0x71a>
 8006214:	9b07      	ldr	r3, [sp, #28]
 8006216:	1e5c      	subs	r4, r3, #1
 8006218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800621a:	42a3      	cmp	r3, r4
 800621c:	bfbf      	itttt	lt
 800621e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006220:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006222:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006224:	1ae3      	sublt	r3, r4, r3
 8006226:	bfb4      	ite	lt
 8006228:	18d2      	addlt	r2, r2, r3
 800622a:	1b1c      	subge	r4, r3, r4
 800622c:	9b07      	ldr	r3, [sp, #28]
 800622e:	bfbc      	itt	lt
 8006230:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006232:	2400      	movlt	r4, #0
 8006234:	2b00      	cmp	r3, #0
 8006236:	bfb5      	itete	lt
 8006238:	eba8 0603 	sublt.w	r6, r8, r3
 800623c:	9b07      	ldrge	r3, [sp, #28]
 800623e:	2300      	movlt	r3, #0
 8006240:	4646      	movge	r6, r8
 8006242:	e730      	b.n	80060a6 <_dtoa_r+0x71e>
 8006244:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006246:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006248:	4646      	mov	r6, r8
 800624a:	e735      	b.n	80060b8 <_dtoa_r+0x730>
 800624c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800624e:	e75c      	b.n	800610a <_dtoa_r+0x782>
 8006250:	2300      	movs	r3, #0
 8006252:	e788      	b.n	8006166 <_dtoa_r+0x7de>
 8006254:	3fe00000 	.word	0x3fe00000
 8006258:	40240000 	.word	0x40240000
 800625c:	40140000 	.word	0x40140000
 8006260:	9b02      	ldr	r3, [sp, #8]
 8006262:	e780      	b.n	8006166 <_dtoa_r+0x7de>
 8006264:	2300      	movs	r3, #0
 8006266:	930a      	str	r3, [sp, #40]	@ 0x28
 8006268:	e782      	b.n	8006170 <_dtoa_r+0x7e8>
 800626a:	d099      	beq.n	80061a0 <_dtoa_r+0x818>
 800626c:	9a08      	ldr	r2, [sp, #32]
 800626e:	331c      	adds	r3, #28
 8006270:	441a      	add	r2, r3
 8006272:	4498      	add	r8, r3
 8006274:	441e      	add	r6, r3
 8006276:	9208      	str	r2, [sp, #32]
 8006278:	e792      	b.n	80061a0 <_dtoa_r+0x818>
 800627a:	4603      	mov	r3, r0
 800627c:	e7f6      	b.n	800626c <_dtoa_r+0x8e4>
 800627e:	9b07      	ldr	r3, [sp, #28]
 8006280:	9704      	str	r7, [sp, #16]
 8006282:	2b00      	cmp	r3, #0
 8006284:	dc20      	bgt.n	80062c8 <_dtoa_r+0x940>
 8006286:	9300      	str	r3, [sp, #0]
 8006288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800628a:	2b02      	cmp	r3, #2
 800628c:	dd1e      	ble.n	80062cc <_dtoa_r+0x944>
 800628e:	9b00      	ldr	r3, [sp, #0]
 8006290:	2b00      	cmp	r3, #0
 8006292:	f47f aec0 	bne.w	8006016 <_dtoa_r+0x68e>
 8006296:	4621      	mov	r1, r4
 8006298:	2205      	movs	r2, #5
 800629a:	4658      	mov	r0, fp
 800629c:	f000 fa9a 	bl	80067d4 <__multadd>
 80062a0:	4601      	mov	r1, r0
 80062a2:	4604      	mov	r4, r0
 80062a4:	4648      	mov	r0, r9
 80062a6:	f000 fcf7 	bl	8006c98 <__mcmp>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	f77f aeb3 	ble.w	8006016 <_dtoa_r+0x68e>
 80062b0:	4656      	mov	r6, sl
 80062b2:	2331      	movs	r3, #49	@ 0x31
 80062b4:	f806 3b01 	strb.w	r3, [r6], #1
 80062b8:	9b04      	ldr	r3, [sp, #16]
 80062ba:	3301      	adds	r3, #1
 80062bc:	9304      	str	r3, [sp, #16]
 80062be:	e6ae      	b.n	800601e <_dtoa_r+0x696>
 80062c0:	9c07      	ldr	r4, [sp, #28]
 80062c2:	9704      	str	r7, [sp, #16]
 80062c4:	4625      	mov	r5, r4
 80062c6:	e7f3      	b.n	80062b0 <_dtoa_r+0x928>
 80062c8:	9b07      	ldr	r3, [sp, #28]
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 8104 	beq.w	80064dc <_dtoa_r+0xb54>
 80062d4:	2e00      	cmp	r6, #0
 80062d6:	dd05      	ble.n	80062e4 <_dtoa_r+0x95c>
 80062d8:	4629      	mov	r1, r5
 80062da:	4632      	mov	r2, r6
 80062dc:	4658      	mov	r0, fp
 80062de:	f000 fc6f 	bl	8006bc0 <__lshift>
 80062e2:	4605      	mov	r5, r0
 80062e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d05a      	beq.n	80063a0 <_dtoa_r+0xa18>
 80062ea:	6869      	ldr	r1, [r5, #4]
 80062ec:	4658      	mov	r0, fp
 80062ee:	f000 fa0f 	bl	8006710 <_Balloc>
 80062f2:	4606      	mov	r6, r0
 80062f4:	b928      	cbnz	r0, 8006302 <_dtoa_r+0x97a>
 80062f6:	4b84      	ldr	r3, [pc, #528]	@ (8006508 <_dtoa_r+0xb80>)
 80062f8:	4602      	mov	r2, r0
 80062fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80062fe:	f7ff bb5a 	b.w	80059b6 <_dtoa_r+0x2e>
 8006302:	692a      	ldr	r2, [r5, #16]
 8006304:	3202      	adds	r2, #2
 8006306:	0092      	lsls	r2, r2, #2
 8006308:	f105 010c 	add.w	r1, r5, #12
 800630c:	300c      	adds	r0, #12
 800630e:	f001 ff75 	bl	80081fc <memcpy>
 8006312:	2201      	movs	r2, #1
 8006314:	4631      	mov	r1, r6
 8006316:	4658      	mov	r0, fp
 8006318:	f000 fc52 	bl	8006bc0 <__lshift>
 800631c:	f10a 0301 	add.w	r3, sl, #1
 8006320:	9307      	str	r3, [sp, #28]
 8006322:	9b00      	ldr	r3, [sp, #0]
 8006324:	4453      	add	r3, sl
 8006326:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006328:	9b02      	ldr	r3, [sp, #8]
 800632a:	f003 0301 	and.w	r3, r3, #1
 800632e:	462f      	mov	r7, r5
 8006330:	930a      	str	r3, [sp, #40]	@ 0x28
 8006332:	4605      	mov	r5, r0
 8006334:	9b07      	ldr	r3, [sp, #28]
 8006336:	4621      	mov	r1, r4
 8006338:	3b01      	subs	r3, #1
 800633a:	4648      	mov	r0, r9
 800633c:	9300      	str	r3, [sp, #0]
 800633e:	f7ff fa99 	bl	8005874 <quorem>
 8006342:	4639      	mov	r1, r7
 8006344:	9002      	str	r0, [sp, #8]
 8006346:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800634a:	4648      	mov	r0, r9
 800634c:	f000 fca4 	bl	8006c98 <__mcmp>
 8006350:	462a      	mov	r2, r5
 8006352:	9008      	str	r0, [sp, #32]
 8006354:	4621      	mov	r1, r4
 8006356:	4658      	mov	r0, fp
 8006358:	f000 fcba 	bl	8006cd0 <__mdiff>
 800635c:	68c2      	ldr	r2, [r0, #12]
 800635e:	4606      	mov	r6, r0
 8006360:	bb02      	cbnz	r2, 80063a4 <_dtoa_r+0xa1c>
 8006362:	4601      	mov	r1, r0
 8006364:	4648      	mov	r0, r9
 8006366:	f000 fc97 	bl	8006c98 <__mcmp>
 800636a:	4602      	mov	r2, r0
 800636c:	4631      	mov	r1, r6
 800636e:	4658      	mov	r0, fp
 8006370:	920e      	str	r2, [sp, #56]	@ 0x38
 8006372:	f000 fa0d 	bl	8006790 <_Bfree>
 8006376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006378:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800637a:	9e07      	ldr	r6, [sp, #28]
 800637c:	ea43 0102 	orr.w	r1, r3, r2
 8006380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006382:	4319      	orrs	r1, r3
 8006384:	d110      	bne.n	80063a8 <_dtoa_r+0xa20>
 8006386:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800638a:	d029      	beq.n	80063e0 <_dtoa_r+0xa58>
 800638c:	9b08      	ldr	r3, [sp, #32]
 800638e:	2b00      	cmp	r3, #0
 8006390:	dd02      	ble.n	8006398 <_dtoa_r+0xa10>
 8006392:	9b02      	ldr	r3, [sp, #8]
 8006394:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006398:	9b00      	ldr	r3, [sp, #0]
 800639a:	f883 8000 	strb.w	r8, [r3]
 800639e:	e63f      	b.n	8006020 <_dtoa_r+0x698>
 80063a0:	4628      	mov	r0, r5
 80063a2:	e7bb      	b.n	800631c <_dtoa_r+0x994>
 80063a4:	2201      	movs	r2, #1
 80063a6:	e7e1      	b.n	800636c <_dtoa_r+0x9e4>
 80063a8:	9b08      	ldr	r3, [sp, #32]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	db04      	blt.n	80063b8 <_dtoa_r+0xa30>
 80063ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80063b0:	430b      	orrs	r3, r1
 80063b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80063b4:	430b      	orrs	r3, r1
 80063b6:	d120      	bne.n	80063fa <_dtoa_r+0xa72>
 80063b8:	2a00      	cmp	r2, #0
 80063ba:	dded      	ble.n	8006398 <_dtoa_r+0xa10>
 80063bc:	4649      	mov	r1, r9
 80063be:	2201      	movs	r2, #1
 80063c0:	4658      	mov	r0, fp
 80063c2:	f000 fbfd 	bl	8006bc0 <__lshift>
 80063c6:	4621      	mov	r1, r4
 80063c8:	4681      	mov	r9, r0
 80063ca:	f000 fc65 	bl	8006c98 <__mcmp>
 80063ce:	2800      	cmp	r0, #0
 80063d0:	dc03      	bgt.n	80063da <_dtoa_r+0xa52>
 80063d2:	d1e1      	bne.n	8006398 <_dtoa_r+0xa10>
 80063d4:	f018 0f01 	tst.w	r8, #1
 80063d8:	d0de      	beq.n	8006398 <_dtoa_r+0xa10>
 80063da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80063de:	d1d8      	bne.n	8006392 <_dtoa_r+0xa0a>
 80063e0:	9a00      	ldr	r2, [sp, #0]
 80063e2:	2339      	movs	r3, #57	@ 0x39
 80063e4:	7013      	strb	r3, [r2, #0]
 80063e6:	4633      	mov	r3, r6
 80063e8:	461e      	mov	r6, r3
 80063ea:	3b01      	subs	r3, #1
 80063ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80063f0:	2a39      	cmp	r2, #57	@ 0x39
 80063f2:	d052      	beq.n	800649a <_dtoa_r+0xb12>
 80063f4:	3201      	adds	r2, #1
 80063f6:	701a      	strb	r2, [r3, #0]
 80063f8:	e612      	b.n	8006020 <_dtoa_r+0x698>
 80063fa:	2a00      	cmp	r2, #0
 80063fc:	dd07      	ble.n	800640e <_dtoa_r+0xa86>
 80063fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006402:	d0ed      	beq.n	80063e0 <_dtoa_r+0xa58>
 8006404:	9a00      	ldr	r2, [sp, #0]
 8006406:	f108 0301 	add.w	r3, r8, #1
 800640a:	7013      	strb	r3, [r2, #0]
 800640c:	e608      	b.n	8006020 <_dtoa_r+0x698>
 800640e:	9b07      	ldr	r3, [sp, #28]
 8006410:	9a07      	ldr	r2, [sp, #28]
 8006412:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006416:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006418:	4293      	cmp	r3, r2
 800641a:	d028      	beq.n	800646e <_dtoa_r+0xae6>
 800641c:	4649      	mov	r1, r9
 800641e:	2300      	movs	r3, #0
 8006420:	220a      	movs	r2, #10
 8006422:	4658      	mov	r0, fp
 8006424:	f000 f9d6 	bl	80067d4 <__multadd>
 8006428:	42af      	cmp	r7, r5
 800642a:	4681      	mov	r9, r0
 800642c:	f04f 0300 	mov.w	r3, #0
 8006430:	f04f 020a 	mov.w	r2, #10
 8006434:	4639      	mov	r1, r7
 8006436:	4658      	mov	r0, fp
 8006438:	d107      	bne.n	800644a <_dtoa_r+0xac2>
 800643a:	f000 f9cb 	bl	80067d4 <__multadd>
 800643e:	4607      	mov	r7, r0
 8006440:	4605      	mov	r5, r0
 8006442:	9b07      	ldr	r3, [sp, #28]
 8006444:	3301      	adds	r3, #1
 8006446:	9307      	str	r3, [sp, #28]
 8006448:	e774      	b.n	8006334 <_dtoa_r+0x9ac>
 800644a:	f000 f9c3 	bl	80067d4 <__multadd>
 800644e:	4629      	mov	r1, r5
 8006450:	4607      	mov	r7, r0
 8006452:	2300      	movs	r3, #0
 8006454:	220a      	movs	r2, #10
 8006456:	4658      	mov	r0, fp
 8006458:	f000 f9bc 	bl	80067d4 <__multadd>
 800645c:	4605      	mov	r5, r0
 800645e:	e7f0      	b.n	8006442 <_dtoa_r+0xaba>
 8006460:	9b00      	ldr	r3, [sp, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	bfcc      	ite	gt
 8006466:	461e      	movgt	r6, r3
 8006468:	2601      	movle	r6, #1
 800646a:	4456      	add	r6, sl
 800646c:	2700      	movs	r7, #0
 800646e:	4649      	mov	r1, r9
 8006470:	2201      	movs	r2, #1
 8006472:	4658      	mov	r0, fp
 8006474:	f000 fba4 	bl	8006bc0 <__lshift>
 8006478:	4621      	mov	r1, r4
 800647a:	4681      	mov	r9, r0
 800647c:	f000 fc0c 	bl	8006c98 <__mcmp>
 8006480:	2800      	cmp	r0, #0
 8006482:	dcb0      	bgt.n	80063e6 <_dtoa_r+0xa5e>
 8006484:	d102      	bne.n	800648c <_dtoa_r+0xb04>
 8006486:	f018 0f01 	tst.w	r8, #1
 800648a:	d1ac      	bne.n	80063e6 <_dtoa_r+0xa5e>
 800648c:	4633      	mov	r3, r6
 800648e:	461e      	mov	r6, r3
 8006490:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006494:	2a30      	cmp	r2, #48	@ 0x30
 8006496:	d0fa      	beq.n	800648e <_dtoa_r+0xb06>
 8006498:	e5c2      	b.n	8006020 <_dtoa_r+0x698>
 800649a:	459a      	cmp	sl, r3
 800649c:	d1a4      	bne.n	80063e8 <_dtoa_r+0xa60>
 800649e:	9b04      	ldr	r3, [sp, #16]
 80064a0:	3301      	adds	r3, #1
 80064a2:	9304      	str	r3, [sp, #16]
 80064a4:	2331      	movs	r3, #49	@ 0x31
 80064a6:	f88a 3000 	strb.w	r3, [sl]
 80064aa:	e5b9      	b.n	8006020 <_dtoa_r+0x698>
 80064ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80064ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800650c <_dtoa_r+0xb84>
 80064b2:	b11b      	cbz	r3, 80064bc <_dtoa_r+0xb34>
 80064b4:	f10a 0308 	add.w	r3, sl, #8
 80064b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80064ba:	6013      	str	r3, [r2, #0]
 80064bc:	4650      	mov	r0, sl
 80064be:	b019      	add	sp, #100	@ 0x64
 80064c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	f77f ae37 	ble.w	800613a <_dtoa_r+0x7b2>
 80064cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80064d0:	2001      	movs	r0, #1
 80064d2:	e655      	b.n	8006180 <_dtoa_r+0x7f8>
 80064d4:	9b00      	ldr	r3, [sp, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f77f aed6 	ble.w	8006288 <_dtoa_r+0x900>
 80064dc:	4656      	mov	r6, sl
 80064de:	4621      	mov	r1, r4
 80064e0:	4648      	mov	r0, r9
 80064e2:	f7ff f9c7 	bl	8005874 <quorem>
 80064e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80064ea:	f806 8b01 	strb.w	r8, [r6], #1
 80064ee:	9b00      	ldr	r3, [sp, #0]
 80064f0:	eba6 020a 	sub.w	r2, r6, sl
 80064f4:	4293      	cmp	r3, r2
 80064f6:	ddb3      	ble.n	8006460 <_dtoa_r+0xad8>
 80064f8:	4649      	mov	r1, r9
 80064fa:	2300      	movs	r3, #0
 80064fc:	220a      	movs	r2, #10
 80064fe:	4658      	mov	r0, fp
 8006500:	f000 f968 	bl	80067d4 <__multadd>
 8006504:	4681      	mov	r9, r0
 8006506:	e7ea      	b.n	80064de <_dtoa_r+0xb56>
 8006508:	08009025 	.word	0x08009025
 800650c:	08008fa9 	.word	0x08008fa9

08006510 <_free_r>:
 8006510:	b538      	push	{r3, r4, r5, lr}
 8006512:	4605      	mov	r5, r0
 8006514:	2900      	cmp	r1, #0
 8006516:	d041      	beq.n	800659c <_free_r+0x8c>
 8006518:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800651c:	1f0c      	subs	r4, r1, #4
 800651e:	2b00      	cmp	r3, #0
 8006520:	bfb8      	it	lt
 8006522:	18e4      	addlt	r4, r4, r3
 8006524:	f000 f8e8 	bl	80066f8 <__malloc_lock>
 8006528:	4a1d      	ldr	r2, [pc, #116]	@ (80065a0 <_free_r+0x90>)
 800652a:	6813      	ldr	r3, [r2, #0]
 800652c:	b933      	cbnz	r3, 800653c <_free_r+0x2c>
 800652e:	6063      	str	r3, [r4, #4]
 8006530:	6014      	str	r4, [r2, #0]
 8006532:	4628      	mov	r0, r5
 8006534:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006538:	f000 b8e4 	b.w	8006704 <__malloc_unlock>
 800653c:	42a3      	cmp	r3, r4
 800653e:	d908      	bls.n	8006552 <_free_r+0x42>
 8006540:	6820      	ldr	r0, [r4, #0]
 8006542:	1821      	adds	r1, r4, r0
 8006544:	428b      	cmp	r3, r1
 8006546:	bf01      	itttt	eq
 8006548:	6819      	ldreq	r1, [r3, #0]
 800654a:	685b      	ldreq	r3, [r3, #4]
 800654c:	1809      	addeq	r1, r1, r0
 800654e:	6021      	streq	r1, [r4, #0]
 8006550:	e7ed      	b.n	800652e <_free_r+0x1e>
 8006552:	461a      	mov	r2, r3
 8006554:	685b      	ldr	r3, [r3, #4]
 8006556:	b10b      	cbz	r3, 800655c <_free_r+0x4c>
 8006558:	42a3      	cmp	r3, r4
 800655a:	d9fa      	bls.n	8006552 <_free_r+0x42>
 800655c:	6811      	ldr	r1, [r2, #0]
 800655e:	1850      	adds	r0, r2, r1
 8006560:	42a0      	cmp	r0, r4
 8006562:	d10b      	bne.n	800657c <_free_r+0x6c>
 8006564:	6820      	ldr	r0, [r4, #0]
 8006566:	4401      	add	r1, r0
 8006568:	1850      	adds	r0, r2, r1
 800656a:	4283      	cmp	r3, r0
 800656c:	6011      	str	r1, [r2, #0]
 800656e:	d1e0      	bne.n	8006532 <_free_r+0x22>
 8006570:	6818      	ldr	r0, [r3, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	6053      	str	r3, [r2, #4]
 8006576:	4408      	add	r0, r1
 8006578:	6010      	str	r0, [r2, #0]
 800657a:	e7da      	b.n	8006532 <_free_r+0x22>
 800657c:	d902      	bls.n	8006584 <_free_r+0x74>
 800657e:	230c      	movs	r3, #12
 8006580:	602b      	str	r3, [r5, #0]
 8006582:	e7d6      	b.n	8006532 <_free_r+0x22>
 8006584:	6820      	ldr	r0, [r4, #0]
 8006586:	1821      	adds	r1, r4, r0
 8006588:	428b      	cmp	r3, r1
 800658a:	bf04      	itt	eq
 800658c:	6819      	ldreq	r1, [r3, #0]
 800658e:	685b      	ldreq	r3, [r3, #4]
 8006590:	6063      	str	r3, [r4, #4]
 8006592:	bf04      	itt	eq
 8006594:	1809      	addeq	r1, r1, r0
 8006596:	6021      	streq	r1, [r4, #0]
 8006598:	6054      	str	r4, [r2, #4]
 800659a:	e7ca      	b.n	8006532 <_free_r+0x22>
 800659c:	bd38      	pop	{r3, r4, r5, pc}
 800659e:	bf00      	nop
 80065a0:	2000044c 	.word	0x2000044c

080065a4 <malloc>:
 80065a4:	4b02      	ldr	r3, [pc, #8]	@ (80065b0 <malloc+0xc>)
 80065a6:	4601      	mov	r1, r0
 80065a8:	6818      	ldr	r0, [r3, #0]
 80065aa:	f000 b825 	b.w	80065f8 <_malloc_r>
 80065ae:	bf00      	nop
 80065b0:	20000018 	.word	0x20000018

080065b4 <sbrk_aligned>:
 80065b4:	b570      	push	{r4, r5, r6, lr}
 80065b6:	4e0f      	ldr	r6, [pc, #60]	@ (80065f4 <sbrk_aligned+0x40>)
 80065b8:	460c      	mov	r4, r1
 80065ba:	6831      	ldr	r1, [r6, #0]
 80065bc:	4605      	mov	r5, r0
 80065be:	b911      	cbnz	r1, 80065c6 <sbrk_aligned+0x12>
 80065c0:	f001 fe0c 	bl	80081dc <_sbrk_r>
 80065c4:	6030      	str	r0, [r6, #0]
 80065c6:	4621      	mov	r1, r4
 80065c8:	4628      	mov	r0, r5
 80065ca:	f001 fe07 	bl	80081dc <_sbrk_r>
 80065ce:	1c43      	adds	r3, r0, #1
 80065d0:	d103      	bne.n	80065da <sbrk_aligned+0x26>
 80065d2:	f04f 34ff 	mov.w	r4, #4294967295
 80065d6:	4620      	mov	r0, r4
 80065d8:	bd70      	pop	{r4, r5, r6, pc}
 80065da:	1cc4      	adds	r4, r0, #3
 80065dc:	f024 0403 	bic.w	r4, r4, #3
 80065e0:	42a0      	cmp	r0, r4
 80065e2:	d0f8      	beq.n	80065d6 <sbrk_aligned+0x22>
 80065e4:	1a21      	subs	r1, r4, r0
 80065e6:	4628      	mov	r0, r5
 80065e8:	f001 fdf8 	bl	80081dc <_sbrk_r>
 80065ec:	3001      	adds	r0, #1
 80065ee:	d1f2      	bne.n	80065d6 <sbrk_aligned+0x22>
 80065f0:	e7ef      	b.n	80065d2 <sbrk_aligned+0x1e>
 80065f2:	bf00      	nop
 80065f4:	20000448 	.word	0x20000448

080065f8 <_malloc_r>:
 80065f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065fc:	1ccd      	adds	r5, r1, #3
 80065fe:	f025 0503 	bic.w	r5, r5, #3
 8006602:	3508      	adds	r5, #8
 8006604:	2d0c      	cmp	r5, #12
 8006606:	bf38      	it	cc
 8006608:	250c      	movcc	r5, #12
 800660a:	2d00      	cmp	r5, #0
 800660c:	4606      	mov	r6, r0
 800660e:	db01      	blt.n	8006614 <_malloc_r+0x1c>
 8006610:	42a9      	cmp	r1, r5
 8006612:	d904      	bls.n	800661e <_malloc_r+0x26>
 8006614:	230c      	movs	r3, #12
 8006616:	6033      	str	r3, [r6, #0]
 8006618:	2000      	movs	r0, #0
 800661a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800661e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80066f4 <_malloc_r+0xfc>
 8006622:	f000 f869 	bl	80066f8 <__malloc_lock>
 8006626:	f8d8 3000 	ldr.w	r3, [r8]
 800662a:	461c      	mov	r4, r3
 800662c:	bb44      	cbnz	r4, 8006680 <_malloc_r+0x88>
 800662e:	4629      	mov	r1, r5
 8006630:	4630      	mov	r0, r6
 8006632:	f7ff ffbf 	bl	80065b4 <sbrk_aligned>
 8006636:	1c43      	adds	r3, r0, #1
 8006638:	4604      	mov	r4, r0
 800663a:	d158      	bne.n	80066ee <_malloc_r+0xf6>
 800663c:	f8d8 4000 	ldr.w	r4, [r8]
 8006640:	4627      	mov	r7, r4
 8006642:	2f00      	cmp	r7, #0
 8006644:	d143      	bne.n	80066ce <_malloc_r+0xd6>
 8006646:	2c00      	cmp	r4, #0
 8006648:	d04b      	beq.n	80066e2 <_malloc_r+0xea>
 800664a:	6823      	ldr	r3, [r4, #0]
 800664c:	4639      	mov	r1, r7
 800664e:	4630      	mov	r0, r6
 8006650:	eb04 0903 	add.w	r9, r4, r3
 8006654:	f001 fdc2 	bl	80081dc <_sbrk_r>
 8006658:	4581      	cmp	r9, r0
 800665a:	d142      	bne.n	80066e2 <_malloc_r+0xea>
 800665c:	6821      	ldr	r1, [r4, #0]
 800665e:	1a6d      	subs	r5, r5, r1
 8006660:	4629      	mov	r1, r5
 8006662:	4630      	mov	r0, r6
 8006664:	f7ff ffa6 	bl	80065b4 <sbrk_aligned>
 8006668:	3001      	adds	r0, #1
 800666a:	d03a      	beq.n	80066e2 <_malloc_r+0xea>
 800666c:	6823      	ldr	r3, [r4, #0]
 800666e:	442b      	add	r3, r5
 8006670:	6023      	str	r3, [r4, #0]
 8006672:	f8d8 3000 	ldr.w	r3, [r8]
 8006676:	685a      	ldr	r2, [r3, #4]
 8006678:	bb62      	cbnz	r2, 80066d4 <_malloc_r+0xdc>
 800667a:	f8c8 7000 	str.w	r7, [r8]
 800667e:	e00f      	b.n	80066a0 <_malloc_r+0xa8>
 8006680:	6822      	ldr	r2, [r4, #0]
 8006682:	1b52      	subs	r2, r2, r5
 8006684:	d420      	bmi.n	80066c8 <_malloc_r+0xd0>
 8006686:	2a0b      	cmp	r2, #11
 8006688:	d917      	bls.n	80066ba <_malloc_r+0xc2>
 800668a:	1961      	adds	r1, r4, r5
 800668c:	42a3      	cmp	r3, r4
 800668e:	6025      	str	r5, [r4, #0]
 8006690:	bf18      	it	ne
 8006692:	6059      	strne	r1, [r3, #4]
 8006694:	6863      	ldr	r3, [r4, #4]
 8006696:	bf08      	it	eq
 8006698:	f8c8 1000 	streq.w	r1, [r8]
 800669c:	5162      	str	r2, [r4, r5]
 800669e:	604b      	str	r3, [r1, #4]
 80066a0:	4630      	mov	r0, r6
 80066a2:	f000 f82f 	bl	8006704 <__malloc_unlock>
 80066a6:	f104 000b 	add.w	r0, r4, #11
 80066aa:	1d23      	adds	r3, r4, #4
 80066ac:	f020 0007 	bic.w	r0, r0, #7
 80066b0:	1ac2      	subs	r2, r0, r3
 80066b2:	bf1c      	itt	ne
 80066b4:	1a1b      	subne	r3, r3, r0
 80066b6:	50a3      	strne	r3, [r4, r2]
 80066b8:	e7af      	b.n	800661a <_malloc_r+0x22>
 80066ba:	6862      	ldr	r2, [r4, #4]
 80066bc:	42a3      	cmp	r3, r4
 80066be:	bf0c      	ite	eq
 80066c0:	f8c8 2000 	streq.w	r2, [r8]
 80066c4:	605a      	strne	r2, [r3, #4]
 80066c6:	e7eb      	b.n	80066a0 <_malloc_r+0xa8>
 80066c8:	4623      	mov	r3, r4
 80066ca:	6864      	ldr	r4, [r4, #4]
 80066cc:	e7ae      	b.n	800662c <_malloc_r+0x34>
 80066ce:	463c      	mov	r4, r7
 80066d0:	687f      	ldr	r7, [r7, #4]
 80066d2:	e7b6      	b.n	8006642 <_malloc_r+0x4a>
 80066d4:	461a      	mov	r2, r3
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	42a3      	cmp	r3, r4
 80066da:	d1fb      	bne.n	80066d4 <_malloc_r+0xdc>
 80066dc:	2300      	movs	r3, #0
 80066de:	6053      	str	r3, [r2, #4]
 80066e0:	e7de      	b.n	80066a0 <_malloc_r+0xa8>
 80066e2:	230c      	movs	r3, #12
 80066e4:	6033      	str	r3, [r6, #0]
 80066e6:	4630      	mov	r0, r6
 80066e8:	f000 f80c 	bl	8006704 <__malloc_unlock>
 80066ec:	e794      	b.n	8006618 <_malloc_r+0x20>
 80066ee:	6005      	str	r5, [r0, #0]
 80066f0:	e7d6      	b.n	80066a0 <_malloc_r+0xa8>
 80066f2:	bf00      	nop
 80066f4:	2000044c 	.word	0x2000044c

080066f8 <__malloc_lock>:
 80066f8:	4801      	ldr	r0, [pc, #4]	@ (8006700 <__malloc_lock+0x8>)
 80066fa:	f7ff b8b2 	b.w	8005862 <__retarget_lock_acquire_recursive>
 80066fe:	bf00      	nop
 8006700:	20000444 	.word	0x20000444

08006704 <__malloc_unlock>:
 8006704:	4801      	ldr	r0, [pc, #4]	@ (800670c <__malloc_unlock+0x8>)
 8006706:	f7ff b8ad 	b.w	8005864 <__retarget_lock_release_recursive>
 800670a:	bf00      	nop
 800670c:	20000444 	.word	0x20000444

08006710 <_Balloc>:
 8006710:	b570      	push	{r4, r5, r6, lr}
 8006712:	69c6      	ldr	r6, [r0, #28]
 8006714:	4604      	mov	r4, r0
 8006716:	460d      	mov	r5, r1
 8006718:	b976      	cbnz	r6, 8006738 <_Balloc+0x28>
 800671a:	2010      	movs	r0, #16
 800671c:	f7ff ff42 	bl	80065a4 <malloc>
 8006720:	4602      	mov	r2, r0
 8006722:	61e0      	str	r0, [r4, #28]
 8006724:	b920      	cbnz	r0, 8006730 <_Balloc+0x20>
 8006726:	4b18      	ldr	r3, [pc, #96]	@ (8006788 <_Balloc+0x78>)
 8006728:	4818      	ldr	r0, [pc, #96]	@ (800678c <_Balloc+0x7c>)
 800672a:	216b      	movs	r1, #107	@ 0x6b
 800672c:	f001 fd7c 	bl	8008228 <__assert_func>
 8006730:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006734:	6006      	str	r6, [r0, #0]
 8006736:	60c6      	str	r6, [r0, #12]
 8006738:	69e6      	ldr	r6, [r4, #28]
 800673a:	68f3      	ldr	r3, [r6, #12]
 800673c:	b183      	cbz	r3, 8006760 <_Balloc+0x50>
 800673e:	69e3      	ldr	r3, [r4, #28]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006746:	b9b8      	cbnz	r0, 8006778 <_Balloc+0x68>
 8006748:	2101      	movs	r1, #1
 800674a:	fa01 f605 	lsl.w	r6, r1, r5
 800674e:	1d72      	adds	r2, r6, #5
 8006750:	0092      	lsls	r2, r2, #2
 8006752:	4620      	mov	r0, r4
 8006754:	f001 fd86 	bl	8008264 <_calloc_r>
 8006758:	b160      	cbz	r0, 8006774 <_Balloc+0x64>
 800675a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800675e:	e00e      	b.n	800677e <_Balloc+0x6e>
 8006760:	2221      	movs	r2, #33	@ 0x21
 8006762:	2104      	movs	r1, #4
 8006764:	4620      	mov	r0, r4
 8006766:	f001 fd7d 	bl	8008264 <_calloc_r>
 800676a:	69e3      	ldr	r3, [r4, #28]
 800676c:	60f0      	str	r0, [r6, #12]
 800676e:	68db      	ldr	r3, [r3, #12]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d1e4      	bne.n	800673e <_Balloc+0x2e>
 8006774:	2000      	movs	r0, #0
 8006776:	bd70      	pop	{r4, r5, r6, pc}
 8006778:	6802      	ldr	r2, [r0, #0]
 800677a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800677e:	2300      	movs	r3, #0
 8006780:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006784:	e7f7      	b.n	8006776 <_Balloc+0x66>
 8006786:	bf00      	nop
 8006788:	08008fb6 	.word	0x08008fb6
 800678c:	08009036 	.word	0x08009036

08006790 <_Bfree>:
 8006790:	b570      	push	{r4, r5, r6, lr}
 8006792:	69c6      	ldr	r6, [r0, #28]
 8006794:	4605      	mov	r5, r0
 8006796:	460c      	mov	r4, r1
 8006798:	b976      	cbnz	r6, 80067b8 <_Bfree+0x28>
 800679a:	2010      	movs	r0, #16
 800679c:	f7ff ff02 	bl	80065a4 <malloc>
 80067a0:	4602      	mov	r2, r0
 80067a2:	61e8      	str	r0, [r5, #28]
 80067a4:	b920      	cbnz	r0, 80067b0 <_Bfree+0x20>
 80067a6:	4b09      	ldr	r3, [pc, #36]	@ (80067cc <_Bfree+0x3c>)
 80067a8:	4809      	ldr	r0, [pc, #36]	@ (80067d0 <_Bfree+0x40>)
 80067aa:	218f      	movs	r1, #143	@ 0x8f
 80067ac:	f001 fd3c 	bl	8008228 <__assert_func>
 80067b0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067b4:	6006      	str	r6, [r0, #0]
 80067b6:	60c6      	str	r6, [r0, #12]
 80067b8:	b13c      	cbz	r4, 80067ca <_Bfree+0x3a>
 80067ba:	69eb      	ldr	r3, [r5, #28]
 80067bc:	6862      	ldr	r2, [r4, #4]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80067c4:	6021      	str	r1, [r4, #0]
 80067c6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80067ca:	bd70      	pop	{r4, r5, r6, pc}
 80067cc:	08008fb6 	.word	0x08008fb6
 80067d0:	08009036 	.word	0x08009036

080067d4 <__multadd>:
 80067d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80067d8:	690d      	ldr	r5, [r1, #16]
 80067da:	4607      	mov	r7, r0
 80067dc:	460c      	mov	r4, r1
 80067de:	461e      	mov	r6, r3
 80067e0:	f101 0c14 	add.w	ip, r1, #20
 80067e4:	2000      	movs	r0, #0
 80067e6:	f8dc 3000 	ldr.w	r3, [ip]
 80067ea:	b299      	uxth	r1, r3
 80067ec:	fb02 6101 	mla	r1, r2, r1, r6
 80067f0:	0c1e      	lsrs	r6, r3, #16
 80067f2:	0c0b      	lsrs	r3, r1, #16
 80067f4:	fb02 3306 	mla	r3, r2, r6, r3
 80067f8:	b289      	uxth	r1, r1
 80067fa:	3001      	adds	r0, #1
 80067fc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006800:	4285      	cmp	r5, r0
 8006802:	f84c 1b04 	str.w	r1, [ip], #4
 8006806:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800680a:	dcec      	bgt.n	80067e6 <__multadd+0x12>
 800680c:	b30e      	cbz	r6, 8006852 <__multadd+0x7e>
 800680e:	68a3      	ldr	r3, [r4, #8]
 8006810:	42ab      	cmp	r3, r5
 8006812:	dc19      	bgt.n	8006848 <__multadd+0x74>
 8006814:	6861      	ldr	r1, [r4, #4]
 8006816:	4638      	mov	r0, r7
 8006818:	3101      	adds	r1, #1
 800681a:	f7ff ff79 	bl	8006710 <_Balloc>
 800681e:	4680      	mov	r8, r0
 8006820:	b928      	cbnz	r0, 800682e <__multadd+0x5a>
 8006822:	4602      	mov	r2, r0
 8006824:	4b0c      	ldr	r3, [pc, #48]	@ (8006858 <__multadd+0x84>)
 8006826:	480d      	ldr	r0, [pc, #52]	@ (800685c <__multadd+0x88>)
 8006828:	21ba      	movs	r1, #186	@ 0xba
 800682a:	f001 fcfd 	bl	8008228 <__assert_func>
 800682e:	6922      	ldr	r2, [r4, #16]
 8006830:	3202      	adds	r2, #2
 8006832:	f104 010c 	add.w	r1, r4, #12
 8006836:	0092      	lsls	r2, r2, #2
 8006838:	300c      	adds	r0, #12
 800683a:	f001 fcdf 	bl	80081fc <memcpy>
 800683e:	4621      	mov	r1, r4
 8006840:	4638      	mov	r0, r7
 8006842:	f7ff ffa5 	bl	8006790 <_Bfree>
 8006846:	4644      	mov	r4, r8
 8006848:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800684c:	3501      	adds	r5, #1
 800684e:	615e      	str	r6, [r3, #20]
 8006850:	6125      	str	r5, [r4, #16]
 8006852:	4620      	mov	r0, r4
 8006854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006858:	08009025 	.word	0x08009025
 800685c:	08009036 	.word	0x08009036

08006860 <__s2b>:
 8006860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006864:	460c      	mov	r4, r1
 8006866:	4615      	mov	r5, r2
 8006868:	461f      	mov	r7, r3
 800686a:	2209      	movs	r2, #9
 800686c:	3308      	adds	r3, #8
 800686e:	4606      	mov	r6, r0
 8006870:	fb93 f3f2 	sdiv	r3, r3, r2
 8006874:	2100      	movs	r1, #0
 8006876:	2201      	movs	r2, #1
 8006878:	429a      	cmp	r2, r3
 800687a:	db09      	blt.n	8006890 <__s2b+0x30>
 800687c:	4630      	mov	r0, r6
 800687e:	f7ff ff47 	bl	8006710 <_Balloc>
 8006882:	b940      	cbnz	r0, 8006896 <__s2b+0x36>
 8006884:	4602      	mov	r2, r0
 8006886:	4b19      	ldr	r3, [pc, #100]	@ (80068ec <__s2b+0x8c>)
 8006888:	4819      	ldr	r0, [pc, #100]	@ (80068f0 <__s2b+0x90>)
 800688a:	21d3      	movs	r1, #211	@ 0xd3
 800688c:	f001 fccc 	bl	8008228 <__assert_func>
 8006890:	0052      	lsls	r2, r2, #1
 8006892:	3101      	adds	r1, #1
 8006894:	e7f0      	b.n	8006878 <__s2b+0x18>
 8006896:	9b08      	ldr	r3, [sp, #32]
 8006898:	6143      	str	r3, [r0, #20]
 800689a:	2d09      	cmp	r5, #9
 800689c:	f04f 0301 	mov.w	r3, #1
 80068a0:	6103      	str	r3, [r0, #16]
 80068a2:	dd16      	ble.n	80068d2 <__s2b+0x72>
 80068a4:	f104 0909 	add.w	r9, r4, #9
 80068a8:	46c8      	mov	r8, r9
 80068aa:	442c      	add	r4, r5
 80068ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 80068b0:	4601      	mov	r1, r0
 80068b2:	3b30      	subs	r3, #48	@ 0x30
 80068b4:	220a      	movs	r2, #10
 80068b6:	4630      	mov	r0, r6
 80068b8:	f7ff ff8c 	bl	80067d4 <__multadd>
 80068bc:	45a0      	cmp	r8, r4
 80068be:	d1f5      	bne.n	80068ac <__s2b+0x4c>
 80068c0:	f1a5 0408 	sub.w	r4, r5, #8
 80068c4:	444c      	add	r4, r9
 80068c6:	1b2d      	subs	r5, r5, r4
 80068c8:	1963      	adds	r3, r4, r5
 80068ca:	42bb      	cmp	r3, r7
 80068cc:	db04      	blt.n	80068d8 <__s2b+0x78>
 80068ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068d2:	340a      	adds	r4, #10
 80068d4:	2509      	movs	r5, #9
 80068d6:	e7f6      	b.n	80068c6 <__s2b+0x66>
 80068d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 80068dc:	4601      	mov	r1, r0
 80068de:	3b30      	subs	r3, #48	@ 0x30
 80068e0:	220a      	movs	r2, #10
 80068e2:	4630      	mov	r0, r6
 80068e4:	f7ff ff76 	bl	80067d4 <__multadd>
 80068e8:	e7ee      	b.n	80068c8 <__s2b+0x68>
 80068ea:	bf00      	nop
 80068ec:	08009025 	.word	0x08009025
 80068f0:	08009036 	.word	0x08009036

080068f4 <__hi0bits>:
 80068f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80068f8:	4603      	mov	r3, r0
 80068fa:	bf36      	itet	cc
 80068fc:	0403      	lslcc	r3, r0, #16
 80068fe:	2000      	movcs	r0, #0
 8006900:	2010      	movcc	r0, #16
 8006902:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006906:	bf3c      	itt	cc
 8006908:	021b      	lslcc	r3, r3, #8
 800690a:	3008      	addcc	r0, #8
 800690c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006910:	bf3c      	itt	cc
 8006912:	011b      	lslcc	r3, r3, #4
 8006914:	3004      	addcc	r0, #4
 8006916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800691a:	bf3c      	itt	cc
 800691c:	009b      	lslcc	r3, r3, #2
 800691e:	3002      	addcc	r0, #2
 8006920:	2b00      	cmp	r3, #0
 8006922:	db05      	blt.n	8006930 <__hi0bits+0x3c>
 8006924:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006928:	f100 0001 	add.w	r0, r0, #1
 800692c:	bf08      	it	eq
 800692e:	2020      	moveq	r0, #32
 8006930:	4770      	bx	lr

08006932 <__lo0bits>:
 8006932:	6803      	ldr	r3, [r0, #0]
 8006934:	4602      	mov	r2, r0
 8006936:	f013 0007 	ands.w	r0, r3, #7
 800693a:	d00b      	beq.n	8006954 <__lo0bits+0x22>
 800693c:	07d9      	lsls	r1, r3, #31
 800693e:	d421      	bmi.n	8006984 <__lo0bits+0x52>
 8006940:	0798      	lsls	r0, r3, #30
 8006942:	bf49      	itett	mi
 8006944:	085b      	lsrmi	r3, r3, #1
 8006946:	089b      	lsrpl	r3, r3, #2
 8006948:	2001      	movmi	r0, #1
 800694a:	6013      	strmi	r3, [r2, #0]
 800694c:	bf5c      	itt	pl
 800694e:	6013      	strpl	r3, [r2, #0]
 8006950:	2002      	movpl	r0, #2
 8006952:	4770      	bx	lr
 8006954:	b299      	uxth	r1, r3
 8006956:	b909      	cbnz	r1, 800695c <__lo0bits+0x2a>
 8006958:	0c1b      	lsrs	r3, r3, #16
 800695a:	2010      	movs	r0, #16
 800695c:	b2d9      	uxtb	r1, r3
 800695e:	b909      	cbnz	r1, 8006964 <__lo0bits+0x32>
 8006960:	3008      	adds	r0, #8
 8006962:	0a1b      	lsrs	r3, r3, #8
 8006964:	0719      	lsls	r1, r3, #28
 8006966:	bf04      	itt	eq
 8006968:	091b      	lsreq	r3, r3, #4
 800696a:	3004      	addeq	r0, #4
 800696c:	0799      	lsls	r1, r3, #30
 800696e:	bf04      	itt	eq
 8006970:	089b      	lsreq	r3, r3, #2
 8006972:	3002      	addeq	r0, #2
 8006974:	07d9      	lsls	r1, r3, #31
 8006976:	d403      	bmi.n	8006980 <__lo0bits+0x4e>
 8006978:	085b      	lsrs	r3, r3, #1
 800697a:	f100 0001 	add.w	r0, r0, #1
 800697e:	d003      	beq.n	8006988 <__lo0bits+0x56>
 8006980:	6013      	str	r3, [r2, #0]
 8006982:	4770      	bx	lr
 8006984:	2000      	movs	r0, #0
 8006986:	4770      	bx	lr
 8006988:	2020      	movs	r0, #32
 800698a:	4770      	bx	lr

0800698c <__i2b>:
 800698c:	b510      	push	{r4, lr}
 800698e:	460c      	mov	r4, r1
 8006990:	2101      	movs	r1, #1
 8006992:	f7ff febd 	bl	8006710 <_Balloc>
 8006996:	4602      	mov	r2, r0
 8006998:	b928      	cbnz	r0, 80069a6 <__i2b+0x1a>
 800699a:	4b05      	ldr	r3, [pc, #20]	@ (80069b0 <__i2b+0x24>)
 800699c:	4805      	ldr	r0, [pc, #20]	@ (80069b4 <__i2b+0x28>)
 800699e:	f240 1145 	movw	r1, #325	@ 0x145
 80069a2:	f001 fc41 	bl	8008228 <__assert_func>
 80069a6:	2301      	movs	r3, #1
 80069a8:	6144      	str	r4, [r0, #20]
 80069aa:	6103      	str	r3, [r0, #16]
 80069ac:	bd10      	pop	{r4, pc}
 80069ae:	bf00      	nop
 80069b0:	08009025 	.word	0x08009025
 80069b4:	08009036 	.word	0x08009036

080069b8 <__multiply>:
 80069b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069bc:	4614      	mov	r4, r2
 80069be:	690a      	ldr	r2, [r1, #16]
 80069c0:	6923      	ldr	r3, [r4, #16]
 80069c2:	429a      	cmp	r2, r3
 80069c4:	bfa8      	it	ge
 80069c6:	4623      	movge	r3, r4
 80069c8:	460f      	mov	r7, r1
 80069ca:	bfa4      	itt	ge
 80069cc:	460c      	movge	r4, r1
 80069ce:	461f      	movge	r7, r3
 80069d0:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80069d4:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80069d8:	68a3      	ldr	r3, [r4, #8]
 80069da:	6861      	ldr	r1, [r4, #4]
 80069dc:	eb0a 0609 	add.w	r6, sl, r9
 80069e0:	42b3      	cmp	r3, r6
 80069e2:	b085      	sub	sp, #20
 80069e4:	bfb8      	it	lt
 80069e6:	3101      	addlt	r1, #1
 80069e8:	f7ff fe92 	bl	8006710 <_Balloc>
 80069ec:	b930      	cbnz	r0, 80069fc <__multiply+0x44>
 80069ee:	4602      	mov	r2, r0
 80069f0:	4b44      	ldr	r3, [pc, #272]	@ (8006b04 <__multiply+0x14c>)
 80069f2:	4845      	ldr	r0, [pc, #276]	@ (8006b08 <__multiply+0x150>)
 80069f4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80069f8:	f001 fc16 	bl	8008228 <__assert_func>
 80069fc:	f100 0514 	add.w	r5, r0, #20
 8006a00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006a04:	462b      	mov	r3, r5
 8006a06:	2200      	movs	r2, #0
 8006a08:	4543      	cmp	r3, r8
 8006a0a:	d321      	bcc.n	8006a50 <__multiply+0x98>
 8006a0c:	f107 0114 	add.w	r1, r7, #20
 8006a10:	f104 0214 	add.w	r2, r4, #20
 8006a14:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006a18:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006a1c:	9302      	str	r3, [sp, #8]
 8006a1e:	1b13      	subs	r3, r2, r4
 8006a20:	3b15      	subs	r3, #21
 8006a22:	f023 0303 	bic.w	r3, r3, #3
 8006a26:	3304      	adds	r3, #4
 8006a28:	f104 0715 	add.w	r7, r4, #21
 8006a2c:	42ba      	cmp	r2, r7
 8006a2e:	bf38      	it	cc
 8006a30:	2304      	movcc	r3, #4
 8006a32:	9301      	str	r3, [sp, #4]
 8006a34:	9b02      	ldr	r3, [sp, #8]
 8006a36:	9103      	str	r1, [sp, #12]
 8006a38:	428b      	cmp	r3, r1
 8006a3a:	d80c      	bhi.n	8006a56 <__multiply+0x9e>
 8006a3c:	2e00      	cmp	r6, #0
 8006a3e:	dd03      	ble.n	8006a48 <__multiply+0x90>
 8006a40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d05b      	beq.n	8006b00 <__multiply+0x148>
 8006a48:	6106      	str	r6, [r0, #16]
 8006a4a:	b005      	add	sp, #20
 8006a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a50:	f843 2b04 	str.w	r2, [r3], #4
 8006a54:	e7d8      	b.n	8006a08 <__multiply+0x50>
 8006a56:	f8b1 a000 	ldrh.w	sl, [r1]
 8006a5a:	f1ba 0f00 	cmp.w	sl, #0
 8006a5e:	d024      	beq.n	8006aaa <__multiply+0xf2>
 8006a60:	f104 0e14 	add.w	lr, r4, #20
 8006a64:	46a9      	mov	r9, r5
 8006a66:	f04f 0c00 	mov.w	ip, #0
 8006a6a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006a6e:	f8d9 3000 	ldr.w	r3, [r9]
 8006a72:	fa1f fb87 	uxth.w	fp, r7
 8006a76:	b29b      	uxth	r3, r3
 8006a78:	fb0a 330b 	mla	r3, sl, fp, r3
 8006a7c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006a80:	f8d9 7000 	ldr.w	r7, [r9]
 8006a84:	4463      	add	r3, ip
 8006a86:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006a8a:	fb0a c70b 	mla	r7, sl, fp, ip
 8006a8e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006a92:	b29b      	uxth	r3, r3
 8006a94:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006a98:	4572      	cmp	r2, lr
 8006a9a:	f849 3b04 	str.w	r3, [r9], #4
 8006a9e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006aa2:	d8e2      	bhi.n	8006a6a <__multiply+0xb2>
 8006aa4:	9b01      	ldr	r3, [sp, #4]
 8006aa6:	f845 c003 	str.w	ip, [r5, r3]
 8006aaa:	9b03      	ldr	r3, [sp, #12]
 8006aac:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006ab0:	3104      	adds	r1, #4
 8006ab2:	f1b9 0f00 	cmp.w	r9, #0
 8006ab6:	d021      	beq.n	8006afc <__multiply+0x144>
 8006ab8:	682b      	ldr	r3, [r5, #0]
 8006aba:	f104 0c14 	add.w	ip, r4, #20
 8006abe:	46ae      	mov	lr, r5
 8006ac0:	f04f 0a00 	mov.w	sl, #0
 8006ac4:	f8bc b000 	ldrh.w	fp, [ip]
 8006ac8:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8006acc:	fb09 770b 	mla	r7, r9, fp, r7
 8006ad0:	4457      	add	r7, sl
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006ad8:	f84e 3b04 	str.w	r3, [lr], #4
 8006adc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006ae0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ae4:	f8be 3000 	ldrh.w	r3, [lr]
 8006ae8:	fb09 330a 	mla	r3, r9, sl, r3
 8006aec:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8006af0:	4562      	cmp	r2, ip
 8006af2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006af6:	d8e5      	bhi.n	8006ac4 <__multiply+0x10c>
 8006af8:	9f01      	ldr	r7, [sp, #4]
 8006afa:	51eb      	str	r3, [r5, r7]
 8006afc:	3504      	adds	r5, #4
 8006afe:	e799      	b.n	8006a34 <__multiply+0x7c>
 8006b00:	3e01      	subs	r6, #1
 8006b02:	e79b      	b.n	8006a3c <__multiply+0x84>
 8006b04:	08009025 	.word	0x08009025
 8006b08:	08009036 	.word	0x08009036

08006b0c <__pow5mult>:
 8006b0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b10:	4615      	mov	r5, r2
 8006b12:	f012 0203 	ands.w	r2, r2, #3
 8006b16:	4607      	mov	r7, r0
 8006b18:	460e      	mov	r6, r1
 8006b1a:	d007      	beq.n	8006b2c <__pow5mult+0x20>
 8006b1c:	4c25      	ldr	r4, [pc, #148]	@ (8006bb4 <__pow5mult+0xa8>)
 8006b1e:	3a01      	subs	r2, #1
 8006b20:	2300      	movs	r3, #0
 8006b22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006b26:	f7ff fe55 	bl	80067d4 <__multadd>
 8006b2a:	4606      	mov	r6, r0
 8006b2c:	10ad      	asrs	r5, r5, #2
 8006b2e:	d03d      	beq.n	8006bac <__pow5mult+0xa0>
 8006b30:	69fc      	ldr	r4, [r7, #28]
 8006b32:	b97c      	cbnz	r4, 8006b54 <__pow5mult+0x48>
 8006b34:	2010      	movs	r0, #16
 8006b36:	f7ff fd35 	bl	80065a4 <malloc>
 8006b3a:	4602      	mov	r2, r0
 8006b3c:	61f8      	str	r0, [r7, #28]
 8006b3e:	b928      	cbnz	r0, 8006b4c <__pow5mult+0x40>
 8006b40:	4b1d      	ldr	r3, [pc, #116]	@ (8006bb8 <__pow5mult+0xac>)
 8006b42:	481e      	ldr	r0, [pc, #120]	@ (8006bbc <__pow5mult+0xb0>)
 8006b44:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006b48:	f001 fb6e 	bl	8008228 <__assert_func>
 8006b4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006b50:	6004      	str	r4, [r0, #0]
 8006b52:	60c4      	str	r4, [r0, #12]
 8006b54:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006b58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006b5c:	b94c      	cbnz	r4, 8006b72 <__pow5mult+0x66>
 8006b5e:	f240 2171 	movw	r1, #625	@ 0x271
 8006b62:	4638      	mov	r0, r7
 8006b64:	f7ff ff12 	bl	800698c <__i2b>
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006b6e:	4604      	mov	r4, r0
 8006b70:	6003      	str	r3, [r0, #0]
 8006b72:	f04f 0900 	mov.w	r9, #0
 8006b76:	07eb      	lsls	r3, r5, #31
 8006b78:	d50a      	bpl.n	8006b90 <__pow5mult+0x84>
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	4622      	mov	r2, r4
 8006b7e:	4638      	mov	r0, r7
 8006b80:	f7ff ff1a 	bl	80069b8 <__multiply>
 8006b84:	4631      	mov	r1, r6
 8006b86:	4680      	mov	r8, r0
 8006b88:	4638      	mov	r0, r7
 8006b8a:	f7ff fe01 	bl	8006790 <_Bfree>
 8006b8e:	4646      	mov	r6, r8
 8006b90:	106d      	asrs	r5, r5, #1
 8006b92:	d00b      	beq.n	8006bac <__pow5mult+0xa0>
 8006b94:	6820      	ldr	r0, [r4, #0]
 8006b96:	b938      	cbnz	r0, 8006ba8 <__pow5mult+0x9c>
 8006b98:	4622      	mov	r2, r4
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	4638      	mov	r0, r7
 8006b9e:	f7ff ff0b 	bl	80069b8 <__multiply>
 8006ba2:	6020      	str	r0, [r4, #0]
 8006ba4:	f8c0 9000 	str.w	r9, [r0]
 8006ba8:	4604      	mov	r4, r0
 8006baa:	e7e4      	b.n	8006b76 <__pow5mult+0x6a>
 8006bac:	4630      	mov	r0, r6
 8006bae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bb2:	bf00      	nop
 8006bb4:	08009090 	.word	0x08009090
 8006bb8:	08008fb6 	.word	0x08008fb6
 8006bbc:	08009036 	.word	0x08009036

08006bc0 <__lshift>:
 8006bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006bc4:	460c      	mov	r4, r1
 8006bc6:	6849      	ldr	r1, [r1, #4]
 8006bc8:	6923      	ldr	r3, [r4, #16]
 8006bca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006bce:	68a3      	ldr	r3, [r4, #8]
 8006bd0:	4607      	mov	r7, r0
 8006bd2:	4691      	mov	r9, r2
 8006bd4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006bd8:	f108 0601 	add.w	r6, r8, #1
 8006bdc:	42b3      	cmp	r3, r6
 8006bde:	db0b      	blt.n	8006bf8 <__lshift+0x38>
 8006be0:	4638      	mov	r0, r7
 8006be2:	f7ff fd95 	bl	8006710 <_Balloc>
 8006be6:	4605      	mov	r5, r0
 8006be8:	b948      	cbnz	r0, 8006bfe <__lshift+0x3e>
 8006bea:	4602      	mov	r2, r0
 8006bec:	4b28      	ldr	r3, [pc, #160]	@ (8006c90 <__lshift+0xd0>)
 8006bee:	4829      	ldr	r0, [pc, #164]	@ (8006c94 <__lshift+0xd4>)
 8006bf0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006bf4:	f001 fb18 	bl	8008228 <__assert_func>
 8006bf8:	3101      	adds	r1, #1
 8006bfa:	005b      	lsls	r3, r3, #1
 8006bfc:	e7ee      	b.n	8006bdc <__lshift+0x1c>
 8006bfe:	2300      	movs	r3, #0
 8006c00:	f100 0114 	add.w	r1, r0, #20
 8006c04:	f100 0210 	add.w	r2, r0, #16
 8006c08:	4618      	mov	r0, r3
 8006c0a:	4553      	cmp	r3, sl
 8006c0c:	db33      	blt.n	8006c76 <__lshift+0xb6>
 8006c0e:	6920      	ldr	r0, [r4, #16]
 8006c10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006c14:	f104 0314 	add.w	r3, r4, #20
 8006c18:	f019 091f 	ands.w	r9, r9, #31
 8006c1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006c20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006c24:	d02b      	beq.n	8006c7e <__lshift+0xbe>
 8006c26:	f1c9 0e20 	rsb	lr, r9, #32
 8006c2a:	468a      	mov	sl, r1
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	6818      	ldr	r0, [r3, #0]
 8006c30:	fa00 f009 	lsl.w	r0, r0, r9
 8006c34:	4310      	orrs	r0, r2
 8006c36:	f84a 0b04 	str.w	r0, [sl], #4
 8006c3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c3e:	459c      	cmp	ip, r3
 8006c40:	fa22 f20e 	lsr.w	r2, r2, lr
 8006c44:	d8f3      	bhi.n	8006c2e <__lshift+0x6e>
 8006c46:	ebac 0304 	sub.w	r3, ip, r4
 8006c4a:	3b15      	subs	r3, #21
 8006c4c:	f023 0303 	bic.w	r3, r3, #3
 8006c50:	3304      	adds	r3, #4
 8006c52:	f104 0015 	add.w	r0, r4, #21
 8006c56:	4584      	cmp	ip, r0
 8006c58:	bf38      	it	cc
 8006c5a:	2304      	movcc	r3, #4
 8006c5c:	50ca      	str	r2, [r1, r3]
 8006c5e:	b10a      	cbz	r2, 8006c64 <__lshift+0xa4>
 8006c60:	f108 0602 	add.w	r6, r8, #2
 8006c64:	3e01      	subs	r6, #1
 8006c66:	4638      	mov	r0, r7
 8006c68:	612e      	str	r6, [r5, #16]
 8006c6a:	4621      	mov	r1, r4
 8006c6c:	f7ff fd90 	bl	8006790 <_Bfree>
 8006c70:	4628      	mov	r0, r5
 8006c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c76:	f842 0f04 	str.w	r0, [r2, #4]!
 8006c7a:	3301      	adds	r3, #1
 8006c7c:	e7c5      	b.n	8006c0a <__lshift+0x4a>
 8006c7e:	3904      	subs	r1, #4
 8006c80:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c84:	f841 2f04 	str.w	r2, [r1, #4]!
 8006c88:	459c      	cmp	ip, r3
 8006c8a:	d8f9      	bhi.n	8006c80 <__lshift+0xc0>
 8006c8c:	e7ea      	b.n	8006c64 <__lshift+0xa4>
 8006c8e:	bf00      	nop
 8006c90:	08009025 	.word	0x08009025
 8006c94:	08009036 	.word	0x08009036

08006c98 <__mcmp>:
 8006c98:	690a      	ldr	r2, [r1, #16]
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	6900      	ldr	r0, [r0, #16]
 8006c9e:	1a80      	subs	r0, r0, r2
 8006ca0:	b530      	push	{r4, r5, lr}
 8006ca2:	d10e      	bne.n	8006cc2 <__mcmp+0x2a>
 8006ca4:	3314      	adds	r3, #20
 8006ca6:	3114      	adds	r1, #20
 8006ca8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006cac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006cb0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006cb4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006cb8:	4295      	cmp	r5, r2
 8006cba:	d003      	beq.n	8006cc4 <__mcmp+0x2c>
 8006cbc:	d205      	bcs.n	8006cca <__mcmp+0x32>
 8006cbe:	f04f 30ff 	mov.w	r0, #4294967295
 8006cc2:	bd30      	pop	{r4, r5, pc}
 8006cc4:	42a3      	cmp	r3, r4
 8006cc6:	d3f3      	bcc.n	8006cb0 <__mcmp+0x18>
 8006cc8:	e7fb      	b.n	8006cc2 <__mcmp+0x2a>
 8006cca:	2001      	movs	r0, #1
 8006ccc:	e7f9      	b.n	8006cc2 <__mcmp+0x2a>
	...

08006cd0 <__mdiff>:
 8006cd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	4689      	mov	r9, r1
 8006cd6:	4606      	mov	r6, r0
 8006cd8:	4611      	mov	r1, r2
 8006cda:	4648      	mov	r0, r9
 8006cdc:	4614      	mov	r4, r2
 8006cde:	f7ff ffdb 	bl	8006c98 <__mcmp>
 8006ce2:	1e05      	subs	r5, r0, #0
 8006ce4:	d112      	bne.n	8006d0c <__mdiff+0x3c>
 8006ce6:	4629      	mov	r1, r5
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f7ff fd11 	bl	8006710 <_Balloc>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	b928      	cbnz	r0, 8006cfe <__mdiff+0x2e>
 8006cf2:	4b3f      	ldr	r3, [pc, #252]	@ (8006df0 <__mdiff+0x120>)
 8006cf4:	f240 2137 	movw	r1, #567	@ 0x237
 8006cf8:	483e      	ldr	r0, [pc, #248]	@ (8006df4 <__mdiff+0x124>)
 8006cfa:	f001 fa95 	bl	8008228 <__assert_func>
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006d04:	4610      	mov	r0, r2
 8006d06:	b003      	add	sp, #12
 8006d08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d0c:	bfbc      	itt	lt
 8006d0e:	464b      	movlt	r3, r9
 8006d10:	46a1      	movlt	r9, r4
 8006d12:	4630      	mov	r0, r6
 8006d14:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006d18:	bfba      	itte	lt
 8006d1a:	461c      	movlt	r4, r3
 8006d1c:	2501      	movlt	r5, #1
 8006d1e:	2500      	movge	r5, #0
 8006d20:	f7ff fcf6 	bl	8006710 <_Balloc>
 8006d24:	4602      	mov	r2, r0
 8006d26:	b918      	cbnz	r0, 8006d30 <__mdiff+0x60>
 8006d28:	4b31      	ldr	r3, [pc, #196]	@ (8006df0 <__mdiff+0x120>)
 8006d2a:	f240 2145 	movw	r1, #581	@ 0x245
 8006d2e:	e7e3      	b.n	8006cf8 <__mdiff+0x28>
 8006d30:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006d34:	6926      	ldr	r6, [r4, #16]
 8006d36:	60c5      	str	r5, [r0, #12]
 8006d38:	f109 0310 	add.w	r3, r9, #16
 8006d3c:	f109 0514 	add.w	r5, r9, #20
 8006d40:	f104 0e14 	add.w	lr, r4, #20
 8006d44:	f100 0b14 	add.w	fp, r0, #20
 8006d48:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006d4c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006d50:	9301      	str	r3, [sp, #4]
 8006d52:	46d9      	mov	r9, fp
 8006d54:	f04f 0c00 	mov.w	ip, #0
 8006d58:	9b01      	ldr	r3, [sp, #4]
 8006d5a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006d5e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006d62:	9301      	str	r3, [sp, #4]
 8006d64:	fa1f f38a 	uxth.w	r3, sl
 8006d68:	4619      	mov	r1, r3
 8006d6a:	b283      	uxth	r3, r0
 8006d6c:	1acb      	subs	r3, r1, r3
 8006d6e:	0c00      	lsrs	r0, r0, #16
 8006d70:	4463      	add	r3, ip
 8006d72:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006d76:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006d7a:	b29b      	uxth	r3, r3
 8006d7c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006d80:	4576      	cmp	r6, lr
 8006d82:	f849 3b04 	str.w	r3, [r9], #4
 8006d86:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006d8a:	d8e5      	bhi.n	8006d58 <__mdiff+0x88>
 8006d8c:	1b33      	subs	r3, r6, r4
 8006d8e:	3b15      	subs	r3, #21
 8006d90:	f023 0303 	bic.w	r3, r3, #3
 8006d94:	3415      	adds	r4, #21
 8006d96:	3304      	adds	r3, #4
 8006d98:	42a6      	cmp	r6, r4
 8006d9a:	bf38      	it	cc
 8006d9c:	2304      	movcc	r3, #4
 8006d9e:	441d      	add	r5, r3
 8006da0:	445b      	add	r3, fp
 8006da2:	461e      	mov	r6, r3
 8006da4:	462c      	mov	r4, r5
 8006da6:	4544      	cmp	r4, r8
 8006da8:	d30e      	bcc.n	8006dc8 <__mdiff+0xf8>
 8006daa:	f108 0103 	add.w	r1, r8, #3
 8006dae:	1b49      	subs	r1, r1, r5
 8006db0:	f021 0103 	bic.w	r1, r1, #3
 8006db4:	3d03      	subs	r5, #3
 8006db6:	45a8      	cmp	r8, r5
 8006db8:	bf38      	it	cc
 8006dba:	2100      	movcc	r1, #0
 8006dbc:	440b      	add	r3, r1
 8006dbe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006dc2:	b191      	cbz	r1, 8006dea <__mdiff+0x11a>
 8006dc4:	6117      	str	r7, [r2, #16]
 8006dc6:	e79d      	b.n	8006d04 <__mdiff+0x34>
 8006dc8:	f854 1b04 	ldr.w	r1, [r4], #4
 8006dcc:	46e6      	mov	lr, ip
 8006dce:	0c08      	lsrs	r0, r1, #16
 8006dd0:	fa1c fc81 	uxtah	ip, ip, r1
 8006dd4:	4471      	add	r1, lr
 8006dd6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006dda:	b289      	uxth	r1, r1
 8006ddc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006de0:	f846 1b04 	str.w	r1, [r6], #4
 8006de4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006de8:	e7dd      	b.n	8006da6 <__mdiff+0xd6>
 8006dea:	3f01      	subs	r7, #1
 8006dec:	e7e7      	b.n	8006dbe <__mdiff+0xee>
 8006dee:	bf00      	nop
 8006df0:	08009025 	.word	0x08009025
 8006df4:	08009036 	.word	0x08009036

08006df8 <__ulp>:
 8006df8:	b082      	sub	sp, #8
 8006dfa:	ed8d 0b00 	vstr	d0, [sp]
 8006dfe:	9a01      	ldr	r2, [sp, #4]
 8006e00:	4b0f      	ldr	r3, [pc, #60]	@ (8006e40 <__ulp+0x48>)
 8006e02:	4013      	ands	r3, r2
 8006e04:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	dc08      	bgt.n	8006e1e <__ulp+0x26>
 8006e0c:	425b      	negs	r3, r3
 8006e0e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006e12:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006e16:	da04      	bge.n	8006e22 <__ulp+0x2a>
 8006e18:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006e1c:	4113      	asrs	r3, r2
 8006e1e:	2200      	movs	r2, #0
 8006e20:	e008      	b.n	8006e34 <__ulp+0x3c>
 8006e22:	f1a2 0314 	sub.w	r3, r2, #20
 8006e26:	2b1e      	cmp	r3, #30
 8006e28:	bfda      	itte	le
 8006e2a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006e2e:	40da      	lsrle	r2, r3
 8006e30:	2201      	movgt	r2, #1
 8006e32:	2300      	movs	r3, #0
 8006e34:	4619      	mov	r1, r3
 8006e36:	4610      	mov	r0, r2
 8006e38:	ec41 0b10 	vmov	d0, r0, r1
 8006e3c:	b002      	add	sp, #8
 8006e3e:	4770      	bx	lr
 8006e40:	7ff00000 	.word	0x7ff00000

08006e44 <__b2d>:
 8006e44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e48:	6906      	ldr	r6, [r0, #16]
 8006e4a:	f100 0814 	add.w	r8, r0, #20
 8006e4e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006e52:	1f37      	subs	r7, r6, #4
 8006e54:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006e58:	4610      	mov	r0, r2
 8006e5a:	f7ff fd4b 	bl	80068f4 <__hi0bits>
 8006e5e:	f1c0 0320 	rsb	r3, r0, #32
 8006e62:	280a      	cmp	r0, #10
 8006e64:	600b      	str	r3, [r1, #0]
 8006e66:	491b      	ldr	r1, [pc, #108]	@ (8006ed4 <__b2d+0x90>)
 8006e68:	dc15      	bgt.n	8006e96 <__b2d+0x52>
 8006e6a:	f1c0 0c0b 	rsb	ip, r0, #11
 8006e6e:	fa22 f30c 	lsr.w	r3, r2, ip
 8006e72:	45b8      	cmp	r8, r7
 8006e74:	ea43 0501 	orr.w	r5, r3, r1
 8006e78:	bf34      	ite	cc
 8006e7a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006e7e:	2300      	movcs	r3, #0
 8006e80:	3015      	adds	r0, #21
 8006e82:	fa02 f000 	lsl.w	r0, r2, r0
 8006e86:	fa23 f30c 	lsr.w	r3, r3, ip
 8006e8a:	4303      	orrs	r3, r0
 8006e8c:	461c      	mov	r4, r3
 8006e8e:	ec45 4b10 	vmov	d0, r4, r5
 8006e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e96:	45b8      	cmp	r8, r7
 8006e98:	bf3a      	itte	cc
 8006e9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006e9e:	f1a6 0708 	subcc.w	r7, r6, #8
 8006ea2:	2300      	movcs	r3, #0
 8006ea4:	380b      	subs	r0, #11
 8006ea6:	d012      	beq.n	8006ece <__b2d+0x8a>
 8006ea8:	f1c0 0120 	rsb	r1, r0, #32
 8006eac:	fa23 f401 	lsr.w	r4, r3, r1
 8006eb0:	4082      	lsls	r2, r0
 8006eb2:	4322      	orrs	r2, r4
 8006eb4:	4547      	cmp	r7, r8
 8006eb6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8006eba:	bf8c      	ite	hi
 8006ebc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006ec0:	2200      	movls	r2, #0
 8006ec2:	4083      	lsls	r3, r0
 8006ec4:	40ca      	lsrs	r2, r1
 8006ec6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	e7de      	b.n	8006e8c <__b2d+0x48>
 8006ece:	ea42 0501 	orr.w	r5, r2, r1
 8006ed2:	e7db      	b.n	8006e8c <__b2d+0x48>
 8006ed4:	3ff00000 	.word	0x3ff00000

08006ed8 <__d2b>:
 8006ed8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006edc:	460f      	mov	r7, r1
 8006ede:	2101      	movs	r1, #1
 8006ee0:	ec59 8b10 	vmov	r8, r9, d0
 8006ee4:	4616      	mov	r6, r2
 8006ee6:	f7ff fc13 	bl	8006710 <_Balloc>
 8006eea:	4604      	mov	r4, r0
 8006eec:	b930      	cbnz	r0, 8006efc <__d2b+0x24>
 8006eee:	4602      	mov	r2, r0
 8006ef0:	4b23      	ldr	r3, [pc, #140]	@ (8006f80 <__d2b+0xa8>)
 8006ef2:	4824      	ldr	r0, [pc, #144]	@ (8006f84 <__d2b+0xac>)
 8006ef4:	f240 310f 	movw	r1, #783	@ 0x30f
 8006ef8:	f001 f996 	bl	8008228 <__assert_func>
 8006efc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006f00:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006f04:	b10d      	cbz	r5, 8006f0a <__d2b+0x32>
 8006f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006f0a:	9301      	str	r3, [sp, #4]
 8006f0c:	f1b8 0300 	subs.w	r3, r8, #0
 8006f10:	d023      	beq.n	8006f5a <__d2b+0x82>
 8006f12:	4668      	mov	r0, sp
 8006f14:	9300      	str	r3, [sp, #0]
 8006f16:	f7ff fd0c 	bl	8006932 <__lo0bits>
 8006f1a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006f1e:	b1d0      	cbz	r0, 8006f56 <__d2b+0x7e>
 8006f20:	f1c0 0320 	rsb	r3, r0, #32
 8006f24:	fa02 f303 	lsl.w	r3, r2, r3
 8006f28:	430b      	orrs	r3, r1
 8006f2a:	40c2      	lsrs	r2, r0
 8006f2c:	6163      	str	r3, [r4, #20]
 8006f2e:	9201      	str	r2, [sp, #4]
 8006f30:	9b01      	ldr	r3, [sp, #4]
 8006f32:	61a3      	str	r3, [r4, #24]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	bf0c      	ite	eq
 8006f38:	2201      	moveq	r2, #1
 8006f3a:	2202      	movne	r2, #2
 8006f3c:	6122      	str	r2, [r4, #16]
 8006f3e:	b1a5      	cbz	r5, 8006f6a <__d2b+0x92>
 8006f40:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006f44:	4405      	add	r5, r0
 8006f46:	603d      	str	r5, [r7, #0]
 8006f48:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006f4c:	6030      	str	r0, [r6, #0]
 8006f4e:	4620      	mov	r0, r4
 8006f50:	b003      	add	sp, #12
 8006f52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006f56:	6161      	str	r1, [r4, #20]
 8006f58:	e7ea      	b.n	8006f30 <__d2b+0x58>
 8006f5a:	a801      	add	r0, sp, #4
 8006f5c:	f7ff fce9 	bl	8006932 <__lo0bits>
 8006f60:	9b01      	ldr	r3, [sp, #4]
 8006f62:	6163      	str	r3, [r4, #20]
 8006f64:	3020      	adds	r0, #32
 8006f66:	2201      	movs	r2, #1
 8006f68:	e7e8      	b.n	8006f3c <__d2b+0x64>
 8006f6a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006f6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006f72:	6038      	str	r0, [r7, #0]
 8006f74:	6918      	ldr	r0, [r3, #16]
 8006f76:	f7ff fcbd 	bl	80068f4 <__hi0bits>
 8006f7a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006f7e:	e7e5      	b.n	8006f4c <__d2b+0x74>
 8006f80:	08009025 	.word	0x08009025
 8006f84:	08009036 	.word	0x08009036

08006f88 <__ratio>:
 8006f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8c:	b085      	sub	sp, #20
 8006f8e:	e9cd 1000 	strd	r1, r0, [sp]
 8006f92:	a902      	add	r1, sp, #8
 8006f94:	f7ff ff56 	bl	8006e44 <__b2d>
 8006f98:	9800      	ldr	r0, [sp, #0]
 8006f9a:	a903      	add	r1, sp, #12
 8006f9c:	ec55 4b10 	vmov	r4, r5, d0
 8006fa0:	f7ff ff50 	bl	8006e44 <__b2d>
 8006fa4:	9b01      	ldr	r3, [sp, #4]
 8006fa6:	6919      	ldr	r1, [r3, #16]
 8006fa8:	9b00      	ldr	r3, [sp, #0]
 8006faa:	691b      	ldr	r3, [r3, #16]
 8006fac:	1ac9      	subs	r1, r1, r3
 8006fae:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006fb2:	1a9b      	subs	r3, r3, r2
 8006fb4:	ec5b ab10 	vmov	sl, fp, d0
 8006fb8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	bfce      	itee	gt
 8006fc0:	462a      	movgt	r2, r5
 8006fc2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006fc6:	465a      	movle	r2, fp
 8006fc8:	462f      	mov	r7, r5
 8006fca:	46d9      	mov	r9, fp
 8006fcc:	bfcc      	ite	gt
 8006fce:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006fd2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006fd6:	464b      	mov	r3, r9
 8006fd8:	4652      	mov	r2, sl
 8006fda:	4620      	mov	r0, r4
 8006fdc:	4639      	mov	r1, r7
 8006fde:	f7f9 fc35 	bl	800084c <__aeabi_ddiv>
 8006fe2:	ec41 0b10 	vmov	d0, r0, r1
 8006fe6:	b005      	add	sp, #20
 8006fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006fec <__copybits>:
 8006fec:	3901      	subs	r1, #1
 8006fee:	b570      	push	{r4, r5, r6, lr}
 8006ff0:	1149      	asrs	r1, r1, #5
 8006ff2:	6914      	ldr	r4, [r2, #16]
 8006ff4:	3101      	adds	r1, #1
 8006ff6:	f102 0314 	add.w	r3, r2, #20
 8006ffa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006ffe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007002:	1f05      	subs	r5, r0, #4
 8007004:	42a3      	cmp	r3, r4
 8007006:	d30c      	bcc.n	8007022 <__copybits+0x36>
 8007008:	1aa3      	subs	r3, r4, r2
 800700a:	3b11      	subs	r3, #17
 800700c:	f023 0303 	bic.w	r3, r3, #3
 8007010:	3211      	adds	r2, #17
 8007012:	42a2      	cmp	r2, r4
 8007014:	bf88      	it	hi
 8007016:	2300      	movhi	r3, #0
 8007018:	4418      	add	r0, r3
 800701a:	2300      	movs	r3, #0
 800701c:	4288      	cmp	r0, r1
 800701e:	d305      	bcc.n	800702c <__copybits+0x40>
 8007020:	bd70      	pop	{r4, r5, r6, pc}
 8007022:	f853 6b04 	ldr.w	r6, [r3], #4
 8007026:	f845 6f04 	str.w	r6, [r5, #4]!
 800702a:	e7eb      	b.n	8007004 <__copybits+0x18>
 800702c:	f840 3b04 	str.w	r3, [r0], #4
 8007030:	e7f4      	b.n	800701c <__copybits+0x30>

08007032 <__any_on>:
 8007032:	f100 0214 	add.w	r2, r0, #20
 8007036:	6900      	ldr	r0, [r0, #16]
 8007038:	114b      	asrs	r3, r1, #5
 800703a:	4298      	cmp	r0, r3
 800703c:	b510      	push	{r4, lr}
 800703e:	db11      	blt.n	8007064 <__any_on+0x32>
 8007040:	dd0a      	ble.n	8007058 <__any_on+0x26>
 8007042:	f011 011f 	ands.w	r1, r1, #31
 8007046:	d007      	beq.n	8007058 <__any_on+0x26>
 8007048:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800704c:	fa24 f001 	lsr.w	r0, r4, r1
 8007050:	fa00 f101 	lsl.w	r1, r0, r1
 8007054:	428c      	cmp	r4, r1
 8007056:	d10b      	bne.n	8007070 <__any_on+0x3e>
 8007058:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800705c:	4293      	cmp	r3, r2
 800705e:	d803      	bhi.n	8007068 <__any_on+0x36>
 8007060:	2000      	movs	r0, #0
 8007062:	bd10      	pop	{r4, pc}
 8007064:	4603      	mov	r3, r0
 8007066:	e7f7      	b.n	8007058 <__any_on+0x26>
 8007068:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800706c:	2900      	cmp	r1, #0
 800706e:	d0f5      	beq.n	800705c <__any_on+0x2a>
 8007070:	2001      	movs	r0, #1
 8007072:	e7f6      	b.n	8007062 <__any_on+0x30>

08007074 <sulp>:
 8007074:	b570      	push	{r4, r5, r6, lr}
 8007076:	4604      	mov	r4, r0
 8007078:	460d      	mov	r5, r1
 800707a:	ec45 4b10 	vmov	d0, r4, r5
 800707e:	4616      	mov	r6, r2
 8007080:	f7ff feba 	bl	8006df8 <__ulp>
 8007084:	ec51 0b10 	vmov	r0, r1, d0
 8007088:	b17e      	cbz	r6, 80070aa <sulp+0x36>
 800708a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800708e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007092:	2b00      	cmp	r3, #0
 8007094:	dd09      	ble.n	80070aa <sulp+0x36>
 8007096:	051b      	lsls	r3, r3, #20
 8007098:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800709c:	2400      	movs	r4, #0
 800709e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80070a2:	4622      	mov	r2, r4
 80070a4:	462b      	mov	r3, r5
 80070a6:	f7f9 faa7 	bl	80005f8 <__aeabi_dmul>
 80070aa:	ec41 0b10 	vmov	d0, r0, r1
 80070ae:	bd70      	pop	{r4, r5, r6, pc}

080070b0 <_strtod_l>:
 80070b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	b09f      	sub	sp, #124	@ 0x7c
 80070b6:	460c      	mov	r4, r1
 80070b8:	9217      	str	r2, [sp, #92]	@ 0x5c
 80070ba:	2200      	movs	r2, #0
 80070bc:	921a      	str	r2, [sp, #104]	@ 0x68
 80070be:	9005      	str	r0, [sp, #20]
 80070c0:	f04f 0a00 	mov.w	sl, #0
 80070c4:	f04f 0b00 	mov.w	fp, #0
 80070c8:	460a      	mov	r2, r1
 80070ca:	9219      	str	r2, [sp, #100]	@ 0x64
 80070cc:	7811      	ldrb	r1, [r2, #0]
 80070ce:	292b      	cmp	r1, #43	@ 0x2b
 80070d0:	d04a      	beq.n	8007168 <_strtod_l+0xb8>
 80070d2:	d838      	bhi.n	8007146 <_strtod_l+0x96>
 80070d4:	290d      	cmp	r1, #13
 80070d6:	d832      	bhi.n	800713e <_strtod_l+0x8e>
 80070d8:	2908      	cmp	r1, #8
 80070da:	d832      	bhi.n	8007142 <_strtod_l+0x92>
 80070dc:	2900      	cmp	r1, #0
 80070de:	d03b      	beq.n	8007158 <_strtod_l+0xa8>
 80070e0:	2200      	movs	r2, #0
 80070e2:	920b      	str	r2, [sp, #44]	@ 0x2c
 80070e4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80070e6:	782a      	ldrb	r2, [r5, #0]
 80070e8:	2a30      	cmp	r2, #48	@ 0x30
 80070ea:	f040 80b3 	bne.w	8007254 <_strtod_l+0x1a4>
 80070ee:	786a      	ldrb	r2, [r5, #1]
 80070f0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80070f4:	2a58      	cmp	r2, #88	@ 0x58
 80070f6:	d16e      	bne.n	80071d6 <_strtod_l+0x126>
 80070f8:	9302      	str	r3, [sp, #8]
 80070fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070fc:	9301      	str	r3, [sp, #4]
 80070fe:	ab1a      	add	r3, sp, #104	@ 0x68
 8007100:	9300      	str	r3, [sp, #0]
 8007102:	4a8e      	ldr	r2, [pc, #568]	@ (800733c <_strtod_l+0x28c>)
 8007104:	9805      	ldr	r0, [sp, #20]
 8007106:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007108:	a919      	add	r1, sp, #100	@ 0x64
 800710a:	f001 f927 	bl	800835c <__gethex>
 800710e:	f010 060f 	ands.w	r6, r0, #15
 8007112:	4604      	mov	r4, r0
 8007114:	d005      	beq.n	8007122 <_strtod_l+0x72>
 8007116:	2e06      	cmp	r6, #6
 8007118:	d128      	bne.n	800716c <_strtod_l+0xbc>
 800711a:	3501      	adds	r5, #1
 800711c:	2300      	movs	r3, #0
 800711e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007120:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007122:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007124:	2b00      	cmp	r3, #0
 8007126:	f040 858e 	bne.w	8007c46 <_strtod_l+0xb96>
 800712a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800712c:	b1cb      	cbz	r3, 8007162 <_strtod_l+0xb2>
 800712e:	4652      	mov	r2, sl
 8007130:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8007134:	ec43 2b10 	vmov	d0, r2, r3
 8007138:	b01f      	add	sp, #124	@ 0x7c
 800713a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800713e:	2920      	cmp	r1, #32
 8007140:	d1ce      	bne.n	80070e0 <_strtod_l+0x30>
 8007142:	3201      	adds	r2, #1
 8007144:	e7c1      	b.n	80070ca <_strtod_l+0x1a>
 8007146:	292d      	cmp	r1, #45	@ 0x2d
 8007148:	d1ca      	bne.n	80070e0 <_strtod_l+0x30>
 800714a:	2101      	movs	r1, #1
 800714c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800714e:	1c51      	adds	r1, r2, #1
 8007150:	9119      	str	r1, [sp, #100]	@ 0x64
 8007152:	7852      	ldrb	r2, [r2, #1]
 8007154:	2a00      	cmp	r2, #0
 8007156:	d1c5      	bne.n	80070e4 <_strtod_l+0x34>
 8007158:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800715a:	9419      	str	r4, [sp, #100]	@ 0x64
 800715c:	2b00      	cmp	r3, #0
 800715e:	f040 8570 	bne.w	8007c42 <_strtod_l+0xb92>
 8007162:	4652      	mov	r2, sl
 8007164:	465b      	mov	r3, fp
 8007166:	e7e5      	b.n	8007134 <_strtod_l+0x84>
 8007168:	2100      	movs	r1, #0
 800716a:	e7ef      	b.n	800714c <_strtod_l+0x9c>
 800716c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800716e:	b13a      	cbz	r2, 8007180 <_strtod_l+0xd0>
 8007170:	2135      	movs	r1, #53	@ 0x35
 8007172:	a81c      	add	r0, sp, #112	@ 0x70
 8007174:	f7ff ff3a 	bl	8006fec <__copybits>
 8007178:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800717a:	9805      	ldr	r0, [sp, #20]
 800717c:	f7ff fb08 	bl	8006790 <_Bfree>
 8007180:	3e01      	subs	r6, #1
 8007182:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007184:	2e04      	cmp	r6, #4
 8007186:	d806      	bhi.n	8007196 <_strtod_l+0xe6>
 8007188:	e8df f006 	tbb	[pc, r6]
 800718c:	201d0314 	.word	0x201d0314
 8007190:	14          	.byte	0x14
 8007191:	00          	.byte	0x00
 8007192:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007196:	05e1      	lsls	r1, r4, #23
 8007198:	bf48      	it	mi
 800719a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800719e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80071a2:	0d1b      	lsrs	r3, r3, #20
 80071a4:	051b      	lsls	r3, r3, #20
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d1bb      	bne.n	8007122 <_strtod_l+0x72>
 80071aa:	f7fe fb2f 	bl	800580c <__errno>
 80071ae:	2322      	movs	r3, #34	@ 0x22
 80071b0:	6003      	str	r3, [r0, #0]
 80071b2:	e7b6      	b.n	8007122 <_strtod_l+0x72>
 80071b4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80071b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80071bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80071c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80071c4:	e7e7      	b.n	8007196 <_strtod_l+0xe6>
 80071c6:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007344 <_strtod_l+0x294>
 80071ca:	e7e4      	b.n	8007196 <_strtod_l+0xe6>
 80071cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80071d0:	f04f 3aff 	mov.w	sl, #4294967295
 80071d4:	e7df      	b.n	8007196 <_strtod_l+0xe6>
 80071d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071d8:	1c5a      	adds	r2, r3, #1
 80071da:	9219      	str	r2, [sp, #100]	@ 0x64
 80071dc:	785b      	ldrb	r3, [r3, #1]
 80071de:	2b30      	cmp	r3, #48	@ 0x30
 80071e0:	d0f9      	beq.n	80071d6 <_strtod_l+0x126>
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d09d      	beq.n	8007122 <_strtod_l+0x72>
 80071e6:	2301      	movs	r3, #1
 80071e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80071ea:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80071ec:	930c      	str	r3, [sp, #48]	@ 0x30
 80071ee:	2300      	movs	r3, #0
 80071f0:	9308      	str	r3, [sp, #32]
 80071f2:	930a      	str	r3, [sp, #40]	@ 0x28
 80071f4:	461f      	mov	r7, r3
 80071f6:	220a      	movs	r2, #10
 80071f8:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80071fa:	7805      	ldrb	r5, [r0, #0]
 80071fc:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8007200:	b2d9      	uxtb	r1, r3
 8007202:	2909      	cmp	r1, #9
 8007204:	d928      	bls.n	8007258 <_strtod_l+0x1a8>
 8007206:	494e      	ldr	r1, [pc, #312]	@ (8007340 <_strtod_l+0x290>)
 8007208:	2201      	movs	r2, #1
 800720a:	f000 ffd5 	bl	80081b8 <strncmp>
 800720e:	2800      	cmp	r0, #0
 8007210:	d032      	beq.n	8007278 <_strtod_l+0x1c8>
 8007212:	2000      	movs	r0, #0
 8007214:	462a      	mov	r2, r5
 8007216:	4681      	mov	r9, r0
 8007218:	463d      	mov	r5, r7
 800721a:	4603      	mov	r3, r0
 800721c:	2a65      	cmp	r2, #101	@ 0x65
 800721e:	d001      	beq.n	8007224 <_strtod_l+0x174>
 8007220:	2a45      	cmp	r2, #69	@ 0x45
 8007222:	d114      	bne.n	800724e <_strtod_l+0x19e>
 8007224:	b91d      	cbnz	r5, 800722e <_strtod_l+0x17e>
 8007226:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007228:	4302      	orrs	r2, r0
 800722a:	d095      	beq.n	8007158 <_strtod_l+0xa8>
 800722c:	2500      	movs	r5, #0
 800722e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8007230:	1c62      	adds	r2, r4, #1
 8007232:	9219      	str	r2, [sp, #100]	@ 0x64
 8007234:	7862      	ldrb	r2, [r4, #1]
 8007236:	2a2b      	cmp	r2, #43	@ 0x2b
 8007238:	d077      	beq.n	800732a <_strtod_l+0x27a>
 800723a:	2a2d      	cmp	r2, #45	@ 0x2d
 800723c:	d07b      	beq.n	8007336 <_strtod_l+0x286>
 800723e:	f04f 0c00 	mov.w	ip, #0
 8007242:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007246:	2909      	cmp	r1, #9
 8007248:	f240 8082 	bls.w	8007350 <_strtod_l+0x2a0>
 800724c:	9419      	str	r4, [sp, #100]	@ 0x64
 800724e:	f04f 0800 	mov.w	r8, #0
 8007252:	e0a2      	b.n	800739a <_strtod_l+0x2ea>
 8007254:	2300      	movs	r3, #0
 8007256:	e7c7      	b.n	80071e8 <_strtod_l+0x138>
 8007258:	2f08      	cmp	r7, #8
 800725a:	bfd5      	itete	le
 800725c:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800725e:	9908      	ldrgt	r1, [sp, #32]
 8007260:	fb02 3301 	mlale	r3, r2, r1, r3
 8007264:	fb02 3301 	mlagt	r3, r2, r1, r3
 8007268:	f100 0001 	add.w	r0, r0, #1
 800726c:	bfd4      	ite	le
 800726e:	930a      	strle	r3, [sp, #40]	@ 0x28
 8007270:	9308      	strgt	r3, [sp, #32]
 8007272:	3701      	adds	r7, #1
 8007274:	9019      	str	r0, [sp, #100]	@ 0x64
 8007276:	e7bf      	b.n	80071f8 <_strtod_l+0x148>
 8007278:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	9219      	str	r2, [sp, #100]	@ 0x64
 800727e:	785a      	ldrb	r2, [r3, #1]
 8007280:	b37f      	cbz	r7, 80072e2 <_strtod_l+0x232>
 8007282:	4681      	mov	r9, r0
 8007284:	463d      	mov	r5, r7
 8007286:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800728a:	2b09      	cmp	r3, #9
 800728c:	d912      	bls.n	80072b4 <_strtod_l+0x204>
 800728e:	2301      	movs	r3, #1
 8007290:	e7c4      	b.n	800721c <_strtod_l+0x16c>
 8007292:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007294:	1c5a      	adds	r2, r3, #1
 8007296:	9219      	str	r2, [sp, #100]	@ 0x64
 8007298:	785a      	ldrb	r2, [r3, #1]
 800729a:	3001      	adds	r0, #1
 800729c:	2a30      	cmp	r2, #48	@ 0x30
 800729e:	d0f8      	beq.n	8007292 <_strtod_l+0x1e2>
 80072a0:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80072a4:	2b08      	cmp	r3, #8
 80072a6:	f200 84d3 	bhi.w	8007c50 <_strtod_l+0xba0>
 80072aa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80072ae:	4681      	mov	r9, r0
 80072b0:	2000      	movs	r0, #0
 80072b2:	4605      	mov	r5, r0
 80072b4:	3a30      	subs	r2, #48	@ 0x30
 80072b6:	f100 0301 	add.w	r3, r0, #1
 80072ba:	d02a      	beq.n	8007312 <_strtod_l+0x262>
 80072bc:	4499      	add	r9, r3
 80072be:	eb00 0c05 	add.w	ip, r0, r5
 80072c2:	462b      	mov	r3, r5
 80072c4:	210a      	movs	r1, #10
 80072c6:	4563      	cmp	r3, ip
 80072c8:	d10d      	bne.n	80072e6 <_strtod_l+0x236>
 80072ca:	1c69      	adds	r1, r5, #1
 80072cc:	4401      	add	r1, r0
 80072ce:	4428      	add	r0, r5
 80072d0:	2808      	cmp	r0, #8
 80072d2:	dc16      	bgt.n	8007302 <_strtod_l+0x252>
 80072d4:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80072d6:	230a      	movs	r3, #10
 80072d8:	fb03 2300 	mla	r3, r3, r0, r2
 80072dc:	930a      	str	r3, [sp, #40]	@ 0x28
 80072de:	2300      	movs	r3, #0
 80072e0:	e018      	b.n	8007314 <_strtod_l+0x264>
 80072e2:	4638      	mov	r0, r7
 80072e4:	e7da      	b.n	800729c <_strtod_l+0x1ec>
 80072e6:	2b08      	cmp	r3, #8
 80072e8:	f103 0301 	add.w	r3, r3, #1
 80072ec:	dc03      	bgt.n	80072f6 <_strtod_l+0x246>
 80072ee:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80072f0:	434e      	muls	r6, r1
 80072f2:	960a      	str	r6, [sp, #40]	@ 0x28
 80072f4:	e7e7      	b.n	80072c6 <_strtod_l+0x216>
 80072f6:	2b10      	cmp	r3, #16
 80072f8:	bfde      	ittt	le
 80072fa:	9e08      	ldrle	r6, [sp, #32]
 80072fc:	434e      	mulle	r6, r1
 80072fe:	9608      	strle	r6, [sp, #32]
 8007300:	e7e1      	b.n	80072c6 <_strtod_l+0x216>
 8007302:	280f      	cmp	r0, #15
 8007304:	dceb      	bgt.n	80072de <_strtod_l+0x22e>
 8007306:	9808      	ldr	r0, [sp, #32]
 8007308:	230a      	movs	r3, #10
 800730a:	fb03 2300 	mla	r3, r3, r0, r2
 800730e:	9308      	str	r3, [sp, #32]
 8007310:	e7e5      	b.n	80072de <_strtod_l+0x22e>
 8007312:	4629      	mov	r1, r5
 8007314:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007316:	1c50      	adds	r0, r2, #1
 8007318:	9019      	str	r0, [sp, #100]	@ 0x64
 800731a:	7852      	ldrb	r2, [r2, #1]
 800731c:	4618      	mov	r0, r3
 800731e:	460d      	mov	r5, r1
 8007320:	e7b1      	b.n	8007286 <_strtod_l+0x1d6>
 8007322:	f04f 0900 	mov.w	r9, #0
 8007326:	2301      	movs	r3, #1
 8007328:	e77d      	b.n	8007226 <_strtod_l+0x176>
 800732a:	f04f 0c00 	mov.w	ip, #0
 800732e:	1ca2      	adds	r2, r4, #2
 8007330:	9219      	str	r2, [sp, #100]	@ 0x64
 8007332:	78a2      	ldrb	r2, [r4, #2]
 8007334:	e785      	b.n	8007242 <_strtod_l+0x192>
 8007336:	f04f 0c01 	mov.w	ip, #1
 800733a:	e7f8      	b.n	800732e <_strtod_l+0x27e>
 800733c:	080091a8 	.word	0x080091a8
 8007340:	08009190 	.word	0x08009190
 8007344:	7ff00000 	.word	0x7ff00000
 8007348:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800734a:	1c51      	adds	r1, r2, #1
 800734c:	9119      	str	r1, [sp, #100]	@ 0x64
 800734e:	7852      	ldrb	r2, [r2, #1]
 8007350:	2a30      	cmp	r2, #48	@ 0x30
 8007352:	d0f9      	beq.n	8007348 <_strtod_l+0x298>
 8007354:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007358:	2908      	cmp	r1, #8
 800735a:	f63f af78 	bhi.w	800724e <_strtod_l+0x19e>
 800735e:	3a30      	subs	r2, #48	@ 0x30
 8007360:	920e      	str	r2, [sp, #56]	@ 0x38
 8007362:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007364:	920f      	str	r2, [sp, #60]	@ 0x3c
 8007366:	f04f 080a 	mov.w	r8, #10
 800736a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800736c:	1c56      	adds	r6, r2, #1
 800736e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007370:	7852      	ldrb	r2, [r2, #1]
 8007372:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007376:	f1be 0f09 	cmp.w	lr, #9
 800737a:	d939      	bls.n	80073f0 <_strtod_l+0x340>
 800737c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800737e:	1a76      	subs	r6, r6, r1
 8007380:	2e08      	cmp	r6, #8
 8007382:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007386:	dc03      	bgt.n	8007390 <_strtod_l+0x2e0>
 8007388:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800738a:	4588      	cmp	r8, r1
 800738c:	bfa8      	it	ge
 800738e:	4688      	movge	r8, r1
 8007390:	f1bc 0f00 	cmp.w	ip, #0
 8007394:	d001      	beq.n	800739a <_strtod_l+0x2ea>
 8007396:	f1c8 0800 	rsb	r8, r8, #0
 800739a:	2d00      	cmp	r5, #0
 800739c:	d14e      	bne.n	800743c <_strtod_l+0x38c>
 800739e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80073a0:	4308      	orrs	r0, r1
 80073a2:	f47f aebe 	bne.w	8007122 <_strtod_l+0x72>
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	f47f aed6 	bne.w	8007158 <_strtod_l+0xa8>
 80073ac:	2a69      	cmp	r2, #105	@ 0x69
 80073ae:	d028      	beq.n	8007402 <_strtod_l+0x352>
 80073b0:	dc25      	bgt.n	80073fe <_strtod_l+0x34e>
 80073b2:	2a49      	cmp	r2, #73	@ 0x49
 80073b4:	d025      	beq.n	8007402 <_strtod_l+0x352>
 80073b6:	2a4e      	cmp	r2, #78	@ 0x4e
 80073b8:	f47f aece 	bne.w	8007158 <_strtod_l+0xa8>
 80073bc:	499b      	ldr	r1, [pc, #620]	@ (800762c <_strtod_l+0x57c>)
 80073be:	a819      	add	r0, sp, #100	@ 0x64
 80073c0:	f001 f9ee 	bl	80087a0 <__match>
 80073c4:	2800      	cmp	r0, #0
 80073c6:	f43f aec7 	beq.w	8007158 <_strtod_l+0xa8>
 80073ca:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80073cc:	781b      	ldrb	r3, [r3, #0]
 80073ce:	2b28      	cmp	r3, #40	@ 0x28
 80073d0:	d12e      	bne.n	8007430 <_strtod_l+0x380>
 80073d2:	4997      	ldr	r1, [pc, #604]	@ (8007630 <_strtod_l+0x580>)
 80073d4:	aa1c      	add	r2, sp, #112	@ 0x70
 80073d6:	a819      	add	r0, sp, #100	@ 0x64
 80073d8:	f001 f9f6 	bl	80087c8 <__hexnan>
 80073dc:	2805      	cmp	r0, #5
 80073de:	d127      	bne.n	8007430 <_strtod_l+0x380>
 80073e0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80073e2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80073e6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80073ea:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80073ee:	e698      	b.n	8007122 <_strtod_l+0x72>
 80073f0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80073f2:	fb08 2101 	mla	r1, r8, r1, r2
 80073f6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80073fa:	920e      	str	r2, [sp, #56]	@ 0x38
 80073fc:	e7b5      	b.n	800736a <_strtod_l+0x2ba>
 80073fe:	2a6e      	cmp	r2, #110	@ 0x6e
 8007400:	e7da      	b.n	80073b8 <_strtod_l+0x308>
 8007402:	498c      	ldr	r1, [pc, #560]	@ (8007634 <_strtod_l+0x584>)
 8007404:	a819      	add	r0, sp, #100	@ 0x64
 8007406:	f001 f9cb 	bl	80087a0 <__match>
 800740a:	2800      	cmp	r0, #0
 800740c:	f43f aea4 	beq.w	8007158 <_strtod_l+0xa8>
 8007410:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007412:	4989      	ldr	r1, [pc, #548]	@ (8007638 <_strtod_l+0x588>)
 8007414:	3b01      	subs	r3, #1
 8007416:	a819      	add	r0, sp, #100	@ 0x64
 8007418:	9319      	str	r3, [sp, #100]	@ 0x64
 800741a:	f001 f9c1 	bl	80087a0 <__match>
 800741e:	b910      	cbnz	r0, 8007426 <_strtod_l+0x376>
 8007420:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007422:	3301      	adds	r3, #1
 8007424:	9319      	str	r3, [sp, #100]	@ 0x64
 8007426:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8007648 <_strtod_l+0x598>
 800742a:	f04f 0a00 	mov.w	sl, #0
 800742e:	e678      	b.n	8007122 <_strtod_l+0x72>
 8007430:	4882      	ldr	r0, [pc, #520]	@ (800763c <_strtod_l+0x58c>)
 8007432:	f000 fef1 	bl	8008218 <nan>
 8007436:	ec5b ab10 	vmov	sl, fp, d0
 800743a:	e672      	b.n	8007122 <_strtod_l+0x72>
 800743c:	eba8 0309 	sub.w	r3, r8, r9
 8007440:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8007442:	9309      	str	r3, [sp, #36]	@ 0x24
 8007444:	2f00      	cmp	r7, #0
 8007446:	bf08      	it	eq
 8007448:	462f      	moveq	r7, r5
 800744a:	2d10      	cmp	r5, #16
 800744c:	462c      	mov	r4, r5
 800744e:	bfa8      	it	ge
 8007450:	2410      	movge	r4, #16
 8007452:	f7f9 f857 	bl	8000504 <__aeabi_ui2d>
 8007456:	2d09      	cmp	r5, #9
 8007458:	4682      	mov	sl, r0
 800745a:	468b      	mov	fp, r1
 800745c:	dc13      	bgt.n	8007486 <_strtod_l+0x3d6>
 800745e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007460:	2b00      	cmp	r3, #0
 8007462:	f43f ae5e 	beq.w	8007122 <_strtod_l+0x72>
 8007466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007468:	dd78      	ble.n	800755c <_strtod_l+0x4ac>
 800746a:	2b16      	cmp	r3, #22
 800746c:	dc5f      	bgt.n	800752e <_strtod_l+0x47e>
 800746e:	4974      	ldr	r1, [pc, #464]	@ (8007640 <_strtod_l+0x590>)
 8007470:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007474:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007478:	4652      	mov	r2, sl
 800747a:	465b      	mov	r3, fp
 800747c:	f7f9 f8bc 	bl	80005f8 <__aeabi_dmul>
 8007480:	4682      	mov	sl, r0
 8007482:	468b      	mov	fp, r1
 8007484:	e64d      	b.n	8007122 <_strtod_l+0x72>
 8007486:	4b6e      	ldr	r3, [pc, #440]	@ (8007640 <_strtod_l+0x590>)
 8007488:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800748c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007490:	f7f9 f8b2 	bl	80005f8 <__aeabi_dmul>
 8007494:	4682      	mov	sl, r0
 8007496:	9808      	ldr	r0, [sp, #32]
 8007498:	468b      	mov	fp, r1
 800749a:	f7f9 f833 	bl	8000504 <__aeabi_ui2d>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4650      	mov	r0, sl
 80074a4:	4659      	mov	r1, fp
 80074a6:	f7f8 fef1 	bl	800028c <__adddf3>
 80074aa:	2d0f      	cmp	r5, #15
 80074ac:	4682      	mov	sl, r0
 80074ae:	468b      	mov	fp, r1
 80074b0:	ddd5      	ble.n	800745e <_strtod_l+0x3ae>
 80074b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80074b4:	1b2c      	subs	r4, r5, r4
 80074b6:	441c      	add	r4, r3
 80074b8:	2c00      	cmp	r4, #0
 80074ba:	f340 8096 	ble.w	80075ea <_strtod_l+0x53a>
 80074be:	f014 030f 	ands.w	r3, r4, #15
 80074c2:	d00a      	beq.n	80074da <_strtod_l+0x42a>
 80074c4:	495e      	ldr	r1, [pc, #376]	@ (8007640 <_strtod_l+0x590>)
 80074c6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80074ca:	4652      	mov	r2, sl
 80074cc:	465b      	mov	r3, fp
 80074ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 80074d2:	f7f9 f891 	bl	80005f8 <__aeabi_dmul>
 80074d6:	4682      	mov	sl, r0
 80074d8:	468b      	mov	fp, r1
 80074da:	f034 040f 	bics.w	r4, r4, #15
 80074de:	d073      	beq.n	80075c8 <_strtod_l+0x518>
 80074e0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80074e4:	dd48      	ble.n	8007578 <_strtod_l+0x4c8>
 80074e6:	2400      	movs	r4, #0
 80074e8:	46a0      	mov	r8, r4
 80074ea:	940a      	str	r4, [sp, #40]	@ 0x28
 80074ec:	46a1      	mov	r9, r4
 80074ee:	9a05      	ldr	r2, [sp, #20]
 80074f0:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8007648 <_strtod_l+0x598>
 80074f4:	2322      	movs	r3, #34	@ 0x22
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	f04f 0a00 	mov.w	sl, #0
 80074fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80074fe:	2b00      	cmp	r3, #0
 8007500:	f43f ae0f 	beq.w	8007122 <_strtod_l+0x72>
 8007504:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007506:	9805      	ldr	r0, [sp, #20]
 8007508:	f7ff f942 	bl	8006790 <_Bfree>
 800750c:	9805      	ldr	r0, [sp, #20]
 800750e:	4649      	mov	r1, r9
 8007510:	f7ff f93e 	bl	8006790 <_Bfree>
 8007514:	9805      	ldr	r0, [sp, #20]
 8007516:	4641      	mov	r1, r8
 8007518:	f7ff f93a 	bl	8006790 <_Bfree>
 800751c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800751e:	9805      	ldr	r0, [sp, #20]
 8007520:	f7ff f936 	bl	8006790 <_Bfree>
 8007524:	9805      	ldr	r0, [sp, #20]
 8007526:	4621      	mov	r1, r4
 8007528:	f7ff f932 	bl	8006790 <_Bfree>
 800752c:	e5f9      	b.n	8007122 <_strtod_l+0x72>
 800752e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007530:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007534:	4293      	cmp	r3, r2
 8007536:	dbbc      	blt.n	80074b2 <_strtod_l+0x402>
 8007538:	4c41      	ldr	r4, [pc, #260]	@ (8007640 <_strtod_l+0x590>)
 800753a:	f1c5 050f 	rsb	r5, r5, #15
 800753e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007542:	4652      	mov	r2, sl
 8007544:	465b      	mov	r3, fp
 8007546:	e9d1 0100 	ldrd	r0, r1, [r1]
 800754a:	f7f9 f855 	bl	80005f8 <__aeabi_dmul>
 800754e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007550:	1b5d      	subs	r5, r3, r5
 8007552:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007556:	e9d4 2300 	ldrd	r2, r3, [r4]
 800755a:	e78f      	b.n	800747c <_strtod_l+0x3cc>
 800755c:	3316      	adds	r3, #22
 800755e:	dba8      	blt.n	80074b2 <_strtod_l+0x402>
 8007560:	4b37      	ldr	r3, [pc, #220]	@ (8007640 <_strtod_l+0x590>)
 8007562:	eba9 0808 	sub.w	r8, r9, r8
 8007566:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800756a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800756e:	4650      	mov	r0, sl
 8007570:	4659      	mov	r1, fp
 8007572:	f7f9 f96b 	bl	800084c <__aeabi_ddiv>
 8007576:	e783      	b.n	8007480 <_strtod_l+0x3d0>
 8007578:	4b32      	ldr	r3, [pc, #200]	@ (8007644 <_strtod_l+0x594>)
 800757a:	9308      	str	r3, [sp, #32]
 800757c:	2300      	movs	r3, #0
 800757e:	1124      	asrs	r4, r4, #4
 8007580:	4650      	mov	r0, sl
 8007582:	4659      	mov	r1, fp
 8007584:	461e      	mov	r6, r3
 8007586:	2c01      	cmp	r4, #1
 8007588:	dc21      	bgt.n	80075ce <_strtod_l+0x51e>
 800758a:	b10b      	cbz	r3, 8007590 <_strtod_l+0x4e0>
 800758c:	4682      	mov	sl, r0
 800758e:	468b      	mov	fp, r1
 8007590:	492c      	ldr	r1, [pc, #176]	@ (8007644 <_strtod_l+0x594>)
 8007592:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007596:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800759a:	4652      	mov	r2, sl
 800759c:	465b      	mov	r3, fp
 800759e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075a2:	f7f9 f829 	bl	80005f8 <__aeabi_dmul>
 80075a6:	4b28      	ldr	r3, [pc, #160]	@ (8007648 <_strtod_l+0x598>)
 80075a8:	460a      	mov	r2, r1
 80075aa:	400b      	ands	r3, r1
 80075ac:	4927      	ldr	r1, [pc, #156]	@ (800764c <_strtod_l+0x59c>)
 80075ae:	428b      	cmp	r3, r1
 80075b0:	4682      	mov	sl, r0
 80075b2:	d898      	bhi.n	80074e6 <_strtod_l+0x436>
 80075b4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80075b8:	428b      	cmp	r3, r1
 80075ba:	bf86      	itte	hi
 80075bc:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8007650 <_strtod_l+0x5a0>
 80075c0:	f04f 3aff 	movhi.w	sl, #4294967295
 80075c4:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80075c8:	2300      	movs	r3, #0
 80075ca:	9308      	str	r3, [sp, #32]
 80075cc:	e07a      	b.n	80076c4 <_strtod_l+0x614>
 80075ce:	07e2      	lsls	r2, r4, #31
 80075d0:	d505      	bpl.n	80075de <_strtod_l+0x52e>
 80075d2:	9b08      	ldr	r3, [sp, #32]
 80075d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d8:	f7f9 f80e 	bl	80005f8 <__aeabi_dmul>
 80075dc:	2301      	movs	r3, #1
 80075de:	9a08      	ldr	r2, [sp, #32]
 80075e0:	3208      	adds	r2, #8
 80075e2:	3601      	adds	r6, #1
 80075e4:	1064      	asrs	r4, r4, #1
 80075e6:	9208      	str	r2, [sp, #32]
 80075e8:	e7cd      	b.n	8007586 <_strtod_l+0x4d6>
 80075ea:	d0ed      	beq.n	80075c8 <_strtod_l+0x518>
 80075ec:	4264      	negs	r4, r4
 80075ee:	f014 020f 	ands.w	r2, r4, #15
 80075f2:	d00a      	beq.n	800760a <_strtod_l+0x55a>
 80075f4:	4b12      	ldr	r3, [pc, #72]	@ (8007640 <_strtod_l+0x590>)
 80075f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075fa:	4650      	mov	r0, sl
 80075fc:	4659      	mov	r1, fp
 80075fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007602:	f7f9 f923 	bl	800084c <__aeabi_ddiv>
 8007606:	4682      	mov	sl, r0
 8007608:	468b      	mov	fp, r1
 800760a:	1124      	asrs	r4, r4, #4
 800760c:	d0dc      	beq.n	80075c8 <_strtod_l+0x518>
 800760e:	2c1f      	cmp	r4, #31
 8007610:	dd20      	ble.n	8007654 <_strtod_l+0x5a4>
 8007612:	2400      	movs	r4, #0
 8007614:	46a0      	mov	r8, r4
 8007616:	940a      	str	r4, [sp, #40]	@ 0x28
 8007618:	46a1      	mov	r9, r4
 800761a:	9a05      	ldr	r2, [sp, #20]
 800761c:	2322      	movs	r3, #34	@ 0x22
 800761e:	f04f 0a00 	mov.w	sl, #0
 8007622:	f04f 0b00 	mov.w	fp, #0
 8007626:	6013      	str	r3, [r2, #0]
 8007628:	e768      	b.n	80074fc <_strtod_l+0x44c>
 800762a:	bf00      	nop
 800762c:	08008f7d 	.word	0x08008f7d
 8007630:	08009194 	.word	0x08009194
 8007634:	08008f75 	.word	0x08008f75
 8007638:	08008fac 	.word	0x08008fac
 800763c:	0800933d 	.word	0x0800933d
 8007640:	080090c8 	.word	0x080090c8
 8007644:	080090a0 	.word	0x080090a0
 8007648:	7ff00000 	.word	0x7ff00000
 800764c:	7ca00000 	.word	0x7ca00000
 8007650:	7fefffff 	.word	0x7fefffff
 8007654:	f014 0310 	ands.w	r3, r4, #16
 8007658:	bf18      	it	ne
 800765a:	236a      	movne	r3, #106	@ 0x6a
 800765c:	4ea9      	ldr	r6, [pc, #676]	@ (8007904 <_strtod_l+0x854>)
 800765e:	9308      	str	r3, [sp, #32]
 8007660:	4650      	mov	r0, sl
 8007662:	4659      	mov	r1, fp
 8007664:	2300      	movs	r3, #0
 8007666:	07e2      	lsls	r2, r4, #31
 8007668:	d504      	bpl.n	8007674 <_strtod_l+0x5c4>
 800766a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800766e:	f7f8 ffc3 	bl	80005f8 <__aeabi_dmul>
 8007672:	2301      	movs	r3, #1
 8007674:	1064      	asrs	r4, r4, #1
 8007676:	f106 0608 	add.w	r6, r6, #8
 800767a:	d1f4      	bne.n	8007666 <_strtod_l+0x5b6>
 800767c:	b10b      	cbz	r3, 8007682 <_strtod_l+0x5d2>
 800767e:	4682      	mov	sl, r0
 8007680:	468b      	mov	fp, r1
 8007682:	9b08      	ldr	r3, [sp, #32]
 8007684:	b1b3      	cbz	r3, 80076b4 <_strtod_l+0x604>
 8007686:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800768a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800768e:	2b00      	cmp	r3, #0
 8007690:	4659      	mov	r1, fp
 8007692:	dd0f      	ble.n	80076b4 <_strtod_l+0x604>
 8007694:	2b1f      	cmp	r3, #31
 8007696:	dd55      	ble.n	8007744 <_strtod_l+0x694>
 8007698:	2b34      	cmp	r3, #52	@ 0x34
 800769a:	bfde      	ittt	le
 800769c:	f04f 33ff 	movle.w	r3, #4294967295
 80076a0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80076a4:	4093      	lslle	r3, r2
 80076a6:	f04f 0a00 	mov.w	sl, #0
 80076aa:	bfcc      	ite	gt
 80076ac:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80076b0:	ea03 0b01 	andle.w	fp, r3, r1
 80076b4:	2200      	movs	r2, #0
 80076b6:	2300      	movs	r3, #0
 80076b8:	4650      	mov	r0, sl
 80076ba:	4659      	mov	r1, fp
 80076bc:	f7f9 fa04 	bl	8000ac8 <__aeabi_dcmpeq>
 80076c0:	2800      	cmp	r0, #0
 80076c2:	d1a6      	bne.n	8007612 <_strtod_l+0x562>
 80076c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80076ca:	9805      	ldr	r0, [sp, #20]
 80076cc:	462b      	mov	r3, r5
 80076ce:	463a      	mov	r2, r7
 80076d0:	f7ff f8c6 	bl	8006860 <__s2b>
 80076d4:	900a      	str	r0, [sp, #40]	@ 0x28
 80076d6:	2800      	cmp	r0, #0
 80076d8:	f43f af05 	beq.w	80074e6 <_strtod_l+0x436>
 80076dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076de:	2a00      	cmp	r2, #0
 80076e0:	eba9 0308 	sub.w	r3, r9, r8
 80076e4:	bfa8      	it	ge
 80076e6:	2300      	movge	r3, #0
 80076e8:	9312      	str	r3, [sp, #72]	@ 0x48
 80076ea:	2400      	movs	r4, #0
 80076ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80076f0:	9316      	str	r3, [sp, #88]	@ 0x58
 80076f2:	46a0      	mov	r8, r4
 80076f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076f6:	9805      	ldr	r0, [sp, #20]
 80076f8:	6859      	ldr	r1, [r3, #4]
 80076fa:	f7ff f809 	bl	8006710 <_Balloc>
 80076fe:	4681      	mov	r9, r0
 8007700:	2800      	cmp	r0, #0
 8007702:	f43f aef4 	beq.w	80074ee <_strtod_l+0x43e>
 8007706:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007708:	691a      	ldr	r2, [r3, #16]
 800770a:	3202      	adds	r2, #2
 800770c:	f103 010c 	add.w	r1, r3, #12
 8007710:	0092      	lsls	r2, r2, #2
 8007712:	300c      	adds	r0, #12
 8007714:	f000 fd72 	bl	80081fc <memcpy>
 8007718:	ec4b ab10 	vmov	d0, sl, fp
 800771c:	9805      	ldr	r0, [sp, #20]
 800771e:	aa1c      	add	r2, sp, #112	@ 0x70
 8007720:	a91b      	add	r1, sp, #108	@ 0x6c
 8007722:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007726:	f7ff fbd7 	bl	8006ed8 <__d2b>
 800772a:	901a      	str	r0, [sp, #104]	@ 0x68
 800772c:	2800      	cmp	r0, #0
 800772e:	f43f aede 	beq.w	80074ee <_strtod_l+0x43e>
 8007732:	9805      	ldr	r0, [sp, #20]
 8007734:	2101      	movs	r1, #1
 8007736:	f7ff f929 	bl	800698c <__i2b>
 800773a:	4680      	mov	r8, r0
 800773c:	b948      	cbnz	r0, 8007752 <_strtod_l+0x6a2>
 800773e:	f04f 0800 	mov.w	r8, #0
 8007742:	e6d4      	b.n	80074ee <_strtod_l+0x43e>
 8007744:	f04f 32ff 	mov.w	r2, #4294967295
 8007748:	fa02 f303 	lsl.w	r3, r2, r3
 800774c:	ea03 0a0a 	and.w	sl, r3, sl
 8007750:	e7b0      	b.n	80076b4 <_strtod_l+0x604>
 8007752:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007754:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007756:	2d00      	cmp	r5, #0
 8007758:	bfab      	itete	ge
 800775a:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800775c:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800775e:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007760:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007762:	bfac      	ite	ge
 8007764:	18ef      	addge	r7, r5, r3
 8007766:	1b5e      	sublt	r6, r3, r5
 8007768:	9b08      	ldr	r3, [sp, #32]
 800776a:	1aed      	subs	r5, r5, r3
 800776c:	4415      	add	r5, r2
 800776e:	4b66      	ldr	r3, [pc, #408]	@ (8007908 <_strtod_l+0x858>)
 8007770:	3d01      	subs	r5, #1
 8007772:	429d      	cmp	r5, r3
 8007774:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007778:	da50      	bge.n	800781c <_strtod_l+0x76c>
 800777a:	1b5b      	subs	r3, r3, r5
 800777c:	2b1f      	cmp	r3, #31
 800777e:	eba2 0203 	sub.w	r2, r2, r3
 8007782:	f04f 0101 	mov.w	r1, #1
 8007786:	dc3d      	bgt.n	8007804 <_strtod_l+0x754>
 8007788:	fa01 f303 	lsl.w	r3, r1, r3
 800778c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800778e:	2300      	movs	r3, #0
 8007790:	9310      	str	r3, [sp, #64]	@ 0x40
 8007792:	18bd      	adds	r5, r7, r2
 8007794:	9b08      	ldr	r3, [sp, #32]
 8007796:	42af      	cmp	r7, r5
 8007798:	4416      	add	r6, r2
 800779a:	441e      	add	r6, r3
 800779c:	463b      	mov	r3, r7
 800779e:	bfa8      	it	ge
 80077a0:	462b      	movge	r3, r5
 80077a2:	42b3      	cmp	r3, r6
 80077a4:	bfa8      	it	ge
 80077a6:	4633      	movge	r3, r6
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	bfc2      	ittt	gt
 80077ac:	1aed      	subgt	r5, r5, r3
 80077ae:	1af6      	subgt	r6, r6, r3
 80077b0:	1aff      	subgt	r7, r7, r3
 80077b2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	dd16      	ble.n	80077e6 <_strtod_l+0x736>
 80077b8:	4641      	mov	r1, r8
 80077ba:	9805      	ldr	r0, [sp, #20]
 80077bc:	461a      	mov	r2, r3
 80077be:	f7ff f9a5 	bl	8006b0c <__pow5mult>
 80077c2:	4680      	mov	r8, r0
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d0ba      	beq.n	800773e <_strtod_l+0x68e>
 80077c8:	4601      	mov	r1, r0
 80077ca:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80077cc:	9805      	ldr	r0, [sp, #20]
 80077ce:	f7ff f8f3 	bl	80069b8 <__multiply>
 80077d2:	900e      	str	r0, [sp, #56]	@ 0x38
 80077d4:	2800      	cmp	r0, #0
 80077d6:	f43f ae8a 	beq.w	80074ee <_strtod_l+0x43e>
 80077da:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80077dc:	9805      	ldr	r0, [sp, #20]
 80077de:	f7fe ffd7 	bl	8006790 <_Bfree>
 80077e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80077e4:	931a      	str	r3, [sp, #104]	@ 0x68
 80077e6:	2d00      	cmp	r5, #0
 80077e8:	dc1d      	bgt.n	8007826 <_strtod_l+0x776>
 80077ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	dd23      	ble.n	8007838 <_strtod_l+0x788>
 80077f0:	4649      	mov	r1, r9
 80077f2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80077f4:	9805      	ldr	r0, [sp, #20]
 80077f6:	f7ff f989 	bl	8006b0c <__pow5mult>
 80077fa:	4681      	mov	r9, r0
 80077fc:	b9e0      	cbnz	r0, 8007838 <_strtod_l+0x788>
 80077fe:	f04f 0900 	mov.w	r9, #0
 8007802:	e674      	b.n	80074ee <_strtod_l+0x43e>
 8007804:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007808:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800780c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007810:	35e2      	adds	r5, #226	@ 0xe2
 8007812:	fa01 f305 	lsl.w	r3, r1, r5
 8007816:	9310      	str	r3, [sp, #64]	@ 0x40
 8007818:	9113      	str	r1, [sp, #76]	@ 0x4c
 800781a:	e7ba      	b.n	8007792 <_strtod_l+0x6e2>
 800781c:	2300      	movs	r3, #0
 800781e:	9310      	str	r3, [sp, #64]	@ 0x40
 8007820:	2301      	movs	r3, #1
 8007822:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007824:	e7b5      	b.n	8007792 <_strtod_l+0x6e2>
 8007826:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007828:	9805      	ldr	r0, [sp, #20]
 800782a:	462a      	mov	r2, r5
 800782c:	f7ff f9c8 	bl	8006bc0 <__lshift>
 8007830:	901a      	str	r0, [sp, #104]	@ 0x68
 8007832:	2800      	cmp	r0, #0
 8007834:	d1d9      	bne.n	80077ea <_strtod_l+0x73a>
 8007836:	e65a      	b.n	80074ee <_strtod_l+0x43e>
 8007838:	2e00      	cmp	r6, #0
 800783a:	dd07      	ble.n	800784c <_strtod_l+0x79c>
 800783c:	4649      	mov	r1, r9
 800783e:	9805      	ldr	r0, [sp, #20]
 8007840:	4632      	mov	r2, r6
 8007842:	f7ff f9bd 	bl	8006bc0 <__lshift>
 8007846:	4681      	mov	r9, r0
 8007848:	2800      	cmp	r0, #0
 800784a:	d0d8      	beq.n	80077fe <_strtod_l+0x74e>
 800784c:	2f00      	cmp	r7, #0
 800784e:	dd08      	ble.n	8007862 <_strtod_l+0x7b2>
 8007850:	4641      	mov	r1, r8
 8007852:	9805      	ldr	r0, [sp, #20]
 8007854:	463a      	mov	r2, r7
 8007856:	f7ff f9b3 	bl	8006bc0 <__lshift>
 800785a:	4680      	mov	r8, r0
 800785c:	2800      	cmp	r0, #0
 800785e:	f43f ae46 	beq.w	80074ee <_strtod_l+0x43e>
 8007862:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007864:	9805      	ldr	r0, [sp, #20]
 8007866:	464a      	mov	r2, r9
 8007868:	f7ff fa32 	bl	8006cd0 <__mdiff>
 800786c:	4604      	mov	r4, r0
 800786e:	2800      	cmp	r0, #0
 8007870:	f43f ae3d 	beq.w	80074ee <_strtod_l+0x43e>
 8007874:	68c3      	ldr	r3, [r0, #12]
 8007876:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007878:	2300      	movs	r3, #0
 800787a:	60c3      	str	r3, [r0, #12]
 800787c:	4641      	mov	r1, r8
 800787e:	f7ff fa0b 	bl	8006c98 <__mcmp>
 8007882:	2800      	cmp	r0, #0
 8007884:	da46      	bge.n	8007914 <_strtod_l+0x864>
 8007886:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007888:	ea53 030a 	orrs.w	r3, r3, sl
 800788c:	d16c      	bne.n	8007968 <_strtod_l+0x8b8>
 800788e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007892:	2b00      	cmp	r3, #0
 8007894:	d168      	bne.n	8007968 <_strtod_l+0x8b8>
 8007896:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800789a:	0d1b      	lsrs	r3, r3, #20
 800789c:	051b      	lsls	r3, r3, #20
 800789e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80078a2:	d961      	bls.n	8007968 <_strtod_l+0x8b8>
 80078a4:	6963      	ldr	r3, [r4, #20]
 80078a6:	b913      	cbnz	r3, 80078ae <_strtod_l+0x7fe>
 80078a8:	6923      	ldr	r3, [r4, #16]
 80078aa:	2b01      	cmp	r3, #1
 80078ac:	dd5c      	ble.n	8007968 <_strtod_l+0x8b8>
 80078ae:	4621      	mov	r1, r4
 80078b0:	2201      	movs	r2, #1
 80078b2:	9805      	ldr	r0, [sp, #20]
 80078b4:	f7ff f984 	bl	8006bc0 <__lshift>
 80078b8:	4641      	mov	r1, r8
 80078ba:	4604      	mov	r4, r0
 80078bc:	f7ff f9ec 	bl	8006c98 <__mcmp>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	dd51      	ble.n	8007968 <_strtod_l+0x8b8>
 80078c4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80078c8:	9a08      	ldr	r2, [sp, #32]
 80078ca:	0d1b      	lsrs	r3, r3, #20
 80078cc:	051b      	lsls	r3, r3, #20
 80078ce:	2a00      	cmp	r2, #0
 80078d0:	d06b      	beq.n	80079aa <_strtod_l+0x8fa>
 80078d2:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80078d6:	d868      	bhi.n	80079aa <_strtod_l+0x8fa>
 80078d8:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80078dc:	f67f ae9d 	bls.w	800761a <_strtod_l+0x56a>
 80078e0:	4b0a      	ldr	r3, [pc, #40]	@ (800790c <_strtod_l+0x85c>)
 80078e2:	4650      	mov	r0, sl
 80078e4:	4659      	mov	r1, fp
 80078e6:	2200      	movs	r2, #0
 80078e8:	f7f8 fe86 	bl	80005f8 <__aeabi_dmul>
 80078ec:	4b08      	ldr	r3, [pc, #32]	@ (8007910 <_strtod_l+0x860>)
 80078ee:	400b      	ands	r3, r1
 80078f0:	4682      	mov	sl, r0
 80078f2:	468b      	mov	fp, r1
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	f47f ae05 	bne.w	8007504 <_strtod_l+0x454>
 80078fa:	9a05      	ldr	r2, [sp, #20]
 80078fc:	2322      	movs	r3, #34	@ 0x22
 80078fe:	6013      	str	r3, [r2, #0]
 8007900:	e600      	b.n	8007504 <_strtod_l+0x454>
 8007902:	bf00      	nop
 8007904:	080091c0 	.word	0x080091c0
 8007908:	fffffc02 	.word	0xfffffc02
 800790c:	39500000 	.word	0x39500000
 8007910:	7ff00000 	.word	0x7ff00000
 8007914:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007918:	d165      	bne.n	80079e6 <_strtod_l+0x936>
 800791a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800791c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007920:	b35a      	cbz	r2, 800797a <_strtod_l+0x8ca>
 8007922:	4a9f      	ldr	r2, [pc, #636]	@ (8007ba0 <_strtod_l+0xaf0>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d12b      	bne.n	8007980 <_strtod_l+0x8d0>
 8007928:	9b08      	ldr	r3, [sp, #32]
 800792a:	4651      	mov	r1, sl
 800792c:	b303      	cbz	r3, 8007970 <_strtod_l+0x8c0>
 800792e:	4b9d      	ldr	r3, [pc, #628]	@ (8007ba4 <_strtod_l+0xaf4>)
 8007930:	465a      	mov	r2, fp
 8007932:	4013      	ands	r3, r2
 8007934:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007938:	f04f 32ff 	mov.w	r2, #4294967295
 800793c:	d81b      	bhi.n	8007976 <_strtod_l+0x8c6>
 800793e:	0d1b      	lsrs	r3, r3, #20
 8007940:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007944:	fa02 f303 	lsl.w	r3, r2, r3
 8007948:	4299      	cmp	r1, r3
 800794a:	d119      	bne.n	8007980 <_strtod_l+0x8d0>
 800794c:	4b96      	ldr	r3, [pc, #600]	@ (8007ba8 <_strtod_l+0xaf8>)
 800794e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007950:	429a      	cmp	r2, r3
 8007952:	d102      	bne.n	800795a <_strtod_l+0x8aa>
 8007954:	3101      	adds	r1, #1
 8007956:	f43f adca 	beq.w	80074ee <_strtod_l+0x43e>
 800795a:	4b92      	ldr	r3, [pc, #584]	@ (8007ba4 <_strtod_l+0xaf4>)
 800795c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800795e:	401a      	ands	r2, r3
 8007960:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007964:	f04f 0a00 	mov.w	sl, #0
 8007968:	9b08      	ldr	r3, [sp, #32]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d1b8      	bne.n	80078e0 <_strtod_l+0x830>
 800796e:	e5c9      	b.n	8007504 <_strtod_l+0x454>
 8007970:	f04f 33ff 	mov.w	r3, #4294967295
 8007974:	e7e8      	b.n	8007948 <_strtod_l+0x898>
 8007976:	4613      	mov	r3, r2
 8007978:	e7e6      	b.n	8007948 <_strtod_l+0x898>
 800797a:	ea53 030a 	orrs.w	r3, r3, sl
 800797e:	d0a1      	beq.n	80078c4 <_strtod_l+0x814>
 8007980:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007982:	b1db      	cbz	r3, 80079bc <_strtod_l+0x90c>
 8007984:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007986:	4213      	tst	r3, r2
 8007988:	d0ee      	beq.n	8007968 <_strtod_l+0x8b8>
 800798a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800798c:	9a08      	ldr	r2, [sp, #32]
 800798e:	4650      	mov	r0, sl
 8007990:	4659      	mov	r1, fp
 8007992:	b1bb      	cbz	r3, 80079c4 <_strtod_l+0x914>
 8007994:	f7ff fb6e 	bl	8007074 <sulp>
 8007998:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800799c:	ec53 2b10 	vmov	r2, r3, d0
 80079a0:	f7f8 fc74 	bl	800028c <__adddf3>
 80079a4:	4682      	mov	sl, r0
 80079a6:	468b      	mov	fp, r1
 80079a8:	e7de      	b.n	8007968 <_strtod_l+0x8b8>
 80079aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80079ae:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80079b2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80079b6:	f04f 3aff 	mov.w	sl, #4294967295
 80079ba:	e7d5      	b.n	8007968 <_strtod_l+0x8b8>
 80079bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80079be:	ea13 0f0a 	tst.w	r3, sl
 80079c2:	e7e1      	b.n	8007988 <_strtod_l+0x8d8>
 80079c4:	f7ff fb56 	bl	8007074 <sulp>
 80079c8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079cc:	ec53 2b10 	vmov	r2, r3, d0
 80079d0:	f7f8 fc5a 	bl	8000288 <__aeabi_dsub>
 80079d4:	2200      	movs	r2, #0
 80079d6:	2300      	movs	r3, #0
 80079d8:	4682      	mov	sl, r0
 80079da:	468b      	mov	fp, r1
 80079dc:	f7f9 f874 	bl	8000ac8 <__aeabi_dcmpeq>
 80079e0:	2800      	cmp	r0, #0
 80079e2:	d0c1      	beq.n	8007968 <_strtod_l+0x8b8>
 80079e4:	e619      	b.n	800761a <_strtod_l+0x56a>
 80079e6:	4641      	mov	r1, r8
 80079e8:	4620      	mov	r0, r4
 80079ea:	f7ff facd 	bl	8006f88 <__ratio>
 80079ee:	ec57 6b10 	vmov	r6, r7, d0
 80079f2:	2200      	movs	r2, #0
 80079f4:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80079f8:	4630      	mov	r0, r6
 80079fa:	4639      	mov	r1, r7
 80079fc:	f7f9 f878 	bl	8000af0 <__aeabi_dcmple>
 8007a00:	2800      	cmp	r0, #0
 8007a02:	d06f      	beq.n	8007ae4 <_strtod_l+0xa34>
 8007a04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d17a      	bne.n	8007b00 <_strtod_l+0xa50>
 8007a0a:	f1ba 0f00 	cmp.w	sl, #0
 8007a0e:	d158      	bne.n	8007ac2 <_strtod_l+0xa12>
 8007a10:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a12:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d15a      	bne.n	8007ad0 <_strtod_l+0xa20>
 8007a1a:	4b64      	ldr	r3, [pc, #400]	@ (8007bac <_strtod_l+0xafc>)
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	4630      	mov	r0, r6
 8007a20:	4639      	mov	r1, r7
 8007a22:	f7f9 f85b 	bl	8000adc <__aeabi_dcmplt>
 8007a26:	2800      	cmp	r0, #0
 8007a28:	d159      	bne.n	8007ade <_strtod_l+0xa2e>
 8007a2a:	4630      	mov	r0, r6
 8007a2c:	4639      	mov	r1, r7
 8007a2e:	4b60      	ldr	r3, [pc, #384]	@ (8007bb0 <_strtod_l+0xb00>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	f7f8 fde1 	bl	80005f8 <__aeabi_dmul>
 8007a36:	4606      	mov	r6, r0
 8007a38:	460f      	mov	r7, r1
 8007a3a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007a3e:	9606      	str	r6, [sp, #24]
 8007a40:	9307      	str	r3, [sp, #28]
 8007a42:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a46:	4d57      	ldr	r5, [pc, #348]	@ (8007ba4 <_strtod_l+0xaf4>)
 8007a48:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007a4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a4e:	401d      	ands	r5, r3
 8007a50:	4b58      	ldr	r3, [pc, #352]	@ (8007bb4 <_strtod_l+0xb04>)
 8007a52:	429d      	cmp	r5, r3
 8007a54:	f040 80b2 	bne.w	8007bbc <_strtod_l+0xb0c>
 8007a58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007a5a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007a5e:	ec4b ab10 	vmov	d0, sl, fp
 8007a62:	f7ff f9c9 	bl	8006df8 <__ulp>
 8007a66:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007a6a:	ec51 0b10 	vmov	r0, r1, d0
 8007a6e:	f7f8 fdc3 	bl	80005f8 <__aeabi_dmul>
 8007a72:	4652      	mov	r2, sl
 8007a74:	465b      	mov	r3, fp
 8007a76:	f7f8 fc09 	bl	800028c <__adddf3>
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4949      	ldr	r1, [pc, #292]	@ (8007ba4 <_strtod_l+0xaf4>)
 8007a7e:	4a4e      	ldr	r2, [pc, #312]	@ (8007bb8 <_strtod_l+0xb08>)
 8007a80:	4019      	ands	r1, r3
 8007a82:	4291      	cmp	r1, r2
 8007a84:	4682      	mov	sl, r0
 8007a86:	d942      	bls.n	8007b0e <_strtod_l+0xa5e>
 8007a88:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007a8a:	4b47      	ldr	r3, [pc, #284]	@ (8007ba8 <_strtod_l+0xaf8>)
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	d103      	bne.n	8007a98 <_strtod_l+0x9e8>
 8007a90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007a92:	3301      	adds	r3, #1
 8007a94:	f43f ad2b 	beq.w	80074ee <_strtod_l+0x43e>
 8007a98:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007ba8 <_strtod_l+0xaf8>
 8007a9c:	f04f 3aff 	mov.w	sl, #4294967295
 8007aa0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007aa2:	9805      	ldr	r0, [sp, #20]
 8007aa4:	f7fe fe74 	bl	8006790 <_Bfree>
 8007aa8:	9805      	ldr	r0, [sp, #20]
 8007aaa:	4649      	mov	r1, r9
 8007aac:	f7fe fe70 	bl	8006790 <_Bfree>
 8007ab0:	9805      	ldr	r0, [sp, #20]
 8007ab2:	4641      	mov	r1, r8
 8007ab4:	f7fe fe6c 	bl	8006790 <_Bfree>
 8007ab8:	9805      	ldr	r0, [sp, #20]
 8007aba:	4621      	mov	r1, r4
 8007abc:	f7fe fe68 	bl	8006790 <_Bfree>
 8007ac0:	e618      	b.n	80076f4 <_strtod_l+0x644>
 8007ac2:	f1ba 0f01 	cmp.w	sl, #1
 8007ac6:	d103      	bne.n	8007ad0 <_strtod_l+0xa20>
 8007ac8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	f43f ada5 	beq.w	800761a <_strtod_l+0x56a>
 8007ad0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007b80 <_strtod_l+0xad0>
 8007ad4:	4f35      	ldr	r7, [pc, #212]	@ (8007bac <_strtod_l+0xafc>)
 8007ad6:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007ada:	2600      	movs	r6, #0
 8007adc:	e7b1      	b.n	8007a42 <_strtod_l+0x992>
 8007ade:	4f34      	ldr	r7, [pc, #208]	@ (8007bb0 <_strtod_l+0xb00>)
 8007ae0:	2600      	movs	r6, #0
 8007ae2:	e7aa      	b.n	8007a3a <_strtod_l+0x98a>
 8007ae4:	4b32      	ldr	r3, [pc, #200]	@ (8007bb0 <_strtod_l+0xb00>)
 8007ae6:	4630      	mov	r0, r6
 8007ae8:	4639      	mov	r1, r7
 8007aea:	2200      	movs	r2, #0
 8007aec:	f7f8 fd84 	bl	80005f8 <__aeabi_dmul>
 8007af0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007af2:	4606      	mov	r6, r0
 8007af4:	460f      	mov	r7, r1
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d09f      	beq.n	8007a3a <_strtod_l+0x98a>
 8007afa:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007afe:	e7a0      	b.n	8007a42 <_strtod_l+0x992>
 8007b00:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007b88 <_strtod_l+0xad8>
 8007b04:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007b08:	ec57 6b17 	vmov	r6, r7, d7
 8007b0c:	e799      	b.n	8007a42 <_strtod_l+0x992>
 8007b0e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007b12:	9b08      	ldr	r3, [sp, #32]
 8007b14:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d1c1      	bne.n	8007aa0 <_strtod_l+0x9f0>
 8007b1c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007b20:	0d1b      	lsrs	r3, r3, #20
 8007b22:	051b      	lsls	r3, r3, #20
 8007b24:	429d      	cmp	r5, r3
 8007b26:	d1bb      	bne.n	8007aa0 <_strtod_l+0x9f0>
 8007b28:	4630      	mov	r0, r6
 8007b2a:	4639      	mov	r1, r7
 8007b2c:	f7f9 f8ac 	bl	8000c88 <__aeabi_d2lz>
 8007b30:	f7f8 fd34 	bl	800059c <__aeabi_l2d>
 8007b34:	4602      	mov	r2, r0
 8007b36:	460b      	mov	r3, r1
 8007b38:	4630      	mov	r0, r6
 8007b3a:	4639      	mov	r1, r7
 8007b3c:	f7f8 fba4 	bl	8000288 <__aeabi_dsub>
 8007b40:	460b      	mov	r3, r1
 8007b42:	4602      	mov	r2, r0
 8007b44:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007b48:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007b4c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b4e:	ea46 060a 	orr.w	r6, r6, sl
 8007b52:	431e      	orrs	r6, r3
 8007b54:	d06f      	beq.n	8007c36 <_strtod_l+0xb86>
 8007b56:	a30e      	add	r3, pc, #56	@ (adr r3, 8007b90 <_strtod_l+0xae0>)
 8007b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b5c:	f7f8 ffbe 	bl	8000adc <__aeabi_dcmplt>
 8007b60:	2800      	cmp	r0, #0
 8007b62:	f47f accf 	bne.w	8007504 <_strtod_l+0x454>
 8007b66:	a30c      	add	r3, pc, #48	@ (adr r3, 8007b98 <_strtod_l+0xae8>)
 8007b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007b70:	f7f8 ffd2 	bl	8000b18 <__aeabi_dcmpgt>
 8007b74:	2800      	cmp	r0, #0
 8007b76:	d093      	beq.n	8007aa0 <_strtod_l+0x9f0>
 8007b78:	e4c4      	b.n	8007504 <_strtod_l+0x454>
 8007b7a:	bf00      	nop
 8007b7c:	f3af 8000 	nop.w
 8007b80:	00000000 	.word	0x00000000
 8007b84:	bff00000 	.word	0xbff00000
 8007b88:	00000000 	.word	0x00000000
 8007b8c:	3ff00000 	.word	0x3ff00000
 8007b90:	94a03595 	.word	0x94a03595
 8007b94:	3fdfffff 	.word	0x3fdfffff
 8007b98:	35afe535 	.word	0x35afe535
 8007b9c:	3fe00000 	.word	0x3fe00000
 8007ba0:	000fffff 	.word	0x000fffff
 8007ba4:	7ff00000 	.word	0x7ff00000
 8007ba8:	7fefffff 	.word	0x7fefffff
 8007bac:	3ff00000 	.word	0x3ff00000
 8007bb0:	3fe00000 	.word	0x3fe00000
 8007bb4:	7fe00000 	.word	0x7fe00000
 8007bb8:	7c9fffff 	.word	0x7c9fffff
 8007bbc:	9b08      	ldr	r3, [sp, #32]
 8007bbe:	b323      	cbz	r3, 8007c0a <_strtod_l+0xb5a>
 8007bc0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007bc4:	d821      	bhi.n	8007c0a <_strtod_l+0xb5a>
 8007bc6:	a328      	add	r3, pc, #160	@ (adr r3, 8007c68 <_strtod_l+0xbb8>)
 8007bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bcc:	4630      	mov	r0, r6
 8007bce:	4639      	mov	r1, r7
 8007bd0:	f7f8 ff8e 	bl	8000af0 <__aeabi_dcmple>
 8007bd4:	b1a0      	cbz	r0, 8007c00 <_strtod_l+0xb50>
 8007bd6:	4639      	mov	r1, r7
 8007bd8:	4630      	mov	r0, r6
 8007bda:	f7f8 ffe5 	bl	8000ba8 <__aeabi_d2uiz>
 8007bde:	2801      	cmp	r0, #1
 8007be0:	bf38      	it	cc
 8007be2:	2001      	movcc	r0, #1
 8007be4:	f7f8 fc8e 	bl	8000504 <__aeabi_ui2d>
 8007be8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bea:	4606      	mov	r6, r0
 8007bec:	460f      	mov	r7, r1
 8007bee:	b9fb      	cbnz	r3, 8007c30 <_strtod_l+0xb80>
 8007bf0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007bf4:	9014      	str	r0, [sp, #80]	@ 0x50
 8007bf6:	9315      	str	r3, [sp, #84]	@ 0x54
 8007bf8:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007bfc:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007c00:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007c02:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007c06:	1b5b      	subs	r3, r3, r5
 8007c08:	9311      	str	r3, [sp, #68]	@ 0x44
 8007c0a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007c0e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007c12:	f7ff f8f1 	bl	8006df8 <__ulp>
 8007c16:	4650      	mov	r0, sl
 8007c18:	ec53 2b10 	vmov	r2, r3, d0
 8007c1c:	4659      	mov	r1, fp
 8007c1e:	f7f8 fceb 	bl	80005f8 <__aeabi_dmul>
 8007c22:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007c26:	f7f8 fb31 	bl	800028c <__adddf3>
 8007c2a:	4682      	mov	sl, r0
 8007c2c:	468b      	mov	fp, r1
 8007c2e:	e770      	b.n	8007b12 <_strtod_l+0xa62>
 8007c30:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007c34:	e7e0      	b.n	8007bf8 <_strtod_l+0xb48>
 8007c36:	a30e      	add	r3, pc, #56	@ (adr r3, 8007c70 <_strtod_l+0xbc0>)
 8007c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3c:	f7f8 ff4e 	bl	8000adc <__aeabi_dcmplt>
 8007c40:	e798      	b.n	8007b74 <_strtod_l+0xac4>
 8007c42:	2300      	movs	r3, #0
 8007c44:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007c46:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007c48:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007c4a:	6013      	str	r3, [r2, #0]
 8007c4c:	f7ff ba6d 	b.w	800712a <_strtod_l+0x7a>
 8007c50:	2a65      	cmp	r2, #101	@ 0x65
 8007c52:	f43f ab66 	beq.w	8007322 <_strtod_l+0x272>
 8007c56:	2a45      	cmp	r2, #69	@ 0x45
 8007c58:	f43f ab63 	beq.w	8007322 <_strtod_l+0x272>
 8007c5c:	2301      	movs	r3, #1
 8007c5e:	f7ff bb9e 	b.w	800739e <_strtod_l+0x2ee>
 8007c62:	bf00      	nop
 8007c64:	f3af 8000 	nop.w
 8007c68:	ffc00000 	.word	0xffc00000
 8007c6c:	41dfffff 	.word	0x41dfffff
 8007c70:	94a03595 	.word	0x94a03595
 8007c74:	3fcfffff 	.word	0x3fcfffff

08007c78 <_strtod_r>:
 8007c78:	4b01      	ldr	r3, [pc, #4]	@ (8007c80 <_strtod_r+0x8>)
 8007c7a:	f7ff ba19 	b.w	80070b0 <_strtod_l>
 8007c7e:	bf00      	nop
 8007c80:	20000068 	.word	0x20000068

08007c84 <_strtol_l.constprop.0>:
 8007c84:	2b24      	cmp	r3, #36	@ 0x24
 8007c86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c8a:	4686      	mov	lr, r0
 8007c8c:	4690      	mov	r8, r2
 8007c8e:	d801      	bhi.n	8007c94 <_strtol_l.constprop.0+0x10>
 8007c90:	2b01      	cmp	r3, #1
 8007c92:	d106      	bne.n	8007ca2 <_strtol_l.constprop.0+0x1e>
 8007c94:	f7fd fdba 	bl	800580c <__errno>
 8007c98:	2316      	movs	r3, #22
 8007c9a:	6003      	str	r3, [r0, #0]
 8007c9c:	2000      	movs	r0, #0
 8007c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ca2:	4834      	ldr	r0, [pc, #208]	@ (8007d74 <_strtol_l.constprop.0+0xf0>)
 8007ca4:	460d      	mov	r5, r1
 8007ca6:	462a      	mov	r2, r5
 8007ca8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007cac:	5d06      	ldrb	r6, [r0, r4]
 8007cae:	f016 0608 	ands.w	r6, r6, #8
 8007cb2:	d1f8      	bne.n	8007ca6 <_strtol_l.constprop.0+0x22>
 8007cb4:	2c2d      	cmp	r4, #45	@ 0x2d
 8007cb6:	d12d      	bne.n	8007d14 <_strtol_l.constprop.0+0x90>
 8007cb8:	782c      	ldrb	r4, [r5, #0]
 8007cba:	2601      	movs	r6, #1
 8007cbc:	1c95      	adds	r5, r2, #2
 8007cbe:	f033 0210 	bics.w	r2, r3, #16
 8007cc2:	d109      	bne.n	8007cd8 <_strtol_l.constprop.0+0x54>
 8007cc4:	2c30      	cmp	r4, #48	@ 0x30
 8007cc6:	d12a      	bne.n	8007d1e <_strtol_l.constprop.0+0x9a>
 8007cc8:	782a      	ldrb	r2, [r5, #0]
 8007cca:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007cce:	2a58      	cmp	r2, #88	@ 0x58
 8007cd0:	d125      	bne.n	8007d1e <_strtol_l.constprop.0+0x9a>
 8007cd2:	786c      	ldrb	r4, [r5, #1]
 8007cd4:	2310      	movs	r3, #16
 8007cd6:	3502      	adds	r5, #2
 8007cd8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007cdc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	fbbc f9f3 	udiv	r9, ip, r3
 8007ce6:	4610      	mov	r0, r2
 8007ce8:	fb03 ca19 	mls	sl, r3, r9, ip
 8007cec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007cf0:	2f09      	cmp	r7, #9
 8007cf2:	d81b      	bhi.n	8007d2c <_strtol_l.constprop.0+0xa8>
 8007cf4:	463c      	mov	r4, r7
 8007cf6:	42a3      	cmp	r3, r4
 8007cf8:	dd27      	ble.n	8007d4a <_strtol_l.constprop.0+0xc6>
 8007cfa:	1c57      	adds	r7, r2, #1
 8007cfc:	d007      	beq.n	8007d0e <_strtol_l.constprop.0+0x8a>
 8007cfe:	4581      	cmp	r9, r0
 8007d00:	d320      	bcc.n	8007d44 <_strtol_l.constprop.0+0xc0>
 8007d02:	d101      	bne.n	8007d08 <_strtol_l.constprop.0+0x84>
 8007d04:	45a2      	cmp	sl, r4
 8007d06:	db1d      	blt.n	8007d44 <_strtol_l.constprop.0+0xc0>
 8007d08:	fb00 4003 	mla	r0, r0, r3, r4
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d12:	e7eb      	b.n	8007cec <_strtol_l.constprop.0+0x68>
 8007d14:	2c2b      	cmp	r4, #43	@ 0x2b
 8007d16:	bf04      	itt	eq
 8007d18:	782c      	ldrbeq	r4, [r5, #0]
 8007d1a:	1c95      	addeq	r5, r2, #2
 8007d1c:	e7cf      	b.n	8007cbe <_strtol_l.constprop.0+0x3a>
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d1da      	bne.n	8007cd8 <_strtol_l.constprop.0+0x54>
 8007d22:	2c30      	cmp	r4, #48	@ 0x30
 8007d24:	bf0c      	ite	eq
 8007d26:	2308      	moveq	r3, #8
 8007d28:	230a      	movne	r3, #10
 8007d2a:	e7d5      	b.n	8007cd8 <_strtol_l.constprop.0+0x54>
 8007d2c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007d30:	2f19      	cmp	r7, #25
 8007d32:	d801      	bhi.n	8007d38 <_strtol_l.constprop.0+0xb4>
 8007d34:	3c37      	subs	r4, #55	@ 0x37
 8007d36:	e7de      	b.n	8007cf6 <_strtol_l.constprop.0+0x72>
 8007d38:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007d3c:	2f19      	cmp	r7, #25
 8007d3e:	d804      	bhi.n	8007d4a <_strtol_l.constprop.0+0xc6>
 8007d40:	3c57      	subs	r4, #87	@ 0x57
 8007d42:	e7d8      	b.n	8007cf6 <_strtol_l.constprop.0+0x72>
 8007d44:	f04f 32ff 	mov.w	r2, #4294967295
 8007d48:	e7e1      	b.n	8007d0e <_strtol_l.constprop.0+0x8a>
 8007d4a:	1c53      	adds	r3, r2, #1
 8007d4c:	d108      	bne.n	8007d60 <_strtol_l.constprop.0+0xdc>
 8007d4e:	2322      	movs	r3, #34	@ 0x22
 8007d50:	f8ce 3000 	str.w	r3, [lr]
 8007d54:	4660      	mov	r0, ip
 8007d56:	f1b8 0f00 	cmp.w	r8, #0
 8007d5a:	d0a0      	beq.n	8007c9e <_strtol_l.constprop.0+0x1a>
 8007d5c:	1e69      	subs	r1, r5, #1
 8007d5e:	e006      	b.n	8007d6e <_strtol_l.constprop.0+0xea>
 8007d60:	b106      	cbz	r6, 8007d64 <_strtol_l.constprop.0+0xe0>
 8007d62:	4240      	negs	r0, r0
 8007d64:	f1b8 0f00 	cmp.w	r8, #0
 8007d68:	d099      	beq.n	8007c9e <_strtol_l.constprop.0+0x1a>
 8007d6a:	2a00      	cmp	r2, #0
 8007d6c:	d1f6      	bne.n	8007d5c <_strtol_l.constprop.0+0xd8>
 8007d6e:	f8c8 1000 	str.w	r1, [r8]
 8007d72:	e794      	b.n	8007c9e <_strtol_l.constprop.0+0x1a>
 8007d74:	080091e9 	.word	0x080091e9

08007d78 <_strtol_r>:
 8007d78:	f7ff bf84 	b.w	8007c84 <_strtol_l.constprop.0>

08007d7c <__ssputs_r>:
 8007d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d80:	688e      	ldr	r6, [r1, #8]
 8007d82:	461f      	mov	r7, r3
 8007d84:	42be      	cmp	r6, r7
 8007d86:	680b      	ldr	r3, [r1, #0]
 8007d88:	4682      	mov	sl, r0
 8007d8a:	460c      	mov	r4, r1
 8007d8c:	4690      	mov	r8, r2
 8007d8e:	d82d      	bhi.n	8007dec <__ssputs_r+0x70>
 8007d90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007d94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007d98:	d026      	beq.n	8007de8 <__ssputs_r+0x6c>
 8007d9a:	6965      	ldr	r5, [r4, #20]
 8007d9c:	6909      	ldr	r1, [r1, #16]
 8007d9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007da2:	eba3 0901 	sub.w	r9, r3, r1
 8007da6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007daa:	1c7b      	adds	r3, r7, #1
 8007dac:	444b      	add	r3, r9
 8007dae:	106d      	asrs	r5, r5, #1
 8007db0:	429d      	cmp	r5, r3
 8007db2:	bf38      	it	cc
 8007db4:	461d      	movcc	r5, r3
 8007db6:	0553      	lsls	r3, r2, #21
 8007db8:	d527      	bpl.n	8007e0a <__ssputs_r+0x8e>
 8007dba:	4629      	mov	r1, r5
 8007dbc:	f7fe fc1c 	bl	80065f8 <_malloc_r>
 8007dc0:	4606      	mov	r6, r0
 8007dc2:	b360      	cbz	r0, 8007e1e <__ssputs_r+0xa2>
 8007dc4:	6921      	ldr	r1, [r4, #16]
 8007dc6:	464a      	mov	r2, r9
 8007dc8:	f000 fa18 	bl	80081fc <memcpy>
 8007dcc:	89a3      	ldrh	r3, [r4, #12]
 8007dce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007dd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007dd6:	81a3      	strh	r3, [r4, #12]
 8007dd8:	6126      	str	r6, [r4, #16]
 8007dda:	6165      	str	r5, [r4, #20]
 8007ddc:	444e      	add	r6, r9
 8007dde:	eba5 0509 	sub.w	r5, r5, r9
 8007de2:	6026      	str	r6, [r4, #0]
 8007de4:	60a5      	str	r5, [r4, #8]
 8007de6:	463e      	mov	r6, r7
 8007de8:	42be      	cmp	r6, r7
 8007dea:	d900      	bls.n	8007dee <__ssputs_r+0x72>
 8007dec:	463e      	mov	r6, r7
 8007dee:	6820      	ldr	r0, [r4, #0]
 8007df0:	4632      	mov	r2, r6
 8007df2:	4641      	mov	r1, r8
 8007df4:	f000 f9c6 	bl	8008184 <memmove>
 8007df8:	68a3      	ldr	r3, [r4, #8]
 8007dfa:	1b9b      	subs	r3, r3, r6
 8007dfc:	60a3      	str	r3, [r4, #8]
 8007dfe:	6823      	ldr	r3, [r4, #0]
 8007e00:	4433      	add	r3, r6
 8007e02:	6023      	str	r3, [r4, #0]
 8007e04:	2000      	movs	r0, #0
 8007e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e0a:	462a      	mov	r2, r5
 8007e0c:	f000 fd89 	bl	8008922 <_realloc_r>
 8007e10:	4606      	mov	r6, r0
 8007e12:	2800      	cmp	r0, #0
 8007e14:	d1e0      	bne.n	8007dd8 <__ssputs_r+0x5c>
 8007e16:	6921      	ldr	r1, [r4, #16]
 8007e18:	4650      	mov	r0, sl
 8007e1a:	f7fe fb79 	bl	8006510 <_free_r>
 8007e1e:	230c      	movs	r3, #12
 8007e20:	f8ca 3000 	str.w	r3, [sl]
 8007e24:	89a3      	ldrh	r3, [r4, #12]
 8007e26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e2a:	81a3      	strh	r3, [r4, #12]
 8007e2c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e30:	e7e9      	b.n	8007e06 <__ssputs_r+0x8a>
	...

08007e34 <_svfiprintf_r>:
 8007e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e38:	4698      	mov	r8, r3
 8007e3a:	898b      	ldrh	r3, [r1, #12]
 8007e3c:	061b      	lsls	r3, r3, #24
 8007e3e:	b09d      	sub	sp, #116	@ 0x74
 8007e40:	4607      	mov	r7, r0
 8007e42:	460d      	mov	r5, r1
 8007e44:	4614      	mov	r4, r2
 8007e46:	d510      	bpl.n	8007e6a <_svfiprintf_r+0x36>
 8007e48:	690b      	ldr	r3, [r1, #16]
 8007e4a:	b973      	cbnz	r3, 8007e6a <_svfiprintf_r+0x36>
 8007e4c:	2140      	movs	r1, #64	@ 0x40
 8007e4e:	f7fe fbd3 	bl	80065f8 <_malloc_r>
 8007e52:	6028      	str	r0, [r5, #0]
 8007e54:	6128      	str	r0, [r5, #16]
 8007e56:	b930      	cbnz	r0, 8007e66 <_svfiprintf_r+0x32>
 8007e58:	230c      	movs	r3, #12
 8007e5a:	603b      	str	r3, [r7, #0]
 8007e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8007e60:	b01d      	add	sp, #116	@ 0x74
 8007e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e66:	2340      	movs	r3, #64	@ 0x40
 8007e68:	616b      	str	r3, [r5, #20]
 8007e6a:	2300      	movs	r3, #0
 8007e6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e6e:	2320      	movs	r3, #32
 8007e70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e74:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e78:	2330      	movs	r3, #48	@ 0x30
 8007e7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008018 <_svfiprintf_r+0x1e4>
 8007e7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e82:	f04f 0901 	mov.w	r9, #1
 8007e86:	4623      	mov	r3, r4
 8007e88:	469a      	mov	sl, r3
 8007e8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e8e:	b10a      	cbz	r2, 8007e94 <_svfiprintf_r+0x60>
 8007e90:	2a25      	cmp	r2, #37	@ 0x25
 8007e92:	d1f9      	bne.n	8007e88 <_svfiprintf_r+0x54>
 8007e94:	ebba 0b04 	subs.w	fp, sl, r4
 8007e98:	d00b      	beq.n	8007eb2 <_svfiprintf_r+0x7e>
 8007e9a:	465b      	mov	r3, fp
 8007e9c:	4622      	mov	r2, r4
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	4638      	mov	r0, r7
 8007ea2:	f7ff ff6b 	bl	8007d7c <__ssputs_r>
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	f000 80a7 	beq.w	8007ffa <_svfiprintf_r+0x1c6>
 8007eac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007eae:	445a      	add	r2, fp
 8007eb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8007eb2:	f89a 3000 	ldrb.w	r3, [sl]
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	f000 809f 	beq.w	8007ffa <_svfiprintf_r+0x1c6>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	f04f 32ff 	mov.w	r2, #4294967295
 8007ec2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007ec6:	f10a 0a01 	add.w	sl, sl, #1
 8007eca:	9304      	str	r3, [sp, #16]
 8007ecc:	9307      	str	r3, [sp, #28]
 8007ece:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ed2:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ed4:	4654      	mov	r4, sl
 8007ed6:	2205      	movs	r2, #5
 8007ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007edc:	484e      	ldr	r0, [pc, #312]	@ (8008018 <_svfiprintf_r+0x1e4>)
 8007ede:	f7f8 f977 	bl	80001d0 <memchr>
 8007ee2:	9a04      	ldr	r2, [sp, #16]
 8007ee4:	b9d8      	cbnz	r0, 8007f1e <_svfiprintf_r+0xea>
 8007ee6:	06d0      	lsls	r0, r2, #27
 8007ee8:	bf44      	itt	mi
 8007eea:	2320      	movmi	r3, #32
 8007eec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ef0:	0711      	lsls	r1, r2, #28
 8007ef2:	bf44      	itt	mi
 8007ef4:	232b      	movmi	r3, #43	@ 0x2b
 8007ef6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007efa:	f89a 3000 	ldrb.w	r3, [sl]
 8007efe:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f00:	d015      	beq.n	8007f2e <_svfiprintf_r+0xfa>
 8007f02:	9a07      	ldr	r2, [sp, #28]
 8007f04:	4654      	mov	r4, sl
 8007f06:	2000      	movs	r0, #0
 8007f08:	f04f 0c0a 	mov.w	ip, #10
 8007f0c:	4621      	mov	r1, r4
 8007f0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f12:	3b30      	subs	r3, #48	@ 0x30
 8007f14:	2b09      	cmp	r3, #9
 8007f16:	d94b      	bls.n	8007fb0 <_svfiprintf_r+0x17c>
 8007f18:	b1b0      	cbz	r0, 8007f48 <_svfiprintf_r+0x114>
 8007f1a:	9207      	str	r2, [sp, #28]
 8007f1c:	e014      	b.n	8007f48 <_svfiprintf_r+0x114>
 8007f1e:	eba0 0308 	sub.w	r3, r0, r8
 8007f22:	fa09 f303 	lsl.w	r3, r9, r3
 8007f26:	4313      	orrs	r3, r2
 8007f28:	9304      	str	r3, [sp, #16]
 8007f2a:	46a2      	mov	sl, r4
 8007f2c:	e7d2      	b.n	8007ed4 <_svfiprintf_r+0xa0>
 8007f2e:	9b03      	ldr	r3, [sp, #12]
 8007f30:	1d19      	adds	r1, r3, #4
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	9103      	str	r1, [sp, #12]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	bfbb      	ittet	lt
 8007f3a:	425b      	neglt	r3, r3
 8007f3c:	f042 0202 	orrlt.w	r2, r2, #2
 8007f40:	9307      	strge	r3, [sp, #28]
 8007f42:	9307      	strlt	r3, [sp, #28]
 8007f44:	bfb8      	it	lt
 8007f46:	9204      	strlt	r2, [sp, #16]
 8007f48:	7823      	ldrb	r3, [r4, #0]
 8007f4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f4c:	d10a      	bne.n	8007f64 <_svfiprintf_r+0x130>
 8007f4e:	7863      	ldrb	r3, [r4, #1]
 8007f50:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f52:	d132      	bne.n	8007fba <_svfiprintf_r+0x186>
 8007f54:	9b03      	ldr	r3, [sp, #12]
 8007f56:	1d1a      	adds	r2, r3, #4
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	9203      	str	r2, [sp, #12]
 8007f5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f60:	3402      	adds	r4, #2
 8007f62:	9305      	str	r3, [sp, #20]
 8007f64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008028 <_svfiprintf_r+0x1f4>
 8007f68:	7821      	ldrb	r1, [r4, #0]
 8007f6a:	2203      	movs	r2, #3
 8007f6c:	4650      	mov	r0, sl
 8007f6e:	f7f8 f92f 	bl	80001d0 <memchr>
 8007f72:	b138      	cbz	r0, 8007f84 <_svfiprintf_r+0x150>
 8007f74:	9b04      	ldr	r3, [sp, #16]
 8007f76:	eba0 000a 	sub.w	r0, r0, sl
 8007f7a:	2240      	movs	r2, #64	@ 0x40
 8007f7c:	4082      	lsls	r2, r0
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	3401      	adds	r4, #1
 8007f82:	9304      	str	r3, [sp, #16]
 8007f84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f88:	4824      	ldr	r0, [pc, #144]	@ (800801c <_svfiprintf_r+0x1e8>)
 8007f8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f8e:	2206      	movs	r2, #6
 8007f90:	f7f8 f91e 	bl	80001d0 <memchr>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d036      	beq.n	8008006 <_svfiprintf_r+0x1d2>
 8007f98:	4b21      	ldr	r3, [pc, #132]	@ (8008020 <_svfiprintf_r+0x1ec>)
 8007f9a:	bb1b      	cbnz	r3, 8007fe4 <_svfiprintf_r+0x1b0>
 8007f9c:	9b03      	ldr	r3, [sp, #12]
 8007f9e:	3307      	adds	r3, #7
 8007fa0:	f023 0307 	bic.w	r3, r3, #7
 8007fa4:	3308      	adds	r3, #8
 8007fa6:	9303      	str	r3, [sp, #12]
 8007fa8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007faa:	4433      	add	r3, r6
 8007fac:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fae:	e76a      	b.n	8007e86 <_svfiprintf_r+0x52>
 8007fb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8007fb4:	460c      	mov	r4, r1
 8007fb6:	2001      	movs	r0, #1
 8007fb8:	e7a8      	b.n	8007f0c <_svfiprintf_r+0xd8>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	3401      	adds	r4, #1
 8007fbe:	9305      	str	r3, [sp, #20]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	f04f 0c0a 	mov.w	ip, #10
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fcc:	3a30      	subs	r2, #48	@ 0x30
 8007fce:	2a09      	cmp	r2, #9
 8007fd0:	d903      	bls.n	8007fda <_svfiprintf_r+0x1a6>
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0c6      	beq.n	8007f64 <_svfiprintf_r+0x130>
 8007fd6:	9105      	str	r1, [sp, #20]
 8007fd8:	e7c4      	b.n	8007f64 <_svfiprintf_r+0x130>
 8007fda:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fde:	4604      	mov	r4, r0
 8007fe0:	2301      	movs	r3, #1
 8007fe2:	e7f0      	b.n	8007fc6 <_svfiprintf_r+0x192>
 8007fe4:	ab03      	add	r3, sp, #12
 8007fe6:	9300      	str	r3, [sp, #0]
 8007fe8:	462a      	mov	r2, r5
 8007fea:	4b0e      	ldr	r3, [pc, #56]	@ (8008024 <_svfiprintf_r+0x1f0>)
 8007fec:	a904      	add	r1, sp, #16
 8007fee:	4638      	mov	r0, r7
 8007ff0:	f7fc fcc8 	bl	8004984 <_printf_float>
 8007ff4:	1c42      	adds	r2, r0, #1
 8007ff6:	4606      	mov	r6, r0
 8007ff8:	d1d6      	bne.n	8007fa8 <_svfiprintf_r+0x174>
 8007ffa:	89ab      	ldrh	r3, [r5, #12]
 8007ffc:	065b      	lsls	r3, r3, #25
 8007ffe:	f53f af2d 	bmi.w	8007e5c <_svfiprintf_r+0x28>
 8008002:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008004:	e72c      	b.n	8007e60 <_svfiprintf_r+0x2c>
 8008006:	ab03      	add	r3, sp, #12
 8008008:	9300      	str	r3, [sp, #0]
 800800a:	462a      	mov	r2, r5
 800800c:	4b05      	ldr	r3, [pc, #20]	@ (8008024 <_svfiprintf_r+0x1f0>)
 800800e:	a904      	add	r1, sp, #16
 8008010:	4638      	mov	r0, r7
 8008012:	f7fc ff4f 	bl	8004eb4 <_printf_i>
 8008016:	e7ed      	b.n	8007ff4 <_svfiprintf_r+0x1c0>
 8008018:	080092e9 	.word	0x080092e9
 800801c:	080092f3 	.word	0x080092f3
 8008020:	08004985 	.word	0x08004985
 8008024:	08007d7d 	.word	0x08007d7d
 8008028:	080092ef 	.word	0x080092ef

0800802c <__sflush_r>:
 800802c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008034:	0716      	lsls	r6, r2, #28
 8008036:	4605      	mov	r5, r0
 8008038:	460c      	mov	r4, r1
 800803a:	d454      	bmi.n	80080e6 <__sflush_r+0xba>
 800803c:	684b      	ldr	r3, [r1, #4]
 800803e:	2b00      	cmp	r3, #0
 8008040:	dc02      	bgt.n	8008048 <__sflush_r+0x1c>
 8008042:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008044:	2b00      	cmp	r3, #0
 8008046:	dd48      	ble.n	80080da <__sflush_r+0xae>
 8008048:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800804a:	2e00      	cmp	r6, #0
 800804c:	d045      	beq.n	80080da <__sflush_r+0xae>
 800804e:	2300      	movs	r3, #0
 8008050:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008054:	682f      	ldr	r7, [r5, #0]
 8008056:	6a21      	ldr	r1, [r4, #32]
 8008058:	602b      	str	r3, [r5, #0]
 800805a:	d030      	beq.n	80080be <__sflush_r+0x92>
 800805c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800805e:	89a3      	ldrh	r3, [r4, #12]
 8008060:	0759      	lsls	r1, r3, #29
 8008062:	d505      	bpl.n	8008070 <__sflush_r+0x44>
 8008064:	6863      	ldr	r3, [r4, #4]
 8008066:	1ad2      	subs	r2, r2, r3
 8008068:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800806a:	b10b      	cbz	r3, 8008070 <__sflush_r+0x44>
 800806c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800806e:	1ad2      	subs	r2, r2, r3
 8008070:	2300      	movs	r3, #0
 8008072:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008074:	6a21      	ldr	r1, [r4, #32]
 8008076:	4628      	mov	r0, r5
 8008078:	47b0      	blx	r6
 800807a:	1c43      	adds	r3, r0, #1
 800807c:	89a3      	ldrh	r3, [r4, #12]
 800807e:	d106      	bne.n	800808e <__sflush_r+0x62>
 8008080:	6829      	ldr	r1, [r5, #0]
 8008082:	291d      	cmp	r1, #29
 8008084:	d82b      	bhi.n	80080de <__sflush_r+0xb2>
 8008086:	4a2a      	ldr	r2, [pc, #168]	@ (8008130 <__sflush_r+0x104>)
 8008088:	410a      	asrs	r2, r1
 800808a:	07d6      	lsls	r6, r2, #31
 800808c:	d427      	bmi.n	80080de <__sflush_r+0xb2>
 800808e:	2200      	movs	r2, #0
 8008090:	6062      	str	r2, [r4, #4]
 8008092:	04d9      	lsls	r1, r3, #19
 8008094:	6922      	ldr	r2, [r4, #16]
 8008096:	6022      	str	r2, [r4, #0]
 8008098:	d504      	bpl.n	80080a4 <__sflush_r+0x78>
 800809a:	1c42      	adds	r2, r0, #1
 800809c:	d101      	bne.n	80080a2 <__sflush_r+0x76>
 800809e:	682b      	ldr	r3, [r5, #0]
 80080a0:	b903      	cbnz	r3, 80080a4 <__sflush_r+0x78>
 80080a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80080a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80080a6:	602f      	str	r7, [r5, #0]
 80080a8:	b1b9      	cbz	r1, 80080da <__sflush_r+0xae>
 80080aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080ae:	4299      	cmp	r1, r3
 80080b0:	d002      	beq.n	80080b8 <__sflush_r+0x8c>
 80080b2:	4628      	mov	r0, r5
 80080b4:	f7fe fa2c 	bl	8006510 <_free_r>
 80080b8:	2300      	movs	r3, #0
 80080ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80080bc:	e00d      	b.n	80080da <__sflush_r+0xae>
 80080be:	2301      	movs	r3, #1
 80080c0:	4628      	mov	r0, r5
 80080c2:	47b0      	blx	r6
 80080c4:	4602      	mov	r2, r0
 80080c6:	1c50      	adds	r0, r2, #1
 80080c8:	d1c9      	bne.n	800805e <__sflush_r+0x32>
 80080ca:	682b      	ldr	r3, [r5, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d0c6      	beq.n	800805e <__sflush_r+0x32>
 80080d0:	2b1d      	cmp	r3, #29
 80080d2:	d001      	beq.n	80080d8 <__sflush_r+0xac>
 80080d4:	2b16      	cmp	r3, #22
 80080d6:	d11e      	bne.n	8008116 <__sflush_r+0xea>
 80080d8:	602f      	str	r7, [r5, #0]
 80080da:	2000      	movs	r0, #0
 80080dc:	e022      	b.n	8008124 <__sflush_r+0xf8>
 80080de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080e2:	b21b      	sxth	r3, r3
 80080e4:	e01b      	b.n	800811e <__sflush_r+0xf2>
 80080e6:	690f      	ldr	r7, [r1, #16]
 80080e8:	2f00      	cmp	r7, #0
 80080ea:	d0f6      	beq.n	80080da <__sflush_r+0xae>
 80080ec:	0793      	lsls	r3, r2, #30
 80080ee:	680e      	ldr	r6, [r1, #0]
 80080f0:	bf08      	it	eq
 80080f2:	694b      	ldreq	r3, [r1, #20]
 80080f4:	600f      	str	r7, [r1, #0]
 80080f6:	bf18      	it	ne
 80080f8:	2300      	movne	r3, #0
 80080fa:	eba6 0807 	sub.w	r8, r6, r7
 80080fe:	608b      	str	r3, [r1, #8]
 8008100:	f1b8 0f00 	cmp.w	r8, #0
 8008104:	dde9      	ble.n	80080da <__sflush_r+0xae>
 8008106:	6a21      	ldr	r1, [r4, #32]
 8008108:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800810a:	4643      	mov	r3, r8
 800810c:	463a      	mov	r2, r7
 800810e:	4628      	mov	r0, r5
 8008110:	47b0      	blx	r6
 8008112:	2800      	cmp	r0, #0
 8008114:	dc08      	bgt.n	8008128 <__sflush_r+0xfc>
 8008116:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800811a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800811e:	81a3      	strh	r3, [r4, #12]
 8008120:	f04f 30ff 	mov.w	r0, #4294967295
 8008124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008128:	4407      	add	r7, r0
 800812a:	eba8 0800 	sub.w	r8, r8, r0
 800812e:	e7e7      	b.n	8008100 <__sflush_r+0xd4>
 8008130:	dfbffffe 	.word	0xdfbffffe

08008134 <_fflush_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	690b      	ldr	r3, [r1, #16]
 8008138:	4605      	mov	r5, r0
 800813a:	460c      	mov	r4, r1
 800813c:	b913      	cbnz	r3, 8008144 <_fflush_r+0x10>
 800813e:	2500      	movs	r5, #0
 8008140:	4628      	mov	r0, r5
 8008142:	bd38      	pop	{r3, r4, r5, pc}
 8008144:	b118      	cbz	r0, 800814e <_fflush_r+0x1a>
 8008146:	6a03      	ldr	r3, [r0, #32]
 8008148:	b90b      	cbnz	r3, 800814e <_fflush_r+0x1a>
 800814a:	f7fd fa73 	bl	8005634 <__sinit>
 800814e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d0f3      	beq.n	800813e <_fflush_r+0xa>
 8008156:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008158:	07d0      	lsls	r0, r2, #31
 800815a:	d404      	bmi.n	8008166 <_fflush_r+0x32>
 800815c:	0599      	lsls	r1, r3, #22
 800815e:	d402      	bmi.n	8008166 <_fflush_r+0x32>
 8008160:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008162:	f7fd fb7e 	bl	8005862 <__retarget_lock_acquire_recursive>
 8008166:	4628      	mov	r0, r5
 8008168:	4621      	mov	r1, r4
 800816a:	f7ff ff5f 	bl	800802c <__sflush_r>
 800816e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008170:	07da      	lsls	r2, r3, #31
 8008172:	4605      	mov	r5, r0
 8008174:	d4e4      	bmi.n	8008140 <_fflush_r+0xc>
 8008176:	89a3      	ldrh	r3, [r4, #12]
 8008178:	059b      	lsls	r3, r3, #22
 800817a:	d4e1      	bmi.n	8008140 <_fflush_r+0xc>
 800817c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800817e:	f7fd fb71 	bl	8005864 <__retarget_lock_release_recursive>
 8008182:	e7dd      	b.n	8008140 <_fflush_r+0xc>

08008184 <memmove>:
 8008184:	4288      	cmp	r0, r1
 8008186:	b510      	push	{r4, lr}
 8008188:	eb01 0402 	add.w	r4, r1, r2
 800818c:	d902      	bls.n	8008194 <memmove+0x10>
 800818e:	4284      	cmp	r4, r0
 8008190:	4623      	mov	r3, r4
 8008192:	d807      	bhi.n	80081a4 <memmove+0x20>
 8008194:	1e43      	subs	r3, r0, #1
 8008196:	42a1      	cmp	r1, r4
 8008198:	d008      	beq.n	80081ac <memmove+0x28>
 800819a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800819e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081a2:	e7f8      	b.n	8008196 <memmove+0x12>
 80081a4:	4402      	add	r2, r0
 80081a6:	4601      	mov	r1, r0
 80081a8:	428a      	cmp	r2, r1
 80081aa:	d100      	bne.n	80081ae <memmove+0x2a>
 80081ac:	bd10      	pop	{r4, pc}
 80081ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081b6:	e7f7      	b.n	80081a8 <memmove+0x24>

080081b8 <strncmp>:
 80081b8:	b510      	push	{r4, lr}
 80081ba:	b16a      	cbz	r2, 80081d8 <strncmp+0x20>
 80081bc:	3901      	subs	r1, #1
 80081be:	1884      	adds	r4, r0, r2
 80081c0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081c4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80081c8:	429a      	cmp	r2, r3
 80081ca:	d103      	bne.n	80081d4 <strncmp+0x1c>
 80081cc:	42a0      	cmp	r0, r4
 80081ce:	d001      	beq.n	80081d4 <strncmp+0x1c>
 80081d0:	2a00      	cmp	r2, #0
 80081d2:	d1f5      	bne.n	80081c0 <strncmp+0x8>
 80081d4:	1ad0      	subs	r0, r2, r3
 80081d6:	bd10      	pop	{r4, pc}
 80081d8:	4610      	mov	r0, r2
 80081da:	e7fc      	b.n	80081d6 <strncmp+0x1e>

080081dc <_sbrk_r>:
 80081dc:	b538      	push	{r3, r4, r5, lr}
 80081de:	4d06      	ldr	r5, [pc, #24]	@ (80081f8 <_sbrk_r+0x1c>)
 80081e0:	2300      	movs	r3, #0
 80081e2:	4604      	mov	r4, r0
 80081e4:	4608      	mov	r0, r1
 80081e6:	602b      	str	r3, [r5, #0]
 80081e8:	f7f9 f8e4 	bl	80013b4 <_sbrk>
 80081ec:	1c43      	adds	r3, r0, #1
 80081ee:	d102      	bne.n	80081f6 <_sbrk_r+0x1a>
 80081f0:	682b      	ldr	r3, [r5, #0]
 80081f2:	b103      	cbz	r3, 80081f6 <_sbrk_r+0x1a>
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	bd38      	pop	{r3, r4, r5, pc}
 80081f8:	20000440 	.word	0x20000440

080081fc <memcpy>:
 80081fc:	440a      	add	r2, r1
 80081fe:	4291      	cmp	r1, r2
 8008200:	f100 33ff 	add.w	r3, r0, #4294967295
 8008204:	d100      	bne.n	8008208 <memcpy+0xc>
 8008206:	4770      	bx	lr
 8008208:	b510      	push	{r4, lr}
 800820a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800820e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008212:	4291      	cmp	r1, r2
 8008214:	d1f9      	bne.n	800820a <memcpy+0xe>
 8008216:	bd10      	pop	{r4, pc}

08008218 <nan>:
 8008218:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008220 <nan+0x8>
 800821c:	4770      	bx	lr
 800821e:	bf00      	nop
 8008220:	00000000 	.word	0x00000000
 8008224:	7ff80000 	.word	0x7ff80000

08008228 <__assert_func>:
 8008228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800822a:	4614      	mov	r4, r2
 800822c:	461a      	mov	r2, r3
 800822e:	4b09      	ldr	r3, [pc, #36]	@ (8008254 <__assert_func+0x2c>)
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	4605      	mov	r5, r0
 8008234:	68d8      	ldr	r0, [r3, #12]
 8008236:	b954      	cbnz	r4, 800824e <__assert_func+0x26>
 8008238:	4b07      	ldr	r3, [pc, #28]	@ (8008258 <__assert_func+0x30>)
 800823a:	461c      	mov	r4, r3
 800823c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008240:	9100      	str	r1, [sp, #0]
 8008242:	462b      	mov	r3, r5
 8008244:	4905      	ldr	r1, [pc, #20]	@ (800825c <__assert_func+0x34>)
 8008246:	f000 fba7 	bl	8008998 <fiprintf>
 800824a:	f000 fbb7 	bl	80089bc <abort>
 800824e:	4b04      	ldr	r3, [pc, #16]	@ (8008260 <__assert_func+0x38>)
 8008250:	e7f4      	b.n	800823c <__assert_func+0x14>
 8008252:	bf00      	nop
 8008254:	20000018 	.word	0x20000018
 8008258:	0800933d 	.word	0x0800933d
 800825c:	0800930f 	.word	0x0800930f
 8008260:	08009302 	.word	0x08009302

08008264 <_calloc_r>:
 8008264:	b570      	push	{r4, r5, r6, lr}
 8008266:	fba1 5402 	umull	r5, r4, r1, r2
 800826a:	b93c      	cbnz	r4, 800827c <_calloc_r+0x18>
 800826c:	4629      	mov	r1, r5
 800826e:	f7fe f9c3 	bl	80065f8 <_malloc_r>
 8008272:	4606      	mov	r6, r0
 8008274:	b928      	cbnz	r0, 8008282 <_calloc_r+0x1e>
 8008276:	2600      	movs	r6, #0
 8008278:	4630      	mov	r0, r6
 800827a:	bd70      	pop	{r4, r5, r6, pc}
 800827c:	220c      	movs	r2, #12
 800827e:	6002      	str	r2, [r0, #0]
 8008280:	e7f9      	b.n	8008276 <_calloc_r+0x12>
 8008282:	462a      	mov	r2, r5
 8008284:	4621      	mov	r1, r4
 8008286:	f7fd fa6e 	bl	8005766 <memset>
 800828a:	e7f5      	b.n	8008278 <_calloc_r+0x14>

0800828c <rshift>:
 800828c:	6903      	ldr	r3, [r0, #16]
 800828e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008292:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008296:	ea4f 1261 	mov.w	r2, r1, asr #5
 800829a:	f100 0414 	add.w	r4, r0, #20
 800829e:	dd45      	ble.n	800832c <rshift+0xa0>
 80082a0:	f011 011f 	ands.w	r1, r1, #31
 80082a4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80082a8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80082ac:	d10c      	bne.n	80082c8 <rshift+0x3c>
 80082ae:	f100 0710 	add.w	r7, r0, #16
 80082b2:	4629      	mov	r1, r5
 80082b4:	42b1      	cmp	r1, r6
 80082b6:	d334      	bcc.n	8008322 <rshift+0x96>
 80082b8:	1a9b      	subs	r3, r3, r2
 80082ba:	009b      	lsls	r3, r3, #2
 80082bc:	1eea      	subs	r2, r5, #3
 80082be:	4296      	cmp	r6, r2
 80082c0:	bf38      	it	cc
 80082c2:	2300      	movcc	r3, #0
 80082c4:	4423      	add	r3, r4
 80082c6:	e015      	b.n	80082f4 <rshift+0x68>
 80082c8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 80082cc:	f1c1 0820 	rsb	r8, r1, #32
 80082d0:	40cf      	lsrs	r7, r1
 80082d2:	f105 0e04 	add.w	lr, r5, #4
 80082d6:	46a1      	mov	r9, r4
 80082d8:	4576      	cmp	r6, lr
 80082da:	46f4      	mov	ip, lr
 80082dc:	d815      	bhi.n	800830a <rshift+0x7e>
 80082de:	1a9a      	subs	r2, r3, r2
 80082e0:	0092      	lsls	r2, r2, #2
 80082e2:	3a04      	subs	r2, #4
 80082e4:	3501      	adds	r5, #1
 80082e6:	42ae      	cmp	r6, r5
 80082e8:	bf38      	it	cc
 80082ea:	2200      	movcc	r2, #0
 80082ec:	18a3      	adds	r3, r4, r2
 80082ee:	50a7      	str	r7, [r4, r2]
 80082f0:	b107      	cbz	r7, 80082f4 <rshift+0x68>
 80082f2:	3304      	adds	r3, #4
 80082f4:	1b1a      	subs	r2, r3, r4
 80082f6:	42a3      	cmp	r3, r4
 80082f8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80082fc:	bf08      	it	eq
 80082fe:	2300      	moveq	r3, #0
 8008300:	6102      	str	r2, [r0, #16]
 8008302:	bf08      	it	eq
 8008304:	6143      	streq	r3, [r0, #20]
 8008306:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800830a:	f8dc c000 	ldr.w	ip, [ip]
 800830e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008312:	ea4c 0707 	orr.w	r7, ip, r7
 8008316:	f849 7b04 	str.w	r7, [r9], #4
 800831a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800831e:	40cf      	lsrs	r7, r1
 8008320:	e7da      	b.n	80082d8 <rshift+0x4c>
 8008322:	f851 cb04 	ldr.w	ip, [r1], #4
 8008326:	f847 cf04 	str.w	ip, [r7, #4]!
 800832a:	e7c3      	b.n	80082b4 <rshift+0x28>
 800832c:	4623      	mov	r3, r4
 800832e:	e7e1      	b.n	80082f4 <rshift+0x68>

08008330 <__hexdig_fun>:
 8008330:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8008334:	2b09      	cmp	r3, #9
 8008336:	d802      	bhi.n	800833e <__hexdig_fun+0xe>
 8008338:	3820      	subs	r0, #32
 800833a:	b2c0      	uxtb	r0, r0
 800833c:	4770      	bx	lr
 800833e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8008342:	2b05      	cmp	r3, #5
 8008344:	d801      	bhi.n	800834a <__hexdig_fun+0x1a>
 8008346:	3847      	subs	r0, #71	@ 0x47
 8008348:	e7f7      	b.n	800833a <__hexdig_fun+0xa>
 800834a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800834e:	2b05      	cmp	r3, #5
 8008350:	d801      	bhi.n	8008356 <__hexdig_fun+0x26>
 8008352:	3827      	subs	r0, #39	@ 0x27
 8008354:	e7f1      	b.n	800833a <__hexdig_fun+0xa>
 8008356:	2000      	movs	r0, #0
 8008358:	4770      	bx	lr
	...

0800835c <__gethex>:
 800835c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008360:	b085      	sub	sp, #20
 8008362:	468a      	mov	sl, r1
 8008364:	9302      	str	r3, [sp, #8]
 8008366:	680b      	ldr	r3, [r1, #0]
 8008368:	9001      	str	r0, [sp, #4]
 800836a:	4690      	mov	r8, r2
 800836c:	1c9c      	adds	r4, r3, #2
 800836e:	46a1      	mov	r9, r4
 8008370:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008374:	2830      	cmp	r0, #48	@ 0x30
 8008376:	d0fa      	beq.n	800836e <__gethex+0x12>
 8008378:	eba9 0303 	sub.w	r3, r9, r3
 800837c:	f1a3 0b02 	sub.w	fp, r3, #2
 8008380:	f7ff ffd6 	bl	8008330 <__hexdig_fun>
 8008384:	4605      	mov	r5, r0
 8008386:	2800      	cmp	r0, #0
 8008388:	d168      	bne.n	800845c <__gethex+0x100>
 800838a:	49a0      	ldr	r1, [pc, #640]	@ (800860c <__gethex+0x2b0>)
 800838c:	2201      	movs	r2, #1
 800838e:	4648      	mov	r0, r9
 8008390:	f7ff ff12 	bl	80081b8 <strncmp>
 8008394:	4607      	mov	r7, r0
 8008396:	2800      	cmp	r0, #0
 8008398:	d167      	bne.n	800846a <__gethex+0x10e>
 800839a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800839e:	4626      	mov	r6, r4
 80083a0:	f7ff ffc6 	bl	8008330 <__hexdig_fun>
 80083a4:	2800      	cmp	r0, #0
 80083a6:	d062      	beq.n	800846e <__gethex+0x112>
 80083a8:	4623      	mov	r3, r4
 80083aa:	7818      	ldrb	r0, [r3, #0]
 80083ac:	2830      	cmp	r0, #48	@ 0x30
 80083ae:	4699      	mov	r9, r3
 80083b0:	f103 0301 	add.w	r3, r3, #1
 80083b4:	d0f9      	beq.n	80083aa <__gethex+0x4e>
 80083b6:	f7ff ffbb 	bl	8008330 <__hexdig_fun>
 80083ba:	fab0 f580 	clz	r5, r0
 80083be:	096d      	lsrs	r5, r5, #5
 80083c0:	f04f 0b01 	mov.w	fp, #1
 80083c4:	464a      	mov	r2, r9
 80083c6:	4616      	mov	r6, r2
 80083c8:	3201      	adds	r2, #1
 80083ca:	7830      	ldrb	r0, [r6, #0]
 80083cc:	f7ff ffb0 	bl	8008330 <__hexdig_fun>
 80083d0:	2800      	cmp	r0, #0
 80083d2:	d1f8      	bne.n	80083c6 <__gethex+0x6a>
 80083d4:	498d      	ldr	r1, [pc, #564]	@ (800860c <__gethex+0x2b0>)
 80083d6:	2201      	movs	r2, #1
 80083d8:	4630      	mov	r0, r6
 80083da:	f7ff feed 	bl	80081b8 <strncmp>
 80083de:	2800      	cmp	r0, #0
 80083e0:	d13f      	bne.n	8008462 <__gethex+0x106>
 80083e2:	b944      	cbnz	r4, 80083f6 <__gethex+0x9a>
 80083e4:	1c74      	adds	r4, r6, #1
 80083e6:	4622      	mov	r2, r4
 80083e8:	4616      	mov	r6, r2
 80083ea:	3201      	adds	r2, #1
 80083ec:	7830      	ldrb	r0, [r6, #0]
 80083ee:	f7ff ff9f 	bl	8008330 <__hexdig_fun>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	d1f8      	bne.n	80083e8 <__gethex+0x8c>
 80083f6:	1ba4      	subs	r4, r4, r6
 80083f8:	00a7      	lsls	r7, r4, #2
 80083fa:	7833      	ldrb	r3, [r6, #0]
 80083fc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008400:	2b50      	cmp	r3, #80	@ 0x50
 8008402:	d13e      	bne.n	8008482 <__gethex+0x126>
 8008404:	7873      	ldrb	r3, [r6, #1]
 8008406:	2b2b      	cmp	r3, #43	@ 0x2b
 8008408:	d033      	beq.n	8008472 <__gethex+0x116>
 800840a:	2b2d      	cmp	r3, #45	@ 0x2d
 800840c:	d034      	beq.n	8008478 <__gethex+0x11c>
 800840e:	1c71      	adds	r1, r6, #1
 8008410:	2400      	movs	r4, #0
 8008412:	7808      	ldrb	r0, [r1, #0]
 8008414:	f7ff ff8c 	bl	8008330 <__hexdig_fun>
 8008418:	1e43      	subs	r3, r0, #1
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b18      	cmp	r3, #24
 800841e:	d830      	bhi.n	8008482 <__gethex+0x126>
 8008420:	f1a0 0210 	sub.w	r2, r0, #16
 8008424:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008428:	f7ff ff82 	bl	8008330 <__hexdig_fun>
 800842c:	f100 3cff 	add.w	ip, r0, #4294967295
 8008430:	fa5f fc8c 	uxtb.w	ip, ip
 8008434:	f1bc 0f18 	cmp.w	ip, #24
 8008438:	f04f 030a 	mov.w	r3, #10
 800843c:	d91e      	bls.n	800847c <__gethex+0x120>
 800843e:	b104      	cbz	r4, 8008442 <__gethex+0xe6>
 8008440:	4252      	negs	r2, r2
 8008442:	4417      	add	r7, r2
 8008444:	f8ca 1000 	str.w	r1, [sl]
 8008448:	b1ed      	cbz	r5, 8008486 <__gethex+0x12a>
 800844a:	f1bb 0f00 	cmp.w	fp, #0
 800844e:	bf0c      	ite	eq
 8008450:	2506      	moveq	r5, #6
 8008452:	2500      	movne	r5, #0
 8008454:	4628      	mov	r0, r5
 8008456:	b005      	add	sp, #20
 8008458:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800845c:	2500      	movs	r5, #0
 800845e:	462c      	mov	r4, r5
 8008460:	e7b0      	b.n	80083c4 <__gethex+0x68>
 8008462:	2c00      	cmp	r4, #0
 8008464:	d1c7      	bne.n	80083f6 <__gethex+0x9a>
 8008466:	4627      	mov	r7, r4
 8008468:	e7c7      	b.n	80083fa <__gethex+0x9e>
 800846a:	464e      	mov	r6, r9
 800846c:	462f      	mov	r7, r5
 800846e:	2501      	movs	r5, #1
 8008470:	e7c3      	b.n	80083fa <__gethex+0x9e>
 8008472:	2400      	movs	r4, #0
 8008474:	1cb1      	adds	r1, r6, #2
 8008476:	e7cc      	b.n	8008412 <__gethex+0xb6>
 8008478:	2401      	movs	r4, #1
 800847a:	e7fb      	b.n	8008474 <__gethex+0x118>
 800847c:	fb03 0002 	mla	r0, r3, r2, r0
 8008480:	e7ce      	b.n	8008420 <__gethex+0xc4>
 8008482:	4631      	mov	r1, r6
 8008484:	e7de      	b.n	8008444 <__gethex+0xe8>
 8008486:	eba6 0309 	sub.w	r3, r6, r9
 800848a:	3b01      	subs	r3, #1
 800848c:	4629      	mov	r1, r5
 800848e:	2b07      	cmp	r3, #7
 8008490:	dc0a      	bgt.n	80084a8 <__gethex+0x14c>
 8008492:	9801      	ldr	r0, [sp, #4]
 8008494:	f7fe f93c 	bl	8006710 <_Balloc>
 8008498:	4604      	mov	r4, r0
 800849a:	b940      	cbnz	r0, 80084ae <__gethex+0x152>
 800849c:	4b5c      	ldr	r3, [pc, #368]	@ (8008610 <__gethex+0x2b4>)
 800849e:	4602      	mov	r2, r0
 80084a0:	21e4      	movs	r1, #228	@ 0xe4
 80084a2:	485c      	ldr	r0, [pc, #368]	@ (8008614 <__gethex+0x2b8>)
 80084a4:	f7ff fec0 	bl	8008228 <__assert_func>
 80084a8:	3101      	adds	r1, #1
 80084aa:	105b      	asrs	r3, r3, #1
 80084ac:	e7ef      	b.n	800848e <__gethex+0x132>
 80084ae:	f100 0a14 	add.w	sl, r0, #20
 80084b2:	2300      	movs	r3, #0
 80084b4:	4655      	mov	r5, sl
 80084b6:	469b      	mov	fp, r3
 80084b8:	45b1      	cmp	r9, r6
 80084ba:	d337      	bcc.n	800852c <__gethex+0x1d0>
 80084bc:	f845 bb04 	str.w	fp, [r5], #4
 80084c0:	eba5 050a 	sub.w	r5, r5, sl
 80084c4:	10ad      	asrs	r5, r5, #2
 80084c6:	6125      	str	r5, [r4, #16]
 80084c8:	4658      	mov	r0, fp
 80084ca:	f7fe fa13 	bl	80068f4 <__hi0bits>
 80084ce:	016d      	lsls	r5, r5, #5
 80084d0:	f8d8 6000 	ldr.w	r6, [r8]
 80084d4:	1a2d      	subs	r5, r5, r0
 80084d6:	42b5      	cmp	r5, r6
 80084d8:	dd54      	ble.n	8008584 <__gethex+0x228>
 80084da:	1bad      	subs	r5, r5, r6
 80084dc:	4629      	mov	r1, r5
 80084de:	4620      	mov	r0, r4
 80084e0:	f7fe fda7 	bl	8007032 <__any_on>
 80084e4:	4681      	mov	r9, r0
 80084e6:	b178      	cbz	r0, 8008508 <__gethex+0x1ac>
 80084e8:	1e6b      	subs	r3, r5, #1
 80084ea:	1159      	asrs	r1, r3, #5
 80084ec:	f003 021f 	and.w	r2, r3, #31
 80084f0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80084f4:	f04f 0901 	mov.w	r9, #1
 80084f8:	fa09 f202 	lsl.w	r2, r9, r2
 80084fc:	420a      	tst	r2, r1
 80084fe:	d003      	beq.n	8008508 <__gethex+0x1ac>
 8008500:	454b      	cmp	r3, r9
 8008502:	dc36      	bgt.n	8008572 <__gethex+0x216>
 8008504:	f04f 0902 	mov.w	r9, #2
 8008508:	4629      	mov	r1, r5
 800850a:	4620      	mov	r0, r4
 800850c:	f7ff febe 	bl	800828c <rshift>
 8008510:	442f      	add	r7, r5
 8008512:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008516:	42bb      	cmp	r3, r7
 8008518:	da42      	bge.n	80085a0 <__gethex+0x244>
 800851a:	9801      	ldr	r0, [sp, #4]
 800851c:	4621      	mov	r1, r4
 800851e:	f7fe f937 	bl	8006790 <_Bfree>
 8008522:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008524:	2300      	movs	r3, #0
 8008526:	6013      	str	r3, [r2, #0]
 8008528:	25a3      	movs	r5, #163	@ 0xa3
 800852a:	e793      	b.n	8008454 <__gethex+0xf8>
 800852c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8008530:	2a2e      	cmp	r2, #46	@ 0x2e
 8008532:	d012      	beq.n	800855a <__gethex+0x1fe>
 8008534:	2b20      	cmp	r3, #32
 8008536:	d104      	bne.n	8008542 <__gethex+0x1e6>
 8008538:	f845 bb04 	str.w	fp, [r5], #4
 800853c:	f04f 0b00 	mov.w	fp, #0
 8008540:	465b      	mov	r3, fp
 8008542:	7830      	ldrb	r0, [r6, #0]
 8008544:	9303      	str	r3, [sp, #12]
 8008546:	f7ff fef3 	bl	8008330 <__hexdig_fun>
 800854a:	9b03      	ldr	r3, [sp, #12]
 800854c:	f000 000f 	and.w	r0, r0, #15
 8008550:	4098      	lsls	r0, r3
 8008552:	ea4b 0b00 	orr.w	fp, fp, r0
 8008556:	3304      	adds	r3, #4
 8008558:	e7ae      	b.n	80084b8 <__gethex+0x15c>
 800855a:	45b1      	cmp	r9, r6
 800855c:	d8ea      	bhi.n	8008534 <__gethex+0x1d8>
 800855e:	492b      	ldr	r1, [pc, #172]	@ (800860c <__gethex+0x2b0>)
 8008560:	9303      	str	r3, [sp, #12]
 8008562:	2201      	movs	r2, #1
 8008564:	4630      	mov	r0, r6
 8008566:	f7ff fe27 	bl	80081b8 <strncmp>
 800856a:	9b03      	ldr	r3, [sp, #12]
 800856c:	2800      	cmp	r0, #0
 800856e:	d1e1      	bne.n	8008534 <__gethex+0x1d8>
 8008570:	e7a2      	b.n	80084b8 <__gethex+0x15c>
 8008572:	1ea9      	subs	r1, r5, #2
 8008574:	4620      	mov	r0, r4
 8008576:	f7fe fd5c 	bl	8007032 <__any_on>
 800857a:	2800      	cmp	r0, #0
 800857c:	d0c2      	beq.n	8008504 <__gethex+0x1a8>
 800857e:	f04f 0903 	mov.w	r9, #3
 8008582:	e7c1      	b.n	8008508 <__gethex+0x1ac>
 8008584:	da09      	bge.n	800859a <__gethex+0x23e>
 8008586:	1b75      	subs	r5, r6, r5
 8008588:	4621      	mov	r1, r4
 800858a:	9801      	ldr	r0, [sp, #4]
 800858c:	462a      	mov	r2, r5
 800858e:	f7fe fb17 	bl	8006bc0 <__lshift>
 8008592:	1b7f      	subs	r7, r7, r5
 8008594:	4604      	mov	r4, r0
 8008596:	f100 0a14 	add.w	sl, r0, #20
 800859a:	f04f 0900 	mov.w	r9, #0
 800859e:	e7b8      	b.n	8008512 <__gethex+0x1b6>
 80085a0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80085a4:	42bd      	cmp	r5, r7
 80085a6:	dd6f      	ble.n	8008688 <__gethex+0x32c>
 80085a8:	1bed      	subs	r5, r5, r7
 80085aa:	42ae      	cmp	r6, r5
 80085ac:	dc34      	bgt.n	8008618 <__gethex+0x2bc>
 80085ae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80085b2:	2b02      	cmp	r3, #2
 80085b4:	d022      	beq.n	80085fc <__gethex+0x2a0>
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d024      	beq.n	8008604 <__gethex+0x2a8>
 80085ba:	2b01      	cmp	r3, #1
 80085bc:	d115      	bne.n	80085ea <__gethex+0x28e>
 80085be:	42ae      	cmp	r6, r5
 80085c0:	d113      	bne.n	80085ea <__gethex+0x28e>
 80085c2:	2e01      	cmp	r6, #1
 80085c4:	d10b      	bne.n	80085de <__gethex+0x282>
 80085c6:	9a02      	ldr	r2, [sp, #8]
 80085c8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80085cc:	6013      	str	r3, [r2, #0]
 80085ce:	2301      	movs	r3, #1
 80085d0:	6123      	str	r3, [r4, #16]
 80085d2:	f8ca 3000 	str.w	r3, [sl]
 80085d6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80085d8:	2562      	movs	r5, #98	@ 0x62
 80085da:	601c      	str	r4, [r3, #0]
 80085dc:	e73a      	b.n	8008454 <__gethex+0xf8>
 80085de:	1e71      	subs	r1, r6, #1
 80085e0:	4620      	mov	r0, r4
 80085e2:	f7fe fd26 	bl	8007032 <__any_on>
 80085e6:	2800      	cmp	r0, #0
 80085e8:	d1ed      	bne.n	80085c6 <__gethex+0x26a>
 80085ea:	9801      	ldr	r0, [sp, #4]
 80085ec:	4621      	mov	r1, r4
 80085ee:	f7fe f8cf 	bl	8006790 <_Bfree>
 80085f2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80085f4:	2300      	movs	r3, #0
 80085f6:	6013      	str	r3, [r2, #0]
 80085f8:	2550      	movs	r5, #80	@ 0x50
 80085fa:	e72b      	b.n	8008454 <__gethex+0xf8>
 80085fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1f3      	bne.n	80085ea <__gethex+0x28e>
 8008602:	e7e0      	b.n	80085c6 <__gethex+0x26a>
 8008604:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008606:	2b00      	cmp	r3, #0
 8008608:	d1dd      	bne.n	80085c6 <__gethex+0x26a>
 800860a:	e7ee      	b.n	80085ea <__gethex+0x28e>
 800860c:	08009190 	.word	0x08009190
 8008610:	08009025 	.word	0x08009025
 8008614:	0800933e 	.word	0x0800933e
 8008618:	1e6f      	subs	r7, r5, #1
 800861a:	f1b9 0f00 	cmp.w	r9, #0
 800861e:	d130      	bne.n	8008682 <__gethex+0x326>
 8008620:	b127      	cbz	r7, 800862c <__gethex+0x2d0>
 8008622:	4639      	mov	r1, r7
 8008624:	4620      	mov	r0, r4
 8008626:	f7fe fd04 	bl	8007032 <__any_on>
 800862a:	4681      	mov	r9, r0
 800862c:	117a      	asrs	r2, r7, #5
 800862e:	2301      	movs	r3, #1
 8008630:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008634:	f007 071f 	and.w	r7, r7, #31
 8008638:	40bb      	lsls	r3, r7
 800863a:	4213      	tst	r3, r2
 800863c:	4629      	mov	r1, r5
 800863e:	4620      	mov	r0, r4
 8008640:	bf18      	it	ne
 8008642:	f049 0902 	orrne.w	r9, r9, #2
 8008646:	f7ff fe21 	bl	800828c <rshift>
 800864a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800864e:	1b76      	subs	r6, r6, r5
 8008650:	2502      	movs	r5, #2
 8008652:	f1b9 0f00 	cmp.w	r9, #0
 8008656:	d047      	beq.n	80086e8 <__gethex+0x38c>
 8008658:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800865c:	2b02      	cmp	r3, #2
 800865e:	d015      	beq.n	800868c <__gethex+0x330>
 8008660:	2b03      	cmp	r3, #3
 8008662:	d017      	beq.n	8008694 <__gethex+0x338>
 8008664:	2b01      	cmp	r3, #1
 8008666:	d109      	bne.n	800867c <__gethex+0x320>
 8008668:	f019 0f02 	tst.w	r9, #2
 800866c:	d006      	beq.n	800867c <__gethex+0x320>
 800866e:	f8da 3000 	ldr.w	r3, [sl]
 8008672:	ea49 0903 	orr.w	r9, r9, r3
 8008676:	f019 0f01 	tst.w	r9, #1
 800867a:	d10e      	bne.n	800869a <__gethex+0x33e>
 800867c:	f045 0510 	orr.w	r5, r5, #16
 8008680:	e032      	b.n	80086e8 <__gethex+0x38c>
 8008682:	f04f 0901 	mov.w	r9, #1
 8008686:	e7d1      	b.n	800862c <__gethex+0x2d0>
 8008688:	2501      	movs	r5, #1
 800868a:	e7e2      	b.n	8008652 <__gethex+0x2f6>
 800868c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800868e:	f1c3 0301 	rsb	r3, r3, #1
 8008692:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008694:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008696:	2b00      	cmp	r3, #0
 8008698:	d0f0      	beq.n	800867c <__gethex+0x320>
 800869a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800869e:	f104 0314 	add.w	r3, r4, #20
 80086a2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 80086a6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 80086aa:	f04f 0c00 	mov.w	ip, #0
 80086ae:	4618      	mov	r0, r3
 80086b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80086b4:	f1b2 3fff 	cmp.w	r2, #4294967295
 80086b8:	d01b      	beq.n	80086f2 <__gethex+0x396>
 80086ba:	3201      	adds	r2, #1
 80086bc:	6002      	str	r2, [r0, #0]
 80086be:	2d02      	cmp	r5, #2
 80086c0:	f104 0314 	add.w	r3, r4, #20
 80086c4:	d13c      	bne.n	8008740 <__gethex+0x3e4>
 80086c6:	f8d8 2000 	ldr.w	r2, [r8]
 80086ca:	3a01      	subs	r2, #1
 80086cc:	42b2      	cmp	r2, r6
 80086ce:	d109      	bne.n	80086e4 <__gethex+0x388>
 80086d0:	1171      	asrs	r1, r6, #5
 80086d2:	2201      	movs	r2, #1
 80086d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80086d8:	f006 061f 	and.w	r6, r6, #31
 80086dc:	fa02 f606 	lsl.w	r6, r2, r6
 80086e0:	421e      	tst	r6, r3
 80086e2:	d13a      	bne.n	800875a <__gethex+0x3fe>
 80086e4:	f045 0520 	orr.w	r5, r5, #32
 80086e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80086ea:	601c      	str	r4, [r3, #0]
 80086ec:	9b02      	ldr	r3, [sp, #8]
 80086ee:	601f      	str	r7, [r3, #0]
 80086f0:	e6b0      	b.n	8008454 <__gethex+0xf8>
 80086f2:	4299      	cmp	r1, r3
 80086f4:	f843 cc04 	str.w	ip, [r3, #-4]
 80086f8:	d8d9      	bhi.n	80086ae <__gethex+0x352>
 80086fa:	68a3      	ldr	r3, [r4, #8]
 80086fc:	459b      	cmp	fp, r3
 80086fe:	db17      	blt.n	8008730 <__gethex+0x3d4>
 8008700:	6861      	ldr	r1, [r4, #4]
 8008702:	9801      	ldr	r0, [sp, #4]
 8008704:	3101      	adds	r1, #1
 8008706:	f7fe f803 	bl	8006710 <_Balloc>
 800870a:	4681      	mov	r9, r0
 800870c:	b918      	cbnz	r0, 8008716 <__gethex+0x3ba>
 800870e:	4b1a      	ldr	r3, [pc, #104]	@ (8008778 <__gethex+0x41c>)
 8008710:	4602      	mov	r2, r0
 8008712:	2184      	movs	r1, #132	@ 0x84
 8008714:	e6c5      	b.n	80084a2 <__gethex+0x146>
 8008716:	6922      	ldr	r2, [r4, #16]
 8008718:	3202      	adds	r2, #2
 800871a:	f104 010c 	add.w	r1, r4, #12
 800871e:	0092      	lsls	r2, r2, #2
 8008720:	300c      	adds	r0, #12
 8008722:	f7ff fd6b 	bl	80081fc <memcpy>
 8008726:	4621      	mov	r1, r4
 8008728:	9801      	ldr	r0, [sp, #4]
 800872a:	f7fe f831 	bl	8006790 <_Bfree>
 800872e:	464c      	mov	r4, r9
 8008730:	6923      	ldr	r3, [r4, #16]
 8008732:	1c5a      	adds	r2, r3, #1
 8008734:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008738:	6122      	str	r2, [r4, #16]
 800873a:	2201      	movs	r2, #1
 800873c:	615a      	str	r2, [r3, #20]
 800873e:	e7be      	b.n	80086be <__gethex+0x362>
 8008740:	6922      	ldr	r2, [r4, #16]
 8008742:	455a      	cmp	r2, fp
 8008744:	dd0b      	ble.n	800875e <__gethex+0x402>
 8008746:	2101      	movs	r1, #1
 8008748:	4620      	mov	r0, r4
 800874a:	f7ff fd9f 	bl	800828c <rshift>
 800874e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008752:	3701      	adds	r7, #1
 8008754:	42bb      	cmp	r3, r7
 8008756:	f6ff aee0 	blt.w	800851a <__gethex+0x1be>
 800875a:	2501      	movs	r5, #1
 800875c:	e7c2      	b.n	80086e4 <__gethex+0x388>
 800875e:	f016 061f 	ands.w	r6, r6, #31
 8008762:	d0fa      	beq.n	800875a <__gethex+0x3fe>
 8008764:	4453      	add	r3, sl
 8008766:	f1c6 0620 	rsb	r6, r6, #32
 800876a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800876e:	f7fe f8c1 	bl	80068f4 <__hi0bits>
 8008772:	42b0      	cmp	r0, r6
 8008774:	dbe7      	blt.n	8008746 <__gethex+0x3ea>
 8008776:	e7f0      	b.n	800875a <__gethex+0x3fe>
 8008778:	08009025 	.word	0x08009025

0800877c <L_shift>:
 800877c:	f1c2 0208 	rsb	r2, r2, #8
 8008780:	0092      	lsls	r2, r2, #2
 8008782:	b570      	push	{r4, r5, r6, lr}
 8008784:	f1c2 0620 	rsb	r6, r2, #32
 8008788:	6843      	ldr	r3, [r0, #4]
 800878a:	6804      	ldr	r4, [r0, #0]
 800878c:	fa03 f506 	lsl.w	r5, r3, r6
 8008790:	432c      	orrs	r4, r5
 8008792:	40d3      	lsrs	r3, r2
 8008794:	6004      	str	r4, [r0, #0]
 8008796:	f840 3f04 	str.w	r3, [r0, #4]!
 800879a:	4288      	cmp	r0, r1
 800879c:	d3f4      	bcc.n	8008788 <L_shift+0xc>
 800879e:	bd70      	pop	{r4, r5, r6, pc}

080087a0 <__match>:
 80087a0:	b530      	push	{r4, r5, lr}
 80087a2:	6803      	ldr	r3, [r0, #0]
 80087a4:	3301      	adds	r3, #1
 80087a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087aa:	b914      	cbnz	r4, 80087b2 <__match+0x12>
 80087ac:	6003      	str	r3, [r0, #0]
 80087ae:	2001      	movs	r0, #1
 80087b0:	bd30      	pop	{r4, r5, pc}
 80087b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80087b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 80087ba:	2d19      	cmp	r5, #25
 80087bc:	bf98      	it	ls
 80087be:	3220      	addls	r2, #32
 80087c0:	42a2      	cmp	r2, r4
 80087c2:	d0f0      	beq.n	80087a6 <__match+0x6>
 80087c4:	2000      	movs	r0, #0
 80087c6:	e7f3      	b.n	80087b0 <__match+0x10>

080087c8 <__hexnan>:
 80087c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087cc:	680b      	ldr	r3, [r1, #0]
 80087ce:	6801      	ldr	r1, [r0, #0]
 80087d0:	115e      	asrs	r6, r3, #5
 80087d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80087d6:	f013 031f 	ands.w	r3, r3, #31
 80087da:	b087      	sub	sp, #28
 80087dc:	bf18      	it	ne
 80087de:	3604      	addne	r6, #4
 80087e0:	2500      	movs	r5, #0
 80087e2:	1f37      	subs	r7, r6, #4
 80087e4:	4682      	mov	sl, r0
 80087e6:	4690      	mov	r8, r2
 80087e8:	9301      	str	r3, [sp, #4]
 80087ea:	f846 5c04 	str.w	r5, [r6, #-4]
 80087ee:	46b9      	mov	r9, r7
 80087f0:	463c      	mov	r4, r7
 80087f2:	9502      	str	r5, [sp, #8]
 80087f4:	46ab      	mov	fp, r5
 80087f6:	784a      	ldrb	r2, [r1, #1]
 80087f8:	1c4b      	adds	r3, r1, #1
 80087fa:	9303      	str	r3, [sp, #12]
 80087fc:	b342      	cbz	r2, 8008850 <__hexnan+0x88>
 80087fe:	4610      	mov	r0, r2
 8008800:	9105      	str	r1, [sp, #20]
 8008802:	9204      	str	r2, [sp, #16]
 8008804:	f7ff fd94 	bl	8008330 <__hexdig_fun>
 8008808:	2800      	cmp	r0, #0
 800880a:	d151      	bne.n	80088b0 <__hexnan+0xe8>
 800880c:	9a04      	ldr	r2, [sp, #16]
 800880e:	9905      	ldr	r1, [sp, #20]
 8008810:	2a20      	cmp	r2, #32
 8008812:	d818      	bhi.n	8008846 <__hexnan+0x7e>
 8008814:	9b02      	ldr	r3, [sp, #8]
 8008816:	459b      	cmp	fp, r3
 8008818:	dd13      	ble.n	8008842 <__hexnan+0x7a>
 800881a:	454c      	cmp	r4, r9
 800881c:	d206      	bcs.n	800882c <__hexnan+0x64>
 800881e:	2d07      	cmp	r5, #7
 8008820:	dc04      	bgt.n	800882c <__hexnan+0x64>
 8008822:	462a      	mov	r2, r5
 8008824:	4649      	mov	r1, r9
 8008826:	4620      	mov	r0, r4
 8008828:	f7ff ffa8 	bl	800877c <L_shift>
 800882c:	4544      	cmp	r4, r8
 800882e:	d952      	bls.n	80088d6 <__hexnan+0x10e>
 8008830:	2300      	movs	r3, #0
 8008832:	f1a4 0904 	sub.w	r9, r4, #4
 8008836:	f844 3c04 	str.w	r3, [r4, #-4]
 800883a:	f8cd b008 	str.w	fp, [sp, #8]
 800883e:	464c      	mov	r4, r9
 8008840:	461d      	mov	r5, r3
 8008842:	9903      	ldr	r1, [sp, #12]
 8008844:	e7d7      	b.n	80087f6 <__hexnan+0x2e>
 8008846:	2a29      	cmp	r2, #41	@ 0x29
 8008848:	d157      	bne.n	80088fa <__hexnan+0x132>
 800884a:	3102      	adds	r1, #2
 800884c:	f8ca 1000 	str.w	r1, [sl]
 8008850:	f1bb 0f00 	cmp.w	fp, #0
 8008854:	d051      	beq.n	80088fa <__hexnan+0x132>
 8008856:	454c      	cmp	r4, r9
 8008858:	d206      	bcs.n	8008868 <__hexnan+0xa0>
 800885a:	2d07      	cmp	r5, #7
 800885c:	dc04      	bgt.n	8008868 <__hexnan+0xa0>
 800885e:	462a      	mov	r2, r5
 8008860:	4649      	mov	r1, r9
 8008862:	4620      	mov	r0, r4
 8008864:	f7ff ff8a 	bl	800877c <L_shift>
 8008868:	4544      	cmp	r4, r8
 800886a:	d936      	bls.n	80088da <__hexnan+0x112>
 800886c:	f1a8 0204 	sub.w	r2, r8, #4
 8008870:	4623      	mov	r3, r4
 8008872:	f853 1b04 	ldr.w	r1, [r3], #4
 8008876:	f842 1f04 	str.w	r1, [r2, #4]!
 800887a:	429f      	cmp	r7, r3
 800887c:	d2f9      	bcs.n	8008872 <__hexnan+0xaa>
 800887e:	1b3b      	subs	r3, r7, r4
 8008880:	f023 0303 	bic.w	r3, r3, #3
 8008884:	3304      	adds	r3, #4
 8008886:	3401      	adds	r4, #1
 8008888:	3e03      	subs	r6, #3
 800888a:	42b4      	cmp	r4, r6
 800888c:	bf88      	it	hi
 800888e:	2304      	movhi	r3, #4
 8008890:	4443      	add	r3, r8
 8008892:	2200      	movs	r2, #0
 8008894:	f843 2b04 	str.w	r2, [r3], #4
 8008898:	429f      	cmp	r7, r3
 800889a:	d2fb      	bcs.n	8008894 <__hexnan+0xcc>
 800889c:	683b      	ldr	r3, [r7, #0]
 800889e:	b91b      	cbnz	r3, 80088a8 <__hexnan+0xe0>
 80088a0:	4547      	cmp	r7, r8
 80088a2:	d128      	bne.n	80088f6 <__hexnan+0x12e>
 80088a4:	2301      	movs	r3, #1
 80088a6:	603b      	str	r3, [r7, #0]
 80088a8:	2005      	movs	r0, #5
 80088aa:	b007      	add	sp, #28
 80088ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088b0:	3501      	adds	r5, #1
 80088b2:	2d08      	cmp	r5, #8
 80088b4:	f10b 0b01 	add.w	fp, fp, #1
 80088b8:	dd06      	ble.n	80088c8 <__hexnan+0x100>
 80088ba:	4544      	cmp	r4, r8
 80088bc:	d9c1      	bls.n	8008842 <__hexnan+0x7a>
 80088be:	2300      	movs	r3, #0
 80088c0:	f844 3c04 	str.w	r3, [r4, #-4]
 80088c4:	2501      	movs	r5, #1
 80088c6:	3c04      	subs	r4, #4
 80088c8:	6822      	ldr	r2, [r4, #0]
 80088ca:	f000 000f 	and.w	r0, r0, #15
 80088ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80088d2:	6020      	str	r0, [r4, #0]
 80088d4:	e7b5      	b.n	8008842 <__hexnan+0x7a>
 80088d6:	2508      	movs	r5, #8
 80088d8:	e7b3      	b.n	8008842 <__hexnan+0x7a>
 80088da:	9b01      	ldr	r3, [sp, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d0dd      	beq.n	800889c <__hexnan+0xd4>
 80088e0:	f1c3 0320 	rsb	r3, r3, #32
 80088e4:	f04f 32ff 	mov.w	r2, #4294967295
 80088e8:	40da      	lsrs	r2, r3
 80088ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80088ee:	4013      	ands	r3, r2
 80088f0:	f846 3c04 	str.w	r3, [r6, #-4]
 80088f4:	e7d2      	b.n	800889c <__hexnan+0xd4>
 80088f6:	3f04      	subs	r7, #4
 80088f8:	e7d0      	b.n	800889c <__hexnan+0xd4>
 80088fa:	2004      	movs	r0, #4
 80088fc:	e7d5      	b.n	80088aa <__hexnan+0xe2>

080088fe <__ascii_mbtowc>:
 80088fe:	b082      	sub	sp, #8
 8008900:	b901      	cbnz	r1, 8008904 <__ascii_mbtowc+0x6>
 8008902:	a901      	add	r1, sp, #4
 8008904:	b142      	cbz	r2, 8008918 <__ascii_mbtowc+0x1a>
 8008906:	b14b      	cbz	r3, 800891c <__ascii_mbtowc+0x1e>
 8008908:	7813      	ldrb	r3, [r2, #0]
 800890a:	600b      	str	r3, [r1, #0]
 800890c:	7812      	ldrb	r2, [r2, #0]
 800890e:	1e10      	subs	r0, r2, #0
 8008910:	bf18      	it	ne
 8008912:	2001      	movne	r0, #1
 8008914:	b002      	add	sp, #8
 8008916:	4770      	bx	lr
 8008918:	4610      	mov	r0, r2
 800891a:	e7fb      	b.n	8008914 <__ascii_mbtowc+0x16>
 800891c:	f06f 0001 	mvn.w	r0, #1
 8008920:	e7f8      	b.n	8008914 <__ascii_mbtowc+0x16>

08008922 <_realloc_r>:
 8008922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008926:	4680      	mov	r8, r0
 8008928:	4615      	mov	r5, r2
 800892a:	460c      	mov	r4, r1
 800892c:	b921      	cbnz	r1, 8008938 <_realloc_r+0x16>
 800892e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008932:	4611      	mov	r1, r2
 8008934:	f7fd be60 	b.w	80065f8 <_malloc_r>
 8008938:	b92a      	cbnz	r2, 8008946 <_realloc_r+0x24>
 800893a:	f7fd fde9 	bl	8006510 <_free_r>
 800893e:	2400      	movs	r4, #0
 8008940:	4620      	mov	r0, r4
 8008942:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008946:	f000 f840 	bl	80089ca <_malloc_usable_size_r>
 800894a:	4285      	cmp	r5, r0
 800894c:	4606      	mov	r6, r0
 800894e:	d802      	bhi.n	8008956 <_realloc_r+0x34>
 8008950:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008954:	d8f4      	bhi.n	8008940 <_realloc_r+0x1e>
 8008956:	4629      	mov	r1, r5
 8008958:	4640      	mov	r0, r8
 800895a:	f7fd fe4d 	bl	80065f8 <_malloc_r>
 800895e:	4607      	mov	r7, r0
 8008960:	2800      	cmp	r0, #0
 8008962:	d0ec      	beq.n	800893e <_realloc_r+0x1c>
 8008964:	42b5      	cmp	r5, r6
 8008966:	462a      	mov	r2, r5
 8008968:	4621      	mov	r1, r4
 800896a:	bf28      	it	cs
 800896c:	4632      	movcs	r2, r6
 800896e:	f7ff fc45 	bl	80081fc <memcpy>
 8008972:	4621      	mov	r1, r4
 8008974:	4640      	mov	r0, r8
 8008976:	f7fd fdcb 	bl	8006510 <_free_r>
 800897a:	463c      	mov	r4, r7
 800897c:	e7e0      	b.n	8008940 <_realloc_r+0x1e>

0800897e <__ascii_wctomb>:
 800897e:	4603      	mov	r3, r0
 8008980:	4608      	mov	r0, r1
 8008982:	b141      	cbz	r1, 8008996 <__ascii_wctomb+0x18>
 8008984:	2aff      	cmp	r2, #255	@ 0xff
 8008986:	d904      	bls.n	8008992 <__ascii_wctomb+0x14>
 8008988:	228a      	movs	r2, #138	@ 0x8a
 800898a:	601a      	str	r2, [r3, #0]
 800898c:	f04f 30ff 	mov.w	r0, #4294967295
 8008990:	4770      	bx	lr
 8008992:	700a      	strb	r2, [r1, #0]
 8008994:	2001      	movs	r0, #1
 8008996:	4770      	bx	lr

08008998 <fiprintf>:
 8008998:	b40e      	push	{r1, r2, r3}
 800899a:	b503      	push	{r0, r1, lr}
 800899c:	4601      	mov	r1, r0
 800899e:	ab03      	add	r3, sp, #12
 80089a0:	4805      	ldr	r0, [pc, #20]	@ (80089b8 <fiprintf+0x20>)
 80089a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80089a6:	6800      	ldr	r0, [r0, #0]
 80089a8:	9301      	str	r3, [sp, #4]
 80089aa:	f000 f83f 	bl	8008a2c <_vfiprintf_r>
 80089ae:	b002      	add	sp, #8
 80089b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80089b4:	b003      	add	sp, #12
 80089b6:	4770      	bx	lr
 80089b8:	20000018 	.word	0x20000018

080089bc <abort>:
 80089bc:	b508      	push	{r3, lr}
 80089be:	2006      	movs	r0, #6
 80089c0:	f000 fa08 	bl	8008dd4 <raise>
 80089c4:	2001      	movs	r0, #1
 80089c6:	f7f8 fc7c 	bl	80012c2 <_exit>

080089ca <_malloc_usable_size_r>:
 80089ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089ce:	1f18      	subs	r0, r3, #4
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	bfbc      	itt	lt
 80089d4:	580b      	ldrlt	r3, [r1, r0]
 80089d6:	18c0      	addlt	r0, r0, r3
 80089d8:	4770      	bx	lr

080089da <__sfputc_r>:
 80089da:	6893      	ldr	r3, [r2, #8]
 80089dc:	3b01      	subs	r3, #1
 80089de:	2b00      	cmp	r3, #0
 80089e0:	b410      	push	{r4}
 80089e2:	6093      	str	r3, [r2, #8]
 80089e4:	da08      	bge.n	80089f8 <__sfputc_r+0x1e>
 80089e6:	6994      	ldr	r4, [r2, #24]
 80089e8:	42a3      	cmp	r3, r4
 80089ea:	db01      	blt.n	80089f0 <__sfputc_r+0x16>
 80089ec:	290a      	cmp	r1, #10
 80089ee:	d103      	bne.n	80089f8 <__sfputc_r+0x1e>
 80089f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089f4:	f000 b932 	b.w	8008c5c <__swbuf_r>
 80089f8:	6813      	ldr	r3, [r2, #0]
 80089fa:	1c58      	adds	r0, r3, #1
 80089fc:	6010      	str	r0, [r2, #0]
 80089fe:	7019      	strb	r1, [r3, #0]
 8008a00:	4608      	mov	r0, r1
 8008a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a06:	4770      	bx	lr

08008a08 <__sfputs_r>:
 8008a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a0a:	4606      	mov	r6, r0
 8008a0c:	460f      	mov	r7, r1
 8008a0e:	4614      	mov	r4, r2
 8008a10:	18d5      	adds	r5, r2, r3
 8008a12:	42ac      	cmp	r4, r5
 8008a14:	d101      	bne.n	8008a1a <__sfputs_r+0x12>
 8008a16:	2000      	movs	r0, #0
 8008a18:	e007      	b.n	8008a2a <__sfputs_r+0x22>
 8008a1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a1e:	463a      	mov	r2, r7
 8008a20:	4630      	mov	r0, r6
 8008a22:	f7ff ffda 	bl	80089da <__sfputc_r>
 8008a26:	1c43      	adds	r3, r0, #1
 8008a28:	d1f3      	bne.n	8008a12 <__sfputs_r+0xa>
 8008a2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008a2c <_vfiprintf_r>:
 8008a2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a30:	460d      	mov	r5, r1
 8008a32:	b09d      	sub	sp, #116	@ 0x74
 8008a34:	4614      	mov	r4, r2
 8008a36:	4698      	mov	r8, r3
 8008a38:	4606      	mov	r6, r0
 8008a3a:	b118      	cbz	r0, 8008a44 <_vfiprintf_r+0x18>
 8008a3c:	6a03      	ldr	r3, [r0, #32]
 8008a3e:	b90b      	cbnz	r3, 8008a44 <_vfiprintf_r+0x18>
 8008a40:	f7fc fdf8 	bl	8005634 <__sinit>
 8008a44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a46:	07d9      	lsls	r1, r3, #31
 8008a48:	d405      	bmi.n	8008a56 <_vfiprintf_r+0x2a>
 8008a4a:	89ab      	ldrh	r3, [r5, #12]
 8008a4c:	059a      	lsls	r2, r3, #22
 8008a4e:	d402      	bmi.n	8008a56 <_vfiprintf_r+0x2a>
 8008a50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a52:	f7fc ff06 	bl	8005862 <__retarget_lock_acquire_recursive>
 8008a56:	89ab      	ldrh	r3, [r5, #12]
 8008a58:	071b      	lsls	r3, r3, #28
 8008a5a:	d501      	bpl.n	8008a60 <_vfiprintf_r+0x34>
 8008a5c:	692b      	ldr	r3, [r5, #16]
 8008a5e:	b99b      	cbnz	r3, 8008a88 <_vfiprintf_r+0x5c>
 8008a60:	4629      	mov	r1, r5
 8008a62:	4630      	mov	r0, r6
 8008a64:	f000 f938 	bl	8008cd8 <__swsetup_r>
 8008a68:	b170      	cbz	r0, 8008a88 <_vfiprintf_r+0x5c>
 8008a6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a6c:	07dc      	lsls	r4, r3, #31
 8008a6e:	d504      	bpl.n	8008a7a <_vfiprintf_r+0x4e>
 8008a70:	f04f 30ff 	mov.w	r0, #4294967295
 8008a74:	b01d      	add	sp, #116	@ 0x74
 8008a76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a7a:	89ab      	ldrh	r3, [r5, #12]
 8008a7c:	0598      	lsls	r0, r3, #22
 8008a7e:	d4f7      	bmi.n	8008a70 <_vfiprintf_r+0x44>
 8008a80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a82:	f7fc feef 	bl	8005864 <__retarget_lock_release_recursive>
 8008a86:	e7f3      	b.n	8008a70 <_vfiprintf_r+0x44>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a8c:	2320      	movs	r3, #32
 8008a8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a92:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a96:	2330      	movs	r3, #48	@ 0x30
 8008a98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c48 <_vfiprintf_r+0x21c>
 8008a9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008aa0:	f04f 0901 	mov.w	r9, #1
 8008aa4:	4623      	mov	r3, r4
 8008aa6:	469a      	mov	sl, r3
 8008aa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008aac:	b10a      	cbz	r2, 8008ab2 <_vfiprintf_r+0x86>
 8008aae:	2a25      	cmp	r2, #37	@ 0x25
 8008ab0:	d1f9      	bne.n	8008aa6 <_vfiprintf_r+0x7a>
 8008ab2:	ebba 0b04 	subs.w	fp, sl, r4
 8008ab6:	d00b      	beq.n	8008ad0 <_vfiprintf_r+0xa4>
 8008ab8:	465b      	mov	r3, fp
 8008aba:	4622      	mov	r2, r4
 8008abc:	4629      	mov	r1, r5
 8008abe:	4630      	mov	r0, r6
 8008ac0:	f7ff ffa2 	bl	8008a08 <__sfputs_r>
 8008ac4:	3001      	adds	r0, #1
 8008ac6:	f000 80a7 	beq.w	8008c18 <_vfiprintf_r+0x1ec>
 8008aca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008acc:	445a      	add	r2, fp
 8008ace:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ad0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 809f 	beq.w	8008c18 <_vfiprintf_r+0x1ec>
 8008ada:	2300      	movs	r3, #0
 8008adc:	f04f 32ff 	mov.w	r2, #4294967295
 8008ae0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ae4:	f10a 0a01 	add.w	sl, sl, #1
 8008ae8:	9304      	str	r3, [sp, #16]
 8008aea:	9307      	str	r3, [sp, #28]
 8008aec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008af0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008af2:	4654      	mov	r4, sl
 8008af4:	2205      	movs	r2, #5
 8008af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008afa:	4853      	ldr	r0, [pc, #332]	@ (8008c48 <_vfiprintf_r+0x21c>)
 8008afc:	f7f7 fb68 	bl	80001d0 <memchr>
 8008b00:	9a04      	ldr	r2, [sp, #16]
 8008b02:	b9d8      	cbnz	r0, 8008b3c <_vfiprintf_r+0x110>
 8008b04:	06d1      	lsls	r1, r2, #27
 8008b06:	bf44      	itt	mi
 8008b08:	2320      	movmi	r3, #32
 8008b0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b0e:	0713      	lsls	r3, r2, #28
 8008b10:	bf44      	itt	mi
 8008b12:	232b      	movmi	r3, #43	@ 0x2b
 8008b14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008b18:	f89a 3000 	ldrb.w	r3, [sl]
 8008b1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b1e:	d015      	beq.n	8008b4c <_vfiprintf_r+0x120>
 8008b20:	9a07      	ldr	r2, [sp, #28]
 8008b22:	4654      	mov	r4, sl
 8008b24:	2000      	movs	r0, #0
 8008b26:	f04f 0c0a 	mov.w	ip, #10
 8008b2a:	4621      	mov	r1, r4
 8008b2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b30:	3b30      	subs	r3, #48	@ 0x30
 8008b32:	2b09      	cmp	r3, #9
 8008b34:	d94b      	bls.n	8008bce <_vfiprintf_r+0x1a2>
 8008b36:	b1b0      	cbz	r0, 8008b66 <_vfiprintf_r+0x13a>
 8008b38:	9207      	str	r2, [sp, #28]
 8008b3a:	e014      	b.n	8008b66 <_vfiprintf_r+0x13a>
 8008b3c:	eba0 0308 	sub.w	r3, r0, r8
 8008b40:	fa09 f303 	lsl.w	r3, r9, r3
 8008b44:	4313      	orrs	r3, r2
 8008b46:	9304      	str	r3, [sp, #16]
 8008b48:	46a2      	mov	sl, r4
 8008b4a:	e7d2      	b.n	8008af2 <_vfiprintf_r+0xc6>
 8008b4c:	9b03      	ldr	r3, [sp, #12]
 8008b4e:	1d19      	adds	r1, r3, #4
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	9103      	str	r1, [sp, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	bfbb      	ittet	lt
 8008b58:	425b      	neglt	r3, r3
 8008b5a:	f042 0202 	orrlt.w	r2, r2, #2
 8008b5e:	9307      	strge	r3, [sp, #28]
 8008b60:	9307      	strlt	r3, [sp, #28]
 8008b62:	bfb8      	it	lt
 8008b64:	9204      	strlt	r2, [sp, #16]
 8008b66:	7823      	ldrb	r3, [r4, #0]
 8008b68:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b6a:	d10a      	bne.n	8008b82 <_vfiprintf_r+0x156>
 8008b6c:	7863      	ldrb	r3, [r4, #1]
 8008b6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b70:	d132      	bne.n	8008bd8 <_vfiprintf_r+0x1ac>
 8008b72:	9b03      	ldr	r3, [sp, #12]
 8008b74:	1d1a      	adds	r2, r3, #4
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	9203      	str	r2, [sp, #12]
 8008b7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b7e:	3402      	adds	r4, #2
 8008b80:	9305      	str	r3, [sp, #20]
 8008b82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c58 <_vfiprintf_r+0x22c>
 8008b86:	7821      	ldrb	r1, [r4, #0]
 8008b88:	2203      	movs	r2, #3
 8008b8a:	4650      	mov	r0, sl
 8008b8c:	f7f7 fb20 	bl	80001d0 <memchr>
 8008b90:	b138      	cbz	r0, 8008ba2 <_vfiprintf_r+0x176>
 8008b92:	9b04      	ldr	r3, [sp, #16]
 8008b94:	eba0 000a 	sub.w	r0, r0, sl
 8008b98:	2240      	movs	r2, #64	@ 0x40
 8008b9a:	4082      	lsls	r2, r0
 8008b9c:	4313      	orrs	r3, r2
 8008b9e:	3401      	adds	r4, #1
 8008ba0:	9304      	str	r3, [sp, #16]
 8008ba2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ba6:	4829      	ldr	r0, [pc, #164]	@ (8008c4c <_vfiprintf_r+0x220>)
 8008ba8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008bac:	2206      	movs	r2, #6
 8008bae:	f7f7 fb0f 	bl	80001d0 <memchr>
 8008bb2:	2800      	cmp	r0, #0
 8008bb4:	d03f      	beq.n	8008c36 <_vfiprintf_r+0x20a>
 8008bb6:	4b26      	ldr	r3, [pc, #152]	@ (8008c50 <_vfiprintf_r+0x224>)
 8008bb8:	bb1b      	cbnz	r3, 8008c02 <_vfiprintf_r+0x1d6>
 8008bba:	9b03      	ldr	r3, [sp, #12]
 8008bbc:	3307      	adds	r3, #7
 8008bbe:	f023 0307 	bic.w	r3, r3, #7
 8008bc2:	3308      	adds	r3, #8
 8008bc4:	9303      	str	r3, [sp, #12]
 8008bc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008bc8:	443b      	add	r3, r7
 8008bca:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bcc:	e76a      	b.n	8008aa4 <_vfiprintf_r+0x78>
 8008bce:	fb0c 3202 	mla	r2, ip, r2, r3
 8008bd2:	460c      	mov	r4, r1
 8008bd4:	2001      	movs	r0, #1
 8008bd6:	e7a8      	b.n	8008b2a <_vfiprintf_r+0xfe>
 8008bd8:	2300      	movs	r3, #0
 8008bda:	3401      	adds	r4, #1
 8008bdc:	9305      	str	r3, [sp, #20]
 8008bde:	4619      	mov	r1, r3
 8008be0:	f04f 0c0a 	mov.w	ip, #10
 8008be4:	4620      	mov	r0, r4
 8008be6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bea:	3a30      	subs	r2, #48	@ 0x30
 8008bec:	2a09      	cmp	r2, #9
 8008bee:	d903      	bls.n	8008bf8 <_vfiprintf_r+0x1cc>
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d0c6      	beq.n	8008b82 <_vfiprintf_r+0x156>
 8008bf4:	9105      	str	r1, [sp, #20]
 8008bf6:	e7c4      	b.n	8008b82 <_vfiprintf_r+0x156>
 8008bf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bfc:	4604      	mov	r4, r0
 8008bfe:	2301      	movs	r3, #1
 8008c00:	e7f0      	b.n	8008be4 <_vfiprintf_r+0x1b8>
 8008c02:	ab03      	add	r3, sp, #12
 8008c04:	9300      	str	r3, [sp, #0]
 8008c06:	462a      	mov	r2, r5
 8008c08:	4b12      	ldr	r3, [pc, #72]	@ (8008c54 <_vfiprintf_r+0x228>)
 8008c0a:	a904      	add	r1, sp, #16
 8008c0c:	4630      	mov	r0, r6
 8008c0e:	f7fb feb9 	bl	8004984 <_printf_float>
 8008c12:	4607      	mov	r7, r0
 8008c14:	1c78      	adds	r0, r7, #1
 8008c16:	d1d6      	bne.n	8008bc6 <_vfiprintf_r+0x19a>
 8008c18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c1a:	07d9      	lsls	r1, r3, #31
 8008c1c:	d405      	bmi.n	8008c2a <_vfiprintf_r+0x1fe>
 8008c1e:	89ab      	ldrh	r3, [r5, #12]
 8008c20:	059a      	lsls	r2, r3, #22
 8008c22:	d402      	bmi.n	8008c2a <_vfiprintf_r+0x1fe>
 8008c24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c26:	f7fc fe1d 	bl	8005864 <__retarget_lock_release_recursive>
 8008c2a:	89ab      	ldrh	r3, [r5, #12]
 8008c2c:	065b      	lsls	r3, r3, #25
 8008c2e:	f53f af1f 	bmi.w	8008a70 <_vfiprintf_r+0x44>
 8008c32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c34:	e71e      	b.n	8008a74 <_vfiprintf_r+0x48>
 8008c36:	ab03      	add	r3, sp, #12
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	462a      	mov	r2, r5
 8008c3c:	4b05      	ldr	r3, [pc, #20]	@ (8008c54 <_vfiprintf_r+0x228>)
 8008c3e:	a904      	add	r1, sp, #16
 8008c40:	4630      	mov	r0, r6
 8008c42:	f7fc f937 	bl	8004eb4 <_printf_i>
 8008c46:	e7e4      	b.n	8008c12 <_vfiprintf_r+0x1e6>
 8008c48:	080092e9 	.word	0x080092e9
 8008c4c:	080092f3 	.word	0x080092f3
 8008c50:	08004985 	.word	0x08004985
 8008c54:	08008a09 	.word	0x08008a09
 8008c58:	080092ef 	.word	0x080092ef

08008c5c <__swbuf_r>:
 8008c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c5e:	460e      	mov	r6, r1
 8008c60:	4614      	mov	r4, r2
 8008c62:	4605      	mov	r5, r0
 8008c64:	b118      	cbz	r0, 8008c6e <__swbuf_r+0x12>
 8008c66:	6a03      	ldr	r3, [r0, #32]
 8008c68:	b90b      	cbnz	r3, 8008c6e <__swbuf_r+0x12>
 8008c6a:	f7fc fce3 	bl	8005634 <__sinit>
 8008c6e:	69a3      	ldr	r3, [r4, #24]
 8008c70:	60a3      	str	r3, [r4, #8]
 8008c72:	89a3      	ldrh	r3, [r4, #12]
 8008c74:	071a      	lsls	r2, r3, #28
 8008c76:	d501      	bpl.n	8008c7c <__swbuf_r+0x20>
 8008c78:	6923      	ldr	r3, [r4, #16]
 8008c7a:	b943      	cbnz	r3, 8008c8e <__swbuf_r+0x32>
 8008c7c:	4621      	mov	r1, r4
 8008c7e:	4628      	mov	r0, r5
 8008c80:	f000 f82a 	bl	8008cd8 <__swsetup_r>
 8008c84:	b118      	cbz	r0, 8008c8e <__swbuf_r+0x32>
 8008c86:	f04f 37ff 	mov.w	r7, #4294967295
 8008c8a:	4638      	mov	r0, r7
 8008c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	6922      	ldr	r2, [r4, #16]
 8008c92:	1a98      	subs	r0, r3, r2
 8008c94:	6963      	ldr	r3, [r4, #20]
 8008c96:	b2f6      	uxtb	r6, r6
 8008c98:	4283      	cmp	r3, r0
 8008c9a:	4637      	mov	r7, r6
 8008c9c:	dc05      	bgt.n	8008caa <__swbuf_r+0x4e>
 8008c9e:	4621      	mov	r1, r4
 8008ca0:	4628      	mov	r0, r5
 8008ca2:	f7ff fa47 	bl	8008134 <_fflush_r>
 8008ca6:	2800      	cmp	r0, #0
 8008ca8:	d1ed      	bne.n	8008c86 <__swbuf_r+0x2a>
 8008caa:	68a3      	ldr	r3, [r4, #8]
 8008cac:	3b01      	subs	r3, #1
 8008cae:	60a3      	str	r3, [r4, #8]
 8008cb0:	6823      	ldr	r3, [r4, #0]
 8008cb2:	1c5a      	adds	r2, r3, #1
 8008cb4:	6022      	str	r2, [r4, #0]
 8008cb6:	701e      	strb	r6, [r3, #0]
 8008cb8:	6962      	ldr	r2, [r4, #20]
 8008cba:	1c43      	adds	r3, r0, #1
 8008cbc:	429a      	cmp	r2, r3
 8008cbe:	d004      	beq.n	8008cca <__swbuf_r+0x6e>
 8008cc0:	89a3      	ldrh	r3, [r4, #12]
 8008cc2:	07db      	lsls	r3, r3, #31
 8008cc4:	d5e1      	bpl.n	8008c8a <__swbuf_r+0x2e>
 8008cc6:	2e0a      	cmp	r6, #10
 8008cc8:	d1df      	bne.n	8008c8a <__swbuf_r+0x2e>
 8008cca:	4621      	mov	r1, r4
 8008ccc:	4628      	mov	r0, r5
 8008cce:	f7ff fa31 	bl	8008134 <_fflush_r>
 8008cd2:	2800      	cmp	r0, #0
 8008cd4:	d0d9      	beq.n	8008c8a <__swbuf_r+0x2e>
 8008cd6:	e7d6      	b.n	8008c86 <__swbuf_r+0x2a>

08008cd8 <__swsetup_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	4b29      	ldr	r3, [pc, #164]	@ (8008d80 <__swsetup_r+0xa8>)
 8008cdc:	4605      	mov	r5, r0
 8008cde:	6818      	ldr	r0, [r3, #0]
 8008ce0:	460c      	mov	r4, r1
 8008ce2:	b118      	cbz	r0, 8008cec <__swsetup_r+0x14>
 8008ce4:	6a03      	ldr	r3, [r0, #32]
 8008ce6:	b90b      	cbnz	r3, 8008cec <__swsetup_r+0x14>
 8008ce8:	f7fc fca4 	bl	8005634 <__sinit>
 8008cec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cf0:	0719      	lsls	r1, r3, #28
 8008cf2:	d422      	bmi.n	8008d3a <__swsetup_r+0x62>
 8008cf4:	06da      	lsls	r2, r3, #27
 8008cf6:	d407      	bmi.n	8008d08 <__swsetup_r+0x30>
 8008cf8:	2209      	movs	r2, #9
 8008cfa:	602a      	str	r2, [r5, #0]
 8008cfc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d00:	81a3      	strh	r3, [r4, #12]
 8008d02:	f04f 30ff 	mov.w	r0, #4294967295
 8008d06:	e033      	b.n	8008d70 <__swsetup_r+0x98>
 8008d08:	0758      	lsls	r0, r3, #29
 8008d0a:	d512      	bpl.n	8008d32 <__swsetup_r+0x5a>
 8008d0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d0e:	b141      	cbz	r1, 8008d22 <__swsetup_r+0x4a>
 8008d10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d14:	4299      	cmp	r1, r3
 8008d16:	d002      	beq.n	8008d1e <__swsetup_r+0x46>
 8008d18:	4628      	mov	r0, r5
 8008d1a:	f7fd fbf9 	bl	8006510 <_free_r>
 8008d1e:	2300      	movs	r3, #0
 8008d20:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d22:	89a3      	ldrh	r3, [r4, #12]
 8008d24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008d28:	81a3      	strh	r3, [r4, #12]
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	6063      	str	r3, [r4, #4]
 8008d2e:	6923      	ldr	r3, [r4, #16]
 8008d30:	6023      	str	r3, [r4, #0]
 8008d32:	89a3      	ldrh	r3, [r4, #12]
 8008d34:	f043 0308 	orr.w	r3, r3, #8
 8008d38:	81a3      	strh	r3, [r4, #12]
 8008d3a:	6923      	ldr	r3, [r4, #16]
 8008d3c:	b94b      	cbnz	r3, 8008d52 <__swsetup_r+0x7a>
 8008d3e:	89a3      	ldrh	r3, [r4, #12]
 8008d40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008d44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008d48:	d003      	beq.n	8008d52 <__swsetup_r+0x7a>
 8008d4a:	4621      	mov	r1, r4
 8008d4c:	4628      	mov	r0, r5
 8008d4e:	f000 f883 	bl	8008e58 <__smakebuf_r>
 8008d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d56:	f013 0201 	ands.w	r2, r3, #1
 8008d5a:	d00a      	beq.n	8008d72 <__swsetup_r+0x9a>
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	60a2      	str	r2, [r4, #8]
 8008d60:	6962      	ldr	r2, [r4, #20]
 8008d62:	4252      	negs	r2, r2
 8008d64:	61a2      	str	r2, [r4, #24]
 8008d66:	6922      	ldr	r2, [r4, #16]
 8008d68:	b942      	cbnz	r2, 8008d7c <__swsetup_r+0xa4>
 8008d6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008d6e:	d1c5      	bne.n	8008cfc <__swsetup_r+0x24>
 8008d70:	bd38      	pop	{r3, r4, r5, pc}
 8008d72:	0799      	lsls	r1, r3, #30
 8008d74:	bf58      	it	pl
 8008d76:	6962      	ldrpl	r2, [r4, #20]
 8008d78:	60a2      	str	r2, [r4, #8]
 8008d7a:	e7f4      	b.n	8008d66 <__swsetup_r+0x8e>
 8008d7c:	2000      	movs	r0, #0
 8008d7e:	e7f7      	b.n	8008d70 <__swsetup_r+0x98>
 8008d80:	20000018 	.word	0x20000018

08008d84 <_raise_r>:
 8008d84:	291f      	cmp	r1, #31
 8008d86:	b538      	push	{r3, r4, r5, lr}
 8008d88:	4605      	mov	r5, r0
 8008d8a:	460c      	mov	r4, r1
 8008d8c:	d904      	bls.n	8008d98 <_raise_r+0x14>
 8008d8e:	2316      	movs	r3, #22
 8008d90:	6003      	str	r3, [r0, #0]
 8008d92:	f04f 30ff 	mov.w	r0, #4294967295
 8008d96:	bd38      	pop	{r3, r4, r5, pc}
 8008d98:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008d9a:	b112      	cbz	r2, 8008da2 <_raise_r+0x1e>
 8008d9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008da0:	b94b      	cbnz	r3, 8008db6 <_raise_r+0x32>
 8008da2:	4628      	mov	r0, r5
 8008da4:	f000 f830 	bl	8008e08 <_getpid_r>
 8008da8:	4622      	mov	r2, r4
 8008daa:	4601      	mov	r1, r0
 8008dac:	4628      	mov	r0, r5
 8008dae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008db2:	f000 b817 	b.w	8008de4 <_kill_r>
 8008db6:	2b01      	cmp	r3, #1
 8008db8:	d00a      	beq.n	8008dd0 <_raise_r+0x4c>
 8008dba:	1c59      	adds	r1, r3, #1
 8008dbc:	d103      	bne.n	8008dc6 <_raise_r+0x42>
 8008dbe:	2316      	movs	r3, #22
 8008dc0:	6003      	str	r3, [r0, #0]
 8008dc2:	2001      	movs	r0, #1
 8008dc4:	e7e7      	b.n	8008d96 <_raise_r+0x12>
 8008dc6:	2100      	movs	r1, #0
 8008dc8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008dcc:	4620      	mov	r0, r4
 8008dce:	4798      	blx	r3
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	e7e0      	b.n	8008d96 <_raise_r+0x12>

08008dd4 <raise>:
 8008dd4:	4b02      	ldr	r3, [pc, #8]	@ (8008de0 <raise+0xc>)
 8008dd6:	4601      	mov	r1, r0
 8008dd8:	6818      	ldr	r0, [r3, #0]
 8008dda:	f7ff bfd3 	b.w	8008d84 <_raise_r>
 8008dde:	bf00      	nop
 8008de0:	20000018 	.word	0x20000018

08008de4 <_kill_r>:
 8008de4:	b538      	push	{r3, r4, r5, lr}
 8008de6:	4d07      	ldr	r5, [pc, #28]	@ (8008e04 <_kill_r+0x20>)
 8008de8:	2300      	movs	r3, #0
 8008dea:	4604      	mov	r4, r0
 8008dec:	4608      	mov	r0, r1
 8008dee:	4611      	mov	r1, r2
 8008df0:	602b      	str	r3, [r5, #0]
 8008df2:	f7f8 fa56 	bl	80012a2 <_kill>
 8008df6:	1c43      	adds	r3, r0, #1
 8008df8:	d102      	bne.n	8008e00 <_kill_r+0x1c>
 8008dfa:	682b      	ldr	r3, [r5, #0]
 8008dfc:	b103      	cbz	r3, 8008e00 <_kill_r+0x1c>
 8008dfe:	6023      	str	r3, [r4, #0]
 8008e00:	bd38      	pop	{r3, r4, r5, pc}
 8008e02:	bf00      	nop
 8008e04:	20000440 	.word	0x20000440

08008e08 <_getpid_r>:
 8008e08:	f7f8 ba43 	b.w	8001292 <_getpid>

08008e0c <__swhatbuf_r>:
 8008e0c:	b570      	push	{r4, r5, r6, lr}
 8008e0e:	460c      	mov	r4, r1
 8008e10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e14:	2900      	cmp	r1, #0
 8008e16:	b096      	sub	sp, #88	@ 0x58
 8008e18:	4615      	mov	r5, r2
 8008e1a:	461e      	mov	r6, r3
 8008e1c:	da0d      	bge.n	8008e3a <__swhatbuf_r+0x2e>
 8008e1e:	89a3      	ldrh	r3, [r4, #12]
 8008e20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e24:	f04f 0100 	mov.w	r1, #0
 8008e28:	bf14      	ite	ne
 8008e2a:	2340      	movne	r3, #64	@ 0x40
 8008e2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e30:	2000      	movs	r0, #0
 8008e32:	6031      	str	r1, [r6, #0]
 8008e34:	602b      	str	r3, [r5, #0]
 8008e36:	b016      	add	sp, #88	@ 0x58
 8008e38:	bd70      	pop	{r4, r5, r6, pc}
 8008e3a:	466a      	mov	r2, sp
 8008e3c:	f000 f848 	bl	8008ed0 <_fstat_r>
 8008e40:	2800      	cmp	r0, #0
 8008e42:	dbec      	blt.n	8008e1e <__swhatbuf_r+0x12>
 8008e44:	9901      	ldr	r1, [sp, #4]
 8008e46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e4e:	4259      	negs	r1, r3
 8008e50:	4159      	adcs	r1, r3
 8008e52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e56:	e7eb      	b.n	8008e30 <__swhatbuf_r+0x24>

08008e58 <__smakebuf_r>:
 8008e58:	898b      	ldrh	r3, [r1, #12]
 8008e5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e5c:	079d      	lsls	r5, r3, #30
 8008e5e:	4606      	mov	r6, r0
 8008e60:	460c      	mov	r4, r1
 8008e62:	d507      	bpl.n	8008e74 <__smakebuf_r+0x1c>
 8008e64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e68:	6023      	str	r3, [r4, #0]
 8008e6a:	6123      	str	r3, [r4, #16]
 8008e6c:	2301      	movs	r3, #1
 8008e6e:	6163      	str	r3, [r4, #20]
 8008e70:	b003      	add	sp, #12
 8008e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e74:	ab01      	add	r3, sp, #4
 8008e76:	466a      	mov	r2, sp
 8008e78:	f7ff ffc8 	bl	8008e0c <__swhatbuf_r>
 8008e7c:	9f00      	ldr	r7, [sp, #0]
 8008e7e:	4605      	mov	r5, r0
 8008e80:	4639      	mov	r1, r7
 8008e82:	4630      	mov	r0, r6
 8008e84:	f7fd fbb8 	bl	80065f8 <_malloc_r>
 8008e88:	b948      	cbnz	r0, 8008e9e <__smakebuf_r+0x46>
 8008e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e8e:	059a      	lsls	r2, r3, #22
 8008e90:	d4ee      	bmi.n	8008e70 <__smakebuf_r+0x18>
 8008e92:	f023 0303 	bic.w	r3, r3, #3
 8008e96:	f043 0302 	orr.w	r3, r3, #2
 8008e9a:	81a3      	strh	r3, [r4, #12]
 8008e9c:	e7e2      	b.n	8008e64 <__smakebuf_r+0xc>
 8008e9e:	89a3      	ldrh	r3, [r4, #12]
 8008ea0:	6020      	str	r0, [r4, #0]
 8008ea2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ea6:	81a3      	strh	r3, [r4, #12]
 8008ea8:	9b01      	ldr	r3, [sp, #4]
 8008eaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008eae:	b15b      	cbz	r3, 8008ec8 <__smakebuf_r+0x70>
 8008eb0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008eb4:	4630      	mov	r0, r6
 8008eb6:	f000 f81d 	bl	8008ef4 <_isatty_r>
 8008eba:	b128      	cbz	r0, 8008ec8 <__smakebuf_r+0x70>
 8008ebc:	89a3      	ldrh	r3, [r4, #12]
 8008ebe:	f023 0303 	bic.w	r3, r3, #3
 8008ec2:	f043 0301 	orr.w	r3, r3, #1
 8008ec6:	81a3      	strh	r3, [r4, #12]
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	431d      	orrs	r5, r3
 8008ecc:	81a5      	strh	r5, [r4, #12]
 8008ece:	e7cf      	b.n	8008e70 <__smakebuf_r+0x18>

08008ed0 <_fstat_r>:
 8008ed0:	b538      	push	{r3, r4, r5, lr}
 8008ed2:	4d07      	ldr	r5, [pc, #28]	@ (8008ef0 <_fstat_r+0x20>)
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	4608      	mov	r0, r1
 8008eda:	4611      	mov	r1, r2
 8008edc:	602b      	str	r3, [r5, #0]
 8008ede:	f7f8 fa40 	bl	8001362 <_fstat>
 8008ee2:	1c43      	adds	r3, r0, #1
 8008ee4:	d102      	bne.n	8008eec <_fstat_r+0x1c>
 8008ee6:	682b      	ldr	r3, [r5, #0]
 8008ee8:	b103      	cbz	r3, 8008eec <_fstat_r+0x1c>
 8008eea:	6023      	str	r3, [r4, #0]
 8008eec:	bd38      	pop	{r3, r4, r5, pc}
 8008eee:	bf00      	nop
 8008ef0:	20000440 	.word	0x20000440

08008ef4 <_isatty_r>:
 8008ef4:	b538      	push	{r3, r4, r5, lr}
 8008ef6:	4d06      	ldr	r5, [pc, #24]	@ (8008f10 <_isatty_r+0x1c>)
 8008ef8:	2300      	movs	r3, #0
 8008efa:	4604      	mov	r4, r0
 8008efc:	4608      	mov	r0, r1
 8008efe:	602b      	str	r3, [r5, #0]
 8008f00:	f7f8 fa3f 	bl	8001382 <_isatty>
 8008f04:	1c43      	adds	r3, r0, #1
 8008f06:	d102      	bne.n	8008f0e <_isatty_r+0x1a>
 8008f08:	682b      	ldr	r3, [r5, #0]
 8008f0a:	b103      	cbz	r3, 8008f0e <_isatty_r+0x1a>
 8008f0c:	6023      	str	r3, [r4, #0]
 8008f0e:	bd38      	pop	{r3, r4, r5, pc}
 8008f10:	20000440 	.word	0x20000440

08008f14 <_init>:
 8008f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f16:	bf00      	nop
 8008f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f1a:	bc08      	pop	{r3}
 8008f1c:	469e      	mov	lr, r3
 8008f1e:	4770      	bx	lr

08008f20 <_fini>:
 8008f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f22:	bf00      	nop
 8008f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f26:	bc08      	pop	{r3}
 8008f28:	469e      	mov	lr, r3
 8008f2a:	4770      	bx	lr
